{"id": "114937", "block": {"feedback_correct": "", "name": "code", "feedback_wrong": "", "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b>\u00a0<b>Removing an Element from a Linked List</b></p><p>We have defined the following \n\n<b>Singly-Linked List Node</b>\u00a0C++ class for you:</p><p></p><pre><code class=\"cpp\">class Node {\n    public:\n        int value;\n        Node* next = NULL;\n};</code></pre><p></p><p>Write a function <span class=\"wysiwyg-font-tt\">remove(Node* head, int index)</span> that removes the element at\u00a0index <span class=\"wysiwyg-font-tt\">index</span> of the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>. We guarantee that we will not have you remove from the very beginning nor the very end of the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>\u00a0(so you won't need to worry about updating the <i>head</i> or <i>tail</i> pointers of the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>).</p>", "subtitle_files": [], "source": {"execution_time_limit": 5, "code": "#This is sample code challenge\nimport random\n\ndef generate():\n    tests = [\n             \"2\\n0 -> 1 -> 2 -> 3 -> 4 -> 5\",\n             str(random.randrange(2,50)) + '\\n' + ' -> '.join([str(i) for i in range(random.randrange(51,100))])\n             ]\n    return tests\n\n\ndef solve(dataset):\n    index,dataset = dataset.splitlines()\n    dataset = dataset.split(' -> ')\n    del dataset[int(index)]\n    return ' -> '.join(dataset)\n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "samples_count": 1, "execution_memory_limit": 256, "manual_memory_limits": [], "templates_data": "::c++11\n::header\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <unordered_map>\n#include <unordered_set>\n#include <string>\nusing namespace std;\n\nclass Node {\n    public:\n        int value;\n        Node* next = NULL;\n        Node(int v);\n};\nNode::Node(int v) {\n    value = v;\n}\n\n::code\nvoid remove(Node* head, int index) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    int pos;\n    cin >> pos;\n    int temp;\n    string dummy;\n    Node* root = NULL;\n    Node* curr = NULL;\n    while(cin >> temp) {\n        Node* tempNode = new Node(temp);\n        if(root == NULL) {\n            root = tempNode;\n            curr = root;\n        }\n        else {\n            curr->next = tempNode;\n            curr = curr->next;\n        }\n        cin >> dummy;\n    }\n    remove(root, pos);\n    cout << root->value;\n    curr = root->next;\n    while(curr != NULL) {\n        cout << \" -> \" << curr->value;\n        curr = curr->next;\n    }\n    return 0;\n}", "is_memory_limit_scaled": true, "is_time_limit_scaled": true, "manual_time_limits": [], "test_archive": []}, "animation": null, "video": null, "tests_archive": "/api/step-sources/114937/tests", "options": {"execution_time_limit": 5, "samples": [["2\n0 -> 1 -> 2 -> 3 -> 4 -> 5", "0 -> 1 -> 3 -> 4 -> 5"]], "limits": {"c++11": {"memory": 256, "time": 5}}, "execution_memory_limit": 256, "code_templates": {"c++11": "void remove(Node* head, int index) {\n    /* YOUR CODE HERE */\n}"}}, "subtitles": {}}, "time": "2016-09-05T17:05:45.032714"}