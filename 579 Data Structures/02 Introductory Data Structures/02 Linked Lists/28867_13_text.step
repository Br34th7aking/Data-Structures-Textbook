{"id": "111092", "block": {"name": "text", "feedback_correct": "", "animation": null, "subtitle_files": [], "video": null, "feedback_wrong": "", "options": {}, "source": null, "text": "<p>In summation, <b><span class=\"wysiwyg-color-blue\">Linked Lists</span></b> are great (constant-time) when we add or remove elements from the beginning or the end of the list, but finding elements in a <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>\u00a0(even one in which elements are sorted) cannot be optimized like it can in an <b><span class=\"wysiwyg-color-green\">Array List</span></b>, so we are stuck with O(<i>n</i>) \"find\" operations. Also, recall that, with <b><span class=\"wysiwyg-color-green\">Array Lists</span></b>, we needed to allocate extra space to avoid having to recreate the backing array repeatedly, but because of the dynamic allocation of memory for new nodes in a <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, we have no wasted memory here.</p><p>Array-based and Linked data structures are two basic starting points for many more complicated data structures. Because one strategy does not entirely dominate the other (i.e., they both have their pros and cons), you must analyze each situation to see which approach would be better.</p>", "subtitles": {}, "tests_archive": null}, "time": "2016-09-15T14:58:23.861464"}