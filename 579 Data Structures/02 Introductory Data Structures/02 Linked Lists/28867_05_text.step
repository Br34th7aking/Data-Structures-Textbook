{"id": "110908", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>\n\nAs mentioned previously, to find an element at a given index in a <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, we simply start at the <i>head</i>\u00a0node and follow forward pointers until we have reached the desired node. Note that, if we are looking for the <i>i</i>-th element of a <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, this is a O(<i>i</i>) operation, whereas in an array, accessing the <i>i</i>-th element was a O(1) operation (because of \"random access\"). This is one main drawback of a <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>: even if we know exactly what index we want to access, because the data is not stored contiguously in memory, we need to slowly iterate through the elements one-by-one until we reach the node we want.</p><p>Below is pseudocode for the \"find\" operation of a <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>:</p><p></p><pre><code class=\"cpp\"><b>find(element): // returns True if element exists in Linked List, otherwise returns False\n</b>    current = head                 // start at the \"head\" node\n    while current is not NULL:\n        if current.data == element:\n            return True\n        current = current.next     // follow the forward pointer of current\n    return False                   // we iterated over all nodes but did not find \"element\"</code></pre><p></p><p>If we want to find what element is at a given \"index\" of the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, we can perform a similar algorithm, where we start at the <i>head</i>\u00a0node and iterate through the nodes via their forward pointers until we find the element we desire. Note that in the pseudocode below, we use 0-based indexing.</p><p></p><pre><code class=\"cpp\"><b>find(index): // returns element at position \"index\" of Linked List (or NULL if invalid)\n</b>    if index &lt; 0 or index &gt;= n: // check for invalid indices\n        return NULL             // we will use NULL to denote an invalid node\n\n    curr = head                 // looking for an element in the middle of the Linked List\n    repeat index-1 times:       // move forward index-1 times\n        curr = curr.next\n    return curr</code></pre>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-02T19:33:13.755598"}