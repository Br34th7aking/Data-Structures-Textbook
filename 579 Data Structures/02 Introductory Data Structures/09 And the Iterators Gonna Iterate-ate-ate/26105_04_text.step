{"id": "96158", "time": "2016-09-09T16:56:33.718660", "block": {"subtitle_files": [], "text": "<p>As mentioned before, if our collection has an iterator class implemented (which all of the C++ STL data structures do), we can easily iterate over the elements of our collection using a <b>for-each loop</b>. The syntax is as follows:</p><p></p><pre><code class=\"cpp\">void printElements(vector&lt;string&gt; &amp; c) {\n    for(string s : c) {    // \"for-each\" string 's' in 'c':\n        cout &lt;&lt; s &lt;&lt; endl; // print 's'\n    }\n}</code></pre><p></p><p>You may have noticed that the above code functions identically to the example code we showed you when we first introduced C++ iterator syntax. In addition to looking similar and resulting in identical output, the two methods are actually functionally identical. As we mentioned, for-each loops use iterators behind the scenes. When we call the for-each loop, C++ actually creates an iterator object pointing to the first element, keeps incrementing this iterator (performing the contents of our loop's body on each element), and stops the moment it reaches the end. It simply hides these details from us to keep our code looking clean.</p>", "feedback_correct": "", "tests_archive": null, "subtitles": {}, "source": null, "name": "text", "video": null, "feedback_wrong": "", "options": {}, "animation": null}}