{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>In summation, we have now learned about the\u00a0<b><span class=\"wysiwyg-color-red\">Skip List</span></b>, a data structure based off of the\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b> that uses random number generation to mimic the binary search algorithm of a sorted\u00a0<b><span class=\"wysiwyg-color-green\">Array List</span></b> in order to achieve an\u00a0<b>average-case</b> time complexity of <b>O(log\u00a0</b><i><b>n</b></i><b>)</b>. Also, we learned that, in order to achieve this average-case time complexity, we need to be smart about choosing a value of\u00a0<i>p</i>: if\u00a0<i>p</i> is too small or too big, we will effectively just have a regular\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, and as\u00a0<i>p</i> grows, the memory usage of our\u00a0<b><span class=\"wysiwyg-color-red\">Skip List</span></b> grows with it.\u00a0Once we have chosen a value of\u00a0<i>p</i>, we should choose the maximum height of our\u00a0<b><span class=\"wysiwyg-color-red\">Skip List</span></b> to be roughly\u00a0$ \\log_{\\frac{1}{p}}n $.</p><p>In this section, we discussed a modified\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>\u00a0data structure that mimicked some properties of an\u00a0<b><span class=\"wysiwyg-color-green\">Array List</span></b>, and in the next section, we will do the reverse: we will discuss a modified\u00a0<b><span class=\"wysiwyg-color-green\">Array List</span></b> data structure that mimics some properties of a\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>: the\u00a0<b><span class=\"wysiwyg-color-purple\">Circular Array</span></b>.</p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "121933", "time": "2016-09-14T00:08:25.865024"}