{"id": "110721", "time": "2016-09-01T21:47:00.298268", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>In summation, <b><span class=\"wysiwyg-color-green\">Array Lists</span></b>\u00a0are great if we know exactly how many elements we want and if the data is already sorted, as finding an element in a sorted <b><span class=\"wysiwyg-color-green\">Array List</span></b> is O(log\u00a0<i>n</i>) in the worst case and accessing a specific element is O(1). However, inserting into an <b><span class=\"wysiwyg-color-green\">Array List</span></b>\u00a0is O(<i>n</i>) in the worst case and finding an element in a non-sorted <b><span class=\"wysiwyg-color-green\">Array List</span></b>\u00a0is O(<i>n</i>). Also, if we don't know exactly how many elements we want to store, we would need to allocate extra space in order to avoid having to rebuild the array over and over again, which would waste some space.</p><p>In general, all data structures have applications in which they excel as well as cases in which they fail, and it is up to the programmer to keep in mind these trade-offs when choosing what data structures to use.</p>", "feedback_correct": "", "video": null, "animation": null}}