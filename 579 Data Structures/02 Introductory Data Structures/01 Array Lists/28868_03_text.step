{"id": "110711", "time": "2016-09-02T18:25:14.940600", "block": {"animation": null, "text": "<p>For our purposes from this point on, we will think of arrays specifically in the context of using them to store contiguous lists of elements: an <b><span class=\"wysiwyg-color-green\">Array List</span></b>. In other words, we'll assume that there are no empty cells between elements  in the <b></b><span class=\"wysiwyg-color-black\">array</span><b></b> (even though an <b></b><span class=\"wysiwyg-color-black\">array</span><b></b> in general has no such restriction). As a result, we will assume that a user can only add elements to indices between 0 and\u00a0<i>n</i> (inclusive), where\u00a0<i>n</i> is the number of total elements that exist in the list prior to the new insertion.</p><p>As can be inferred, we as programmers don't always know exactly how many elements we want to insert into an <b><span class=\"wysiwyg-color-green\">Array List</span></b>\u00a0beforehand. To combat this, many programming languages implement <b><span class=\"wysiwyg-color-green\">Array Lists</span></b> as\u00a0\"dynamic\": they allocate some default \"large\" amount of memory initially, insert elements into this initial array, and once the array is full, they create a new larger array (typically twice as large as the old array), copy all elements from the old array into the new array, and then replace any references to the old array with references to the new array. In C++, the \"dynamic array\" is the <span class=\"wysiwyg-font-tt\">vector</span> data structure.</p><p>Below is an example of this in action, where we add the letters a-f to an <b><span class=\"wysiwyg-color-green\">\ufeffArray List</span></b><span class=\"wysiwyg-color-green\"></span> backed by an\u00a0array initialized with 5 cells, where each insertion occurs at the end of the list (notice how we allocate a new array of twice the old array's length and copy all elements from the old array into the new array when we want to insert f):</p><p><img src=\"https://ucarecdn.com/504c369f-6c53-4cc3-bc59-acf09a39775c/\" alt=\"\"></p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b>\u00a0Array structures (e.g. the array, or the Java <span class=\"wysiwyg-font-tt\">ArrayList</span>, or the C++ <span class=\"wysiwyg-font-tt\">vector</span>, etc.) require that all elements be the same size. However, array structures can contain strings, which can be different lengths (and thus different sizes in memory). How is this possible?</p>", "options": {}, "feedback_correct": "", "source": null, "subtitle_files": [], "name": "text", "feedback_wrong": "", "subtitles": {}, "tests_archive": null, "video": null}}