{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>Based on the previous example, it should be clear that inserting at the end of an <b><span class=\"wysiwyg-color-green\">Array List</span></b> for which the backing array is not full, assuming I know how many elements are currently in it, is constant time. However, what if I want to insert at the beginning of an <b><span class=\"wysiwyg-color-green\">Array List</span></b>? Unfortunately, because of the rigid structure of an array (which was vital to give us random access), I need to move a potentially large number of elements out of the way to make room for the element I want to insert. Below is an example of inserting d to the beginning of an <b><span class=\"wysiwyg-color-green\">Array List</span></b>\u00a0with 3 elements previously in it:</p><p><img src=\"https://ucarecdn.com/a9052e09-aa77-4e8d-bd07-da45ec36a6c8/\" alt=\"\"></p><p>As can be seen, even though the best-case time complexity for insertion into an array is O(1) (which we saw in the previous step), the worst-case time complexity for insertion into an <b><span class=\"wysiwyg-color-green\">Array List</span></b> is <b>O(</b><i><b>n</b></i><b>)</b> because we could potentially have to move all <i>\ufeffn</i>\u00a0element in the array (or as in the case of the previous step, we may have to allocate an entirely new array and copy all <i>n</i>\u00a0elements into this new array).</p><p></p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "110715", "time": "2016-09-14T00:07:55.594742"}