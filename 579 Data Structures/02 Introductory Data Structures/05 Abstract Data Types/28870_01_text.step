{"id": "110667", "block": {"name": "text", "tests_archive": null, "animation": null, "feedback_wrong": "", "subtitle_files": [], "video": null, "options": {}, "text": "<p><span>As programmers, we are often given a task in non-technical terms, and it is up to us to figure out how to actually implement the higher-level idea. How do we choose what tools to use to perform this task? Typically, the job at hand has certain requirements, so we scour the documentation of our favorite language (or alternatively just search on Google and pick the first StackOverflow result, who are we kidding) and pick something that has the functions that satisfy our job's requirements.</span></p><p><span>For example, say I want to store the grades of numerous students in a class in a way that I can query the data structure with a student's name and have it return the student's grade to me. Clearly, some type of a \"map\" data structure, which maps \"keys\" (student names) to \"values\" (grades), would do the trick. If I'm not too worried about performance, I don't necessarily care about\u00a0</span><i>how</i><span> the data structure executes these tasks: I just care that it gets the job done.</span><br></p><p>What I am describing, a mathematical model for data types where the data type is defined by its\u00a0<i>behavior</i> from the point of view of a\u00a0<i>user</i> of the data (i.e., by what functions I as the user need it to have) is an\u00a0<b><span class=\"wysiwyg-color-green\">Abstract Data Type</span></b> <b><span class=\"wysiwyg-color-green\">(ADT)</span></b>.</p>", "source": null, "subtitles": {}, "feedback_correct": ""}, "time": "2016-09-12T22:26:53.252478"}