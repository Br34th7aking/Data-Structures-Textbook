{"id": "110660", "block": {"name": "text", "feedback_correct": "", "animation": null, "subtitle_files": [], "video": null, "feedback_wrong": "", "options": {}, "source": null, "text": "<p>The\u00a0<b>heap</b>\u00a0is a tree that satisfies the <b><i></i></b><i><b>Heap Property</b></i><b><i></i><i></i></b>: For all nodes <i>A</i> and\u00a0<i>B</i>\ufeff, if node\u00a0<i>A</i> is the parent of node\u00a0<i>B</i>,<i></i> then node <i>A</i>\u00a0has\u00a0<i>higher priority</i>\u00a0(or equal priority) than node\u00a0<i>B</i>. In this text, we will only discuss\u00a0<b>binary heaps</b> (i.e, <b></b>heaps <b></b>that are <b></b>binary trees<b></b>), but this binary tree constraint is not required of <b></b>heaps<b>\u00a0</b>in general.\u00a0The\u00a0<b>binary heap</b>, has three constraints (two of which should hopefully be obvious):</p><p></p><ul><li><b><i>Binary Tree Property</i></b><i></i>: All nodes in the tree must have either 0, 1, or 2 children</li><li><i></i><b><i>Heap Property</i></b><i></i> (explained above)<b><i><br></i></b></li><li><b><i>Shape Property</i>:</b> A heap is a <b><i>complete</i></b>\u00a0tree<b></b>. In other words, all levels of the tree, except possibly the bottom one, are fully filled, and, if the last level of the tree is not complete, the nodes of that level are filled from left to right</li></ul><p>Below is an example of a\u00a0<b>heap</b> (higher priority is given to smaller elements):<br></p><p><img alt=\"\" src=\"https://ucarecdn.com/245aca28-07a3-4e3d-b0b3-ab7765daa5fb/\"></p><p>We will further clarify the notion of \"priority\" in a\u00a0<b>heap</b> in the next step.</p>", "subtitles": {}, "tests_archive": null}, "time": "2016-09-15T14:59:56.648324"}