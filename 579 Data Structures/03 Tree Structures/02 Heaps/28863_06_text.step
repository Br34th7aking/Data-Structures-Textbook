{"id": "117411", "block": {"subtitles": {}, "source": null, "video": null, "feedback_wrong": "", "options": {}, "animation": null, "text": "<p>Given the structure of a heap (specifically, given the\u00a0<i>Heap Property</i>), we are guaranteed that any given element has a higher priority than all of its children. As an extension, it should hopefully be clear that any given element must also have a higher priority than all of its\u00a0<i>descendants</i>, not just its direct children. Thus, it should be intuitive that the root, which is the ancestor of all other elements in the tree (i.e., all other elements of the tree are descendants of the root) must be the highest-priority element in the heap.</p><p>Thus, the \"algorithm\" to peek at the highest-priority element in a heap is very trivial (so trivial, that I won't even consider it an algorithm):</p><p></p><pre><b><code class=\"cpp\">peek():</code></b><code class=\"cpp\">    return the root element</code></pre><p></p><p>Since we can assume that our implementation of a heap will have direct access to the root element, the <b>peek</b> operation is\u00a0<b>O(1)</b> in the worst case.</p>", "feedback_correct": "", "tests_archive": null, "subtitle_files": [], "name": "text"}, "time": "2016-09-03T01:08:08.283594"}