{"id": "110145", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>As we concluded on the last step, the final equation is:\u00a0$  D(n)=2(n+1)\\sum_{i=1}^{n}{\\frac{1}{i}} - 3n  $\u00a0</p><p>We can approximate\u00a0$ D(n) $:\u00a0$ \\sum_{i=1}^{n}{\\frac{1}{i}} \\approx \\int_{1}^{n}{\\frac{1}{x}}dx = \\ln(n) - \\ln(1) = \\ln(n)$\u00a0<br></p><p>Therefore, the average-case number of comparisons for a successful \"find\" operation is approximately $ 2\\frac{n+1}{n}\\ln(n) - 3 \\approx 1.386 \\log_2(n) $\u00a0for large values of\u00a0<i>n</i>.</p><p>Thus, since 1.386 is just a constant, we have formally proven that, in the average-case, given those two assumptions we made initially, a successful \"find\" operation in a <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> is indeed <b>O(log <i>n</i>)</b>.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-07T23:36:08.797680"}