{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>Below is a more complex example in which we insert 20 into the following\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b>:</p><p><span class=\"image-wrapper\"><img alt=\"\" src=\"https://ucarecdn.com/e2a6c427-9bbe-4b6b-a17a-77f1d15d06da/\"></span></p><p>Following the traditional\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> insertion algorithm, we would get the following tree (note that we have updated balance factors as well):</p><p><span class=\"image-wrapper\"><img title=\"Image: https://ucarecdn.com/5469a2f7-1e9d-4d31-98bf-6e38961991d2/\" alt=\"\" src=\"https://ucarecdn.com/5469a2f7-1e9d-4d31-98bf-6e38961991d2/\"></span></p><p>As you can see, the root node is now out of balance, and as a result, we need to fix its balance using an AVL rotation. Specifically, we need to rotate left at the root, meaning 10 will become the new root, 7 will become the right child of 5, and 5 will become the left child of 10:</p><p><span class=\"image-wrapper\"><img src=\"https://ucarecdn.com/9a7ad844-bf9c-4f45-859e-aee8d2edadad/\"></span></p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "123396", "time": "2016-09-14T00:10:19.104934"}