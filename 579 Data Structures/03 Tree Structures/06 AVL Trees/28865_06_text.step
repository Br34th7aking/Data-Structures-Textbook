{"block": {"tests_archive": null, "feedback_correct": "", "subtitle_files": [], "text": "\n\n<p>The\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> insertion and removal algorithms rely heavily on the\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> insertion and removal algorithms, so if you're unsure about either of them, be sure to\u00a0reread the <b><span class=\"wysiwyg-color-green\">BST</span></b>\u00a0section of this text to refresh your memory.</p><p>To insert an element into an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b>, first perform the regular\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> insertion algorithm. Then, starting at the newly-inserted node, traverse up the tree and update the balance factor of each of the new node's ancestors. For any nodes that are now \"out of balance\" (i.e., their balance factor is now less than -1 or greater than 1), perform AVL rotations to fix the balance.</p><p>Below is an example of an insertion into an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b>, where the element inserted is A:</p><p><span class=\"image-wrapper\"><img title=\"Image: https://ucarecdn.com/d7d67eaa-2537-4c4f-a57d-5729f8026575/\" src=\"https://ucarecdn.com/d7d67eaa-2537-4c4f-a57d-5729f8026575/\" alt=\"\"></span></p><p>To remove an element from an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b>, first perform the regular\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> removal algorithm. Then, starting at the parent of whatever node was actually removed from the tree, traverse up the tree and update each node's balance factor. For any nodes that are now \"out of balance\", perform AVLs rotation to fix the balance.</p><p><span class=\"image-wrapper\"><img title=\"Image: https://ucarecdn.com/2ad0bf54-72ce-417d-99eb-3e7a881fb20f/\" src=\"https://ucarecdn.com/2ad0bf54-72ce-417d-99eb-3e7a881fb20f/\" alt=\"\"></span></p><p>As can be seen, the <b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b>\u00a0rebalances itself after an insertion or a removal by simply traversing back up the tree and performing AVL rotations along the way to fix any cases where a node has an invalid balance factor. Because of this phenomenon where the tree balances itself without any user guidance, we call\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Trees</span></b> \"self-balancing\".</p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b> Can you think of an example where a single AVL rotation will fail to fix the balance of the tree?<br></p>\n\n", "feedback_wrong": "", "options": {}, "subtitles": {}, "name": "text", "source": null, "video": null, "animation": null}, "time": "2016-09-11T01:08:09.879574", "id": "120395"}