{"id": "120393", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>It should be intuitive that the\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> restriction on balance factors keeps the tree\u00a0<i>pretty</i> balanced, but as wary Computer Scientists, we have been trained to trust nobody. Can we formally prove that the height of an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> is O(log\u00a0<i>n</i>) in the worst-case? Luckily for us, this proof is <i>far</i> simpler than the\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> average-case proof we covered earlier in this text.</p><p>First, let us define\u00a0$ N_h $\u00a0as the minimum number of nodes that can form an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> of height\u00a0<i>h</i>. It turns out that we can come up with a somewhat intuitive recursive definition for\u00a0$ N_h $. Specifically, because an <b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> with\u00a0$ N_h $\u00a0nodes must have a height of\u00a0<i>h</i> (by definition), the root must have a child that has height\u00a0<i>h</i>-1. To minimize the total number of nodes in the tree, this subtree would have\u00a0$ N_{h-1} $\u00a0nodes.</p><p>By the property of an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b>, because the root can only have a balance factor of -1, 0, or 1, the other child has a minimum height of\u00a0<i>h</i>-2. Thus, by constructing an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> where the root's left subtree contains\u00a0$ N_{h-1} $\u00a0nodes and the root's right subtree contains\u00a0$ N_{h-2} $\u00a0trees, we will have constructed the\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> of height\u00a0<i>h</i> with the least number of nodes possible.\u00a0In other words, we have defined a recurrence relation:\u00a0$ N_h = N_{h-1} + N_{h-2} + 1 $\u00a0</p><p>Now, we can define base cases. When we defined\u00a0<i>height</i> in the\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> section of this text, we defined the height of an empty tree as -1, the height of a one-node tree as 0, etc. For the purposes of this recurrence, however, let's temporarily change our definition such that an empty tree has a height of 0, a one-node tree has a height of 1, etc. This change in numbering only adds 1 to the height of any given tree (which does not affect Big-O time complexity), but it simplifies the math in our proof. Using this numbering, we can define two trivial base cases.\u00a0$ N_1 = 1 $\u00a0because a tree of height\u00a0<i>h</i> = 1 is by definition a one-node tree.\u00a0$ N_2 = 2 $\u00a0because the smallest number of nodes to have a tree with a height of 2 is 2: a root and a single child.</p><p>Now that we have defined a recurrence relation\u00a0$ (N_h = N_{h-1} + N_{h-2} + 1) $\u00a0and two base cases\u00a0$ (N_1 = 1 $\u00a0and\u00a0$ N_2 = 2) $, we can reduce:</p><p></p><ul><li>$ N_h = N_{h-1} + N_{h-2} + 1 $\u00a0<br></li><li>$ N_{h-1} = N_{h-2} + N_{h-3} + 1 $\u00a0<br></li><li>$ N_h = (N_{h-2} + N_{h-3} + 1) + N_{h-2} + 1 $\u00a0<br></li><li>$ N_h \\gt  2N_{h-2} $\u00a0<br></li><li>$ N_h \\gt  2^{\\frac{h}{2}} $\u00a0<br></li><li>$ \\log N_h \\gt  \\log 2^{\\frac{h}{2}}$\u00a0</li><li>$ 2 \\log N_h \\gt  h $\u00a0<br></li><li>$ h = O(\\log N_h) $\u00a0<br></li></ul><p>We have now formally proven that an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> containing\u00a0<i>n</i> nodes has a height that is indeed O(log\u00a0<i>n</i>), even in the worst-case. As a result, we have formally proven that an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> has a\u00a0<b>worst-case</b> time complexity of\u00a0<b>O(log\u00a0<i>n</i>)</b>\ufeff.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-02T19:35:09.621356"}