{"id": "120397", "block": {"subtitles": {}, "source": null, "video": null, "feedback_wrong": "", "options": {}, "animation": null, "text": "<p>We have now discussed the <b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b>, which is\u00a0the first ever\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> structure able to rebalance itself automatically in order to guarantee a <b>worst-case</b> time complexity of <b>O(log\u00a0</b><i><b>n</b></i><b>)</b> for finding, inserting, and removing elements. Given that a perfectly balanced\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> has a worst-case O(log\u00a0<i>n</i>) time complexity, you might be thinking \"Wow, our new data structure is pretty darn fast! We can just call it a day and move on with our lives.\" However, it is known fact that a Computer Scientist's hunger for speed is insatiable, and in our hearts, we want to go\u00a0<i>even faster</i>!</p><p>Because of the realization above about perfectly balanced trees, it is clear that, given that we are dealing with\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Trees</span></b>, we cannot improve the worst-case\u00a0<i>time complexity</i> further than O(log\u00a0<i>n</i>). However, note that, in the worst case, an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> must perform roughly 2*log(<i>n</i>) operations when inserting or removing an element: it must perform roughly log(<i>n</i>) operations to traverse <i>down</i> the tree, and it must then perform roughly log(<i>n</i>) operations to traverse back\u00a0<i>up</i> the tree in order to restructure the tree to maintain balance. In the next section, we will discuss the\u00a0<b><span class=\"wysiwyg-color-red\">Red-Black Tree</span></b>, which guarantees the same O(log\u00a0<i>n</i>) worst-case time complexity, but which only needs to perform a\u00a0<i>single</i> pass through the tree (as opposed to the two passes of an <b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b>), resulting in an even\u00a0<i>faster</i> in-practice run-time for insertion and removal.</p>", "feedback_correct": "", "tests_archive": null, "subtitle_files": [], "name": "text"}, "time": "2016-09-03T01:09:02.035984"}