{"block": {"tests_archive": null, "feedback_correct": "", "subtitle_files": [], "text": "<p>With rooted binary trees (and rooted trees in general), we typically only maintain a pointer to the root because all other nodes in the tree can be accessed via some traversal starting at the root. It can be useful to keep pointers to the leaves of the tree as well, but these pointers can be harder to maintain because the leaves of a rooted tree change rapidly as we insert elements into the tree.</p><p>Because we typically only keep track of the root node, to traverse all of the nodes in a rooted binary tree, there are four traversal algorithms: <b><span class=\"wysiwyg-color-green\">pre-order</span></b>, <b><span class=\"wysiwyg-color-blue\">in-order</span></b>,\u00a0<b><span class=\"wysiwyg-color-purple\">post-order</span></b>, and <b><span class=\"wysiwyg-color-red\">level-order</span></b>.\u00a0In all four, the verb \"visit\" simply denotes whatever action we perform when we are at a given node\u00a0<i>u</i> (whether it be printing\u00a0<i>u</i>'s label, or modifying\u00a0<i>u</i> in some way, or incrementing some global count, etc.).</p><p><img src=\"https://ucarecdn.com/b54805ae-1001-4680-8da9-86ad85375517/\" alt=\"\"></p><p>In a\u00a0<b><span class=\"wysiwyg-color-green\">pre-order</span></b> traversal, we first <span class=\"wysiwyg-color-blue\">visit the current node</span>, then we <span class=\"wysiwyg-color-green\">recurse on the left child</span> (if one exists), and then we <span class=\"wysiwyg-color-purple\">recurse on the right child</span> (if one exists). Put simply, <b><span class=\"wysiwyg-color-blue\">V</span><span class=\"wysiwyg-color-green\">L</span><span class=\"wysiwyg-color-purple\">R</span></b> (<b><span class=\"wysiwyg-color-blue\">V</span></b><span class=\"wysiwyg-color-blue\">isit</span>-<b><span class=\"wysiwyg-color-green\">L</span></b><span class=\"wysiwyg-color-green\">eft</span>-<b><span class=\"wysiwyg-color-purple\">R</span></b><span class=\"wysiwyg-color-purple\">ight</span>). In the example above, a <b><span class=\"wysiwyg-color-green\">pre-order</span></b> traversal \n\nstarting at the root\n\nwould visit the nodes in the following order: 1 2 3 4 5</p><p>In an\u00a0<b><span class=\"wysiwyg-color-blue\">in-order</span></b> traversal, we first <span class=\"wysiwyg-color-green\">recurse on the left child</span> (if one exists), then we <span class=\"wysiwyg-color-blue\">visit the current node</span>, and then we recurse on the right child (if one exists). Put simply, <b><span class=\"wysiwyg-color-green\">L</span><span class=\"wysiwyg-color-blue\">V</span><span class=\"wysiwyg-color-purple\">R</span></b> (<b><span class=\"wysiwyg-color-green\">L</span></b><span class=\"wysiwyg-color-green\">eft</span>-<b><span class=\"wysiwyg-color-blue\">V</span></b><span class=\"wysiwyg-color-blue\">isit</span>-<b><span class=\"wysiwyg-color-purple\">R</span></b><span class=\"wysiwyg-color-purple\">ight</span>).\n\nIn the example above, an <b><span class=\"wysiwyg-color-blue\">in-order</span></b> traversal\n\nstarting at the root\n\n would visit the nodes in the following order: 2 1 4 3 5</p><p>In a\u00a0<b><span class=\"wysiwyg-color-purple\">post-order</span></b> traversal, we first <span class=\"wysiwyg-color-green\">recurse on the left child</span> (if one exists), then we <span class=\"wysiwyg-color-purple\">recurse on the right child</span> (if one exists), and then we <span class=\"wysiwyg-color-blue\">visit the current node</span>.\n\nIn the example above, a <b><span class=\"wysiwyg-color-purple\">post-order</span></b> traversal \n\nstarting at the root\n\nwould visit the nodes in the following order: 2 4 5 3 1</p><p>In a\u00a0<b><span class=\"wysiwyg-color-red\">level-order</span></b> traversal, we visit nodes level-by-level (where the root is the \"first level\", its children are the \"second level\", etc.), and on a given level, we visit nodes left-to-right. In the example above, a\u00a0<b><span class=\"wysiwyg-color-red\">\ufefflevel-order</span></b><span class=\"wysiwyg-color-red\"></span> traversal starting at the root would visit the nodes in the following order: 1 2 3 4 5</p>", "feedback_wrong": "", "options": {}, "subtitles": {}, "name": "text", "source": null, "video": null, "animation": null}, "time": "2016-09-11T01:07:10.194787", "id": "110129"}