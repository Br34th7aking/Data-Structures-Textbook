{"id": "110093", "time": "2016-09-01T21:48:22.013182", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>In the previous chapter, one of the introductory data structures we covered was the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, which, as you recall, was a set of <b>nodes</b> that were strung together via links (<b>edges</b>). We had direct access to the \"head\" node (and the \"tail\" node as well, if we so chose), but in order to access nodes in the middle of the list, we had to start at the \"head\" (or \"tail\") node and traverse edges until we reached the node of interest.</p><p>The general structure of \"a set of <b>nodes</b> and\u00a0<b>edges</b>\" is called a\u00a0<b>Graph</b>, with a\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b> being an extremely simple example of a\u00a0<b>Graph</b>. Specifically, we can think of a\u00a0<b>Singly Linked List</b> as a\u00a0<b>Graph</b> in which every node (except the \"tail\" node) has a single \"forward\" edge, and we can think of a\u00a0<b>Doubly Linked List</b> as a\u00a0<b>Graph</b> in which every node (except the \"head\" and \"tail\" nodes) has exactly two edges: one \"forward\" edge and one \"back\" edge.</p><p>The <b><span class=\"wysiwyg-color-blue\">Linked List</span></b> was a very simple <b>Graph</b> structure, so in this chapter, we'll introduce a slightly more complex <b>Graph</b> structure: the <b>Tree</b> structure.</p>", "feedback_correct": "", "video": null, "animation": null}}