{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "As we have now seen,  <b><span class=\"wysiwyg-color-green\">B-Trees</span></b> are an exceptionally optimized way to store and read data on the Hard Disk. Consequently, when saving a large data set on the Hard Disk, it is only natural to want to use the  <b><span class=\"wysiwyg-color-green\">B-Tree </span></b><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">structure to take advantage of all of its perks (i.e., it keeps our data sorted and lets us query it fairly fast in practice). <br><br>A common format for a large data set to be stored in is in a relational database. If we were to want to store a database using the <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">B-Tree</span></b></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\"> structure, then we would store each data\u00a0<i>entry</i> (commonly stored as a row in a database, with multiple data fields stored as columns) as a single key. </span></span>However, there are a couple of aspects to database creation that doesn't make the </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">B-Tree</span></b></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\"> structure ideal:<br><br></span></span><ol><li><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">More often than not, database entries are actually really big (i.e., each row can have tens of columns). Also, we often only want to query single database entries at a time. Consequently, worst-case scenario in a  <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">B-Tree,</span></b></span><b> </b></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">if we just wanted to find one database entry, we would need to traverse O($ log_{b} n $<span></span></span></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">) database entries to reach it. Since our databases can be\u00a0<i>millions</i> of large rows, traversing O($ log_{b} n\u00a0\u00a0\u00a0\u00a0 $) entries can be a <i>huge</i> waste of time to only look up\u00a0<i>one</i> database entry!</span></span></span></li><li><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">Another common thing to do with databases is to query all the entries at once (i.e., to figure out what is stored in this particular database). If we wanted to query all the keys in a <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">B-Tree</span></b></span>, we would have to traverse <i>up</i> and <i>down all</i> the nodes in all levels of the tree, thereby having to figure out exactly <i>where</i> the pointer to the node is located in memory (L1 cache, Main Memory, Hard Disk...)</span></span> when we go both\u00a0<i>down</i> and\u00a0<i>up</i> the tree. Having to worst-case figure out where a node is located <i>twice</i> thus adds a large time overhead for an operation that definitely shouldn't need it. <br></li></ol>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "123046", "time": "2016-09-14T00:10:48.583933"}