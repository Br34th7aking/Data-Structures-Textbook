{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>How would we go about finding a key in a <b><span class=\"wysiwyg-color-green\">B-Tree</span></b>? Finding a key is actually very simple and similar to performing a Binary type search for each key in a given node. Below is pseudocode describing the find algorithm, and we would call this recursive function by passing in the root of the <b><span class=\"wysiwyg-color-green\">B-Tree</span></b>:</p><p></p><pre><code class=\"cpp\"><b>find(key, node): // return true upon success\n</b>\n    for element in node:\n        // we have found key \n        if key == element:\n            return true\n\n        // key is too big, so move on to next value in root to compare key against\n        else if key &gt; element and element is not last element in node:\n            continue to next element\n\n        // key is too small, so search in the left subtree\n        else if key &lt; element:\n            return find(key, value.leftChild)  // recurse left\n\n        // key is larger than all elements in node, so search in the right subtree\n        else:\n            return find(key, value.rightChild) // recurse right\n\n    // looks like all the traversing is done and key wasn't found\n    return false</code></pre><p></p><p>What is the worst-case time complexity of the find operation <i>with respect to memory acceses</i>? As you probably have guessed by now, it is the same as the insert operation! Thus, the worst-case time to find an element is equal to\u2003O($b* log_{b}n $). <br></p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "122792", "time": "2016-09-14T00:10:42.281306"}