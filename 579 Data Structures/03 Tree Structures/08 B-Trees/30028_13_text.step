{"id": "122788", "time": "2016-09-09T16:58:42.822082", "block": {"subtitle_files": [], "text": "<p>\u00a0As <b><span class=\"wysiwyg-color-green\">B-trees</span></b> grow large we start to expect that the CPU will need to access the Hard Disk (the slowest section of memory in our computer) once in a while. Since it is known that the Hard Disk is designed in blocks (to help the CPU traverse memory more efficiently) a single node in a <b><span class=\"wysiwyg-color-green\">B-tree</span></b> is specifically designed to fit in one \"Hard Disk block\" to ensure that the CPU copies over all the data from a single node in order to ensure the CPU doesn't have to go <i>all </i>the way back to Hard Disk. <br></p><p>Moreover, since  <b><span class=\"wysiwyg-color-green\">B-trees</span></b> now have such a good system in place to efficiently read stored data from the Hard Disk, it is common for   <b><span class=\"wysiwyg-color-green\">B-trees</span></b> to explicitly store its data in the Hard Disk (so then we don't waste the rest of the memory hierarchy). <br></p><p>Databases and file systems are common for storing large amounts of relational data in the Hard Disk. Consequently, the optimizations done behind <b><span class=\"wysiwyg-color-green\">B-trees</span></b> are extremely relevant for these general systems as well. Therefore, in the next lesson, we will look at a variant of the  <b><span class=\"wysiwyg-color-green\">B-tree</span></b> called a  <b><span class=\"wysiwyg-color-purple\">B+-tree\u00a0</span></b><span class=\"wysiwyg-color-black\">\ufeffthat organizes data slightly differently to help better implement systems such as databases.\u00a0</span> <br></p>", "feedback_correct": "", "tests_archive": null, "subtitles": {}, "source": null, "name": "text", "video": null, "feedback_wrong": "", "options": {}, "animation": null}}