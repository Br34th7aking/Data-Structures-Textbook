{"id": "120159", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Below is formal pseudocode for each of the three\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> operations: find, insert, and remove. Note that we did not explicitly discuss\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> removal, but just like with\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> insertion, the first step is to simply perform\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> removal, and if we have broken the\u00a0<b><i><span class=\"wysiwyg-color-red\">Heap Property</span></i></b><i></i>, fix it with AVL rotations (to either bubble up or trickle down the node in violation).</p><p>If you're unsure of any of the\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> algorithms referenced in any of the following pseudocode, reread the\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> section of this text to refresh your memory.</p><p></p><pre><code class=\"cpp\"><b>find(key):</b>\n    perform BST find based on key</code></pre><p></p><p></p><pre><code class=\"cpp\"><b>insert(key, priority):\n</b>    // Step 1: BST Insertion Algorithm\n    node = (key, priority)\n    perform BST insertion based on key\n\n    // Step 2: Fix Heap Property via Bubble Up\n    while node is not root and node.priority &gt; node.parent.priority:\n        if node is left child of node.parent:\n            perform right AVL rotation on node.parent\n        else:\n            perform left AVL rotation on node.parent</code></pre><p></p><p></p><pre><code class=\"cpp\"><b>remove(key):\n</b>    // Step 1: BST Removal Algorithm\n    perform BST removal based on key\n    node = node that was moved as a result of BST removal (i.e., the successor of key)\n    if Heap Property is not violated:\n        return\n\n    // Step 2: Fix Heap Property if necessary\n    // Bubble Up if necessary\n    while node is not root and node.priority &gt; node.parent.priority:\n        if node is left child of node.parent:\n            perform right AVL rotation on node.parent\n        else:\n            perform left AVL rotation on node.parent\n\n    // Otherwise, Trickle Down if necessary\n    while node is not a leaf and node.priority &lt; either of its children's priorities:\n        if node.leftChild.priority &lt; node.rightChild.priority:\n            perform left AVL rotation on node\n        else:\n            perform right AVL rotation on node</code></pre>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-07T23:36:17.814529"}