{"id": "122397", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>In an introductory programming course, or as a beginner programmer, you are likely to write code that is quite simple and that can be written cleanly in a single file. For example, say we have a file called <span class=\"wysiwyg-font-tt\">HelloWorld.cpp</span> that consists of the following:</p><p></p><pre><code class=\"cpp\">#include &lt;iostream&gt;\nint main() {<br>\u00a0 \u00a0 std::cout &lt;&lt; \"Hello, world!\" &lt;&lt; std::endl;<br>}</code></pre><p></p><p>We could compile our code using <span class=\"wysiwyg-font-tt\"><b>g++</b></span>, a C++ compiler, and execute it, all\u00a0from the command line:</p><p></p><pre><code class=\"bash\">$ g++ HelloWorld.cpp # compile our program\n$ ./a.out            # run our program (\"./a.out\" means \"in this directory, a file called \"a.out\")\nHello, world!        # our code's output</code></pre><p></p><p>The default filename for the executable file was <span class=\"wysiwyg-font-tt\">a.out</span>, which isn't very descriptive. To specify a filename, we can use the\u00a0<span class=\"wysiwyg-font-tt\"><b>-o</b></span>\u00a0flag:</p><p></p><pre><code class=\"bash\">$ g++ -o hello_world HelloWorld.cpp # compile our program and name the output hello_world\n$ ./hello_world                     # run our program (hello_world)\nHello, world!                       # our code's output</code></pre>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-07T23:33:19.223401"}