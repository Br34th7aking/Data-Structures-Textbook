{"id": "112093", "time": "2016-09-09T16:54:14.114073", "block": {"subtitle_files": [], "text": "<p>Aside from addition, there are many <b>bitwise operations</b> one can do on numbers. These bitwise operations treat the numbers as their binary and perform the relevant operation bit-by-bit. The following bitwise operations will be explained using single-bit examples, but when performed on numbers with more than one bit, you simply go through the numbers' bits column-by-column, performing the single-bit examples independently on each column independently. It will help to follow the logic of the operations by thinking of the bits in terms of <span class=\"wysiwyg-font-tt\">1 = TRUE</span> and <span class=\"wysiwyg-font-tt\">0 = FALSE</span>.</p><p></p><span class=\"wysiwyg-font-tt\"><ul><li><b>Bitwise AND (&amp;):</b> 1 &amp; 1 = 1 \u00a0 \u00a0 \u00a0 \u00a00 &amp; 1 = 0 \u00a0 \u00a0 \u00a0 \u00a01 &amp; 0 = 0 \u00a0 \u00a0 \u00a0 \u00a00 &amp; 0 = 0<br></li><li><b>Bitwise OR \u00a0(|):</b> 1 | 1 = 1 \u00a0 \u00a0 \u00a0 \u00a00 | 1 = 1 \u00a0 \u00a0 \u00a0 \u00a01 | 0 = 1 \u00a0 \u00a0 \u00a0 \u00a00 | 0 = 0<br></li><li><b>Bitwise XOR (^):</b> 1 ^ 1 = 0 \u00a0 \u00a0 \u00a0 \u00a00 ^ 1 = 1 \u00a0 \u00a0 \u00a0 \u00a01 ^ 0 = 1 \u00a0 \u00a0 \u00a0 \u00a00 ^ 0 = 0<br></li><li><b>Bitwise NOT (~):\u00a0</b> \u00a0 ~1 = 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ~0 = 1</li></ul></span><p><b></b></p><p>In addition to these single-bit operations, there are bit-shifting operations that can be done on binary numbers. The <b>left bit-shift operator (&lt;&lt;)</b> shifts each bit of the binary number left by the specified number of columns, and the <b>right bit-shift operator (&gt;&gt;)</b> shifts each bit of the binary number right by the specified number of columns. For example, below we shift two 8-bit numbers:</p><p></p><p></p><span class=\"wysiwyg-font-tt\"><ul><li>0000<b><span class=\"wysiwyg-color-green\">1</span></b>000 &lt;&lt; 2 = 00<b><span class=\"wysiwyg-color-green\">1</span></b>000<b><span class=\"wysiwyg-color-red\">00</span></b><br></li><li>0000<b><span class=\"wysiwyg-color-green\">1</span></b>000 &gt;&gt; 2 = <b><span class=\"wysiwyg-color-red\">00</span></b>0000<b><span class=\"wysiwyg-color-green\">1</span></b>0</li></ul></span><p></p><p>When bit-shifting, one should imagine the 1s as \"information\" and the 0s as \"empty space\". If a 1 gets \"pushed over the edge\", it is simply lost (or \"cleared\"). Also, as can be seen in the example above, when we shift left, the the columns on the right side of the number are filled with \"empty space\" (0s, shown in red), and when we shift right, the columns on the left side of the number are also filled with \"empty space\" (0s, shown in red).<br></p>", "feedback_correct": "", "tests_archive": null, "subtitles": {}, "source": null, "name": "text", "video": null, "feedback_wrong": "", "options": {}, "animation": null}}