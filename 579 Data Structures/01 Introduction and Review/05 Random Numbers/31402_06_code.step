{"block": {"video": null, "tests_archive": "/api/step-sources/122168/tests", "feedback_correct": "", "animation": null, "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b> Using the C++ random number generator <span class=\"wysiwyg-font-tt\">rand()</span>, implement a <b>fair </b><i><b>k</b></i><b>-sided die</b>\u00a0that outputs one of the numbers from <b>1 through </b><i><b>k</b></i><b>, inclusive,</b> with equal probability.\u00a0<b>Do\u00a0<i>not</i> seed the random number generator within the function you will be implementing!</b> We will seed the random number generator for you.<br></p><p><b><span class=\"wysiwyg-color-red\">Hint:</span></b> If you need help using <span class=\"wysiwyg-font-tt\">rand()</span>, either refer to the <a href=\"http://www.cplusplus.com/reference/cstdlib/rand/\" rel=\"nofollow\">C++ Reference</a>, or look at the examples on the previous step.<br></p><p><b><span class=\"wysiwyg-color-red\">Note:</span></b> In the Sample Input, the 1 on the top line represents how many times we will run your code. It is for grading purposes, so please ignore it. The bottom line is\u00a0<i>k</i>.<br></p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "code", "source": {"execution_memory_limit": 256, "is_memory_limit_scaled": true, "execution_time_limit": 5, "samples_count": 1, "is_time_limit_scaled": true, "manual_time_limits": [], "manual_memory_limits": [], "test_archive": [], "templates_data": "::c++11\n::header\n#include <stdlib.h>     // srand, rand\n#include <time.h>       // time\n#include <iostream>     // cout, cin\nusing namespace std;\n\n::code\nunsigned int rollDie(int k) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    srand(time(NULL));\n    int n;\n    cin >> n;\n    int k;\n    cin >> k;\n    for(int i = 0; i < n; ++i) {\n        cout << rollDie(k) << endl;\n    }\n    return 0;\n}", "code": "import random\n\ndef generate():\n    return [\"1\\n6\",\"100000\\n\" + str(random.randrange(10,21))]\n\n\ndef solve(dataset):\n    n,k = dataset.strip().splitlines()\n    n = int(n)\n    k = int(k)\n    if n == 1:\n        return str(k)\n    else:\n        return '\\n'.join([str(random.randrange(1,k+1)) for _ in range(n)])\n\n\ndef check(reply, clue):\n    clue = [int(i) for i in clue.strip().splitlines()]\n    n = len(clue)\n    k = max(clue)\n    trueProb = 1.0/float(k)\n    if n == 1:\n        side = int(reply.strip())\n        if side == 0:\n            return 0,\"You returned a value of 0. Remember, you should return a number from 1 through k, inclusive\"\n        elif side >= 1 and side <= k:\n            return 1\n        else:\n            return 0,\"You returned an invalid value of \" + str(side) + \" when k = \" + str(k)\n    count = {}\n    for i in range(1,k+1):\n        count[str(i)] = 0\n    for line in reply.strip().splitlines():\n        line = line.strip()\n        if line not in count:\n            if line == \"0\":\n                return 0,\"You returned a value of 0. Remember, you should return a number from 1 through k, inclusive\"\n            else:\n                return 0,\"You returned an invalid value of \" + line + \" when k = \" + str(k)\n        count[line] += 1\n    for side in count:\n        prob = float(count[side])/n\n        if abs(prob - trueProb) > 0.005: # give 0.005 leeway\n            return 0, \"You returned \" + side + \" \" + str(prob*100) + \"% of the time instead of \" + str(trueProb*100) +\"% of the time\"\n    return 1"}, "options": {"code_templates": {"c++11": "unsigned int rollDie(int k) {\n    /* YOUR CODE HERE */\n}"}, "execution_memory_limit": 256, "execution_time_limit": 5, "samples": [["1\n6", "6"]], "limits": {"c++11": {"memory": 256, "time": 5}}}}, "id": "122168", "time": "2016-09-14T00:07:18.165655"}