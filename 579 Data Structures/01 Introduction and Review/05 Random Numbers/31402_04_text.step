{"id": "122166", "block": {"name": "text", "feedback_correct": "", "animation": null, "subtitle_files": [], "video": null, "feedback_wrong": "", "options": {}, "source": null, "text": "<p>In most programming languages, the built-in random number generator will generate a single random integer at a time, where the random integer will typically range between 0 and some language-specific maximum value. In C++, the random number generator is the <span class=\"wysiwyg-font-tt\"><b>rand()</b></span> function, which generates a random integer between <b>0</b> and <span class=\"wysiwyg-font-tt\"><b>RAND_MAX</b></span>, inclusive (the exact value of <span class=\"wysiwyg-font-tt\">RAND_MAX</span> depends on the exact C++ Standard Template Library, or STL, that is on your system). Before we call <span class=\"wysiwyg-font-tt\">rand()</span>, however, we must first seed it by calling the <span class=\"wysiwyg-font-tt\"><b>srand()</b></span> function (which stands for <b>s</b>eed <b><span class=\"wysiwyg-font-tt\">rand</span></b>) and passing our seed integer as a parameter. It is common to use the current system time as a seed.</p><p></p><pre><code class=\"cpp\">srand(time(NULL));   // seed random number generator using system time\nint number = rand(); // generate random number from 0 through RAND_MAX</code></pre><p></p><p>What if we wanted more control over the range of numbers from which we sample? For example, what if we want to generate a random integer in the range from 0 through 99? It turns out that we can do this fairly trivially using the\u00a0<b>modulo</b> operator! Recall that the modulo operator (%) returns the remainder of a division operation. Specifically, if we call\u00a0<i>a</i> %\u00a0<i>b</i>, we are computing the remainder of\u00a0<i>a</i> divided by\u00a0<i>b</i>. If we wanted to generate a number from 0 through 99, we could do the following:</p><p></p><pre><code class=\"cpp\">int number = rand() % 100; // generate random number and map to range 0 through 99</code></pre><p></p><p>What about if we wanted to generate a random number from 1 to 100?</p><p></p><pre><code class=\"cpp\">int number = (rand() % 100) + 1 // generate random number, map to 0-99, then add 1 --&gt; 1-100</code></pre><p></p><p>What about if we had C++ vector called myVec, and we wanted to choose a random element from it?</p><p></p><pre><code class=\"cpp\">vector&lt;string&gt; myVec;\n// add stuff to myVec\nint index = rand() % myVec.size(); // randomly choose an index\nstring element = myVec[index];     // grab the element at the randomly-chosen index</code></pre><p></p><p>The possibilities are endless! All of the examples above were sampling from the\u00a0<b>Uniform Distribution</b> (i.e., every outcome was equally likely), but we can become even more clever and use statistics knowledge to sample from other distributions (e.g. Gaussian, Exponential, Poisson, etc.) by performing some combination of operations using techniques like the ones above. In short,\u00a0<i>any</i> random sampling from\u00a0<i>any</i> distribution can be broken down into sampling from a Uniform Distribution.</p>", "subtitles": {}, "tests_archive": null}, "time": "2016-09-15T14:57:12.700631"}