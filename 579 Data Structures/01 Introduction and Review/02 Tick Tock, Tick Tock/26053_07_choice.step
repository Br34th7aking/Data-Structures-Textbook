{"id": "111773", "time": "2016-09-09T16:53:17.460512", "block": {"subtitle_files": [], "text": "<p><b><span class=\"wysiwyg-color-purple\">EXERCISE BREAK:</span></b> What is the tightest upper-bound for the time complexity of the following segment of C++ code (in Big-O notation)?</p><p></p><pre><code class=\"cpp\">void tricky(int n) {\n    int operations = 0;\n    while(n &gt; 0) {\n        for(int i = 0; i &lt; n; i++) {\n            cout &lt;&lt; \"Operations: \" &lt;&lt; operations++ &lt;&lt; endl;\n        }\n        n /= 2;\n    }<br>}</code></pre><div><br></div><div><b><span class=\"wysiwyg-color-red\">HINT:</span></b> Does the sum representing the number of operations performed converge to some function of\u00a0<i>n</i>?</div>", "feedback_correct": "", "tests_archive": null, "subtitles": {}, "source": {"preserve_order": true, "sample_size": 5, "is_multiple_choice": false, "options": [{"is_correct": false, "feedback": "", "text": "O(1)"}, {"is_correct": false, "feedback": "", "text": "O(log <i>n</i>)"}, {"is_correct": true, "feedback": "", "text": "O(<i>n</i>)"}, {"is_correct": false, "feedback": "", "text": "O(<i>n</i> * log <i>n</i>)"}, {"is_correct": false, "feedback": "", "text": "O(<i>n</i>\u00b2)"}], "is_always_correct": false, "is_html_enabled": true}, "name": "choice", "video": null, "feedback_wrong": "", "options": {}, "animation": null}}