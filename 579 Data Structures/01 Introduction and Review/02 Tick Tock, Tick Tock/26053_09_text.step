{"block": {"feedback_wrong": "", "subtitles": {}, "animation": null, "name": "text", "text": "<p>A\u00a0<b>data structure</b>, as implied by the name, is a particular structured way of storing data in a computer so that it can be used efficiently. You should have already learned the fundamental data structures in a previous course, so in this course, we will focus on teaching you more advanced data structures. Specifically, we will cover what these data structures are, how they function (i.e., the algorithms that will be running behind-the-scenes for insertions, deletions, and look-ups), and when to appropriately use each one.</p><p>When dealing with data storage, in addition to worrying about time complexity, we will also be worrying about\u00a0<b>space complexity</b>, which measures\u00a0the amount of working storage needed for an input of size\u00a0<i>n</i>. Just like time complexity, space complexity is described using Big-O notation.</p><p>For example, say we have\u00a0<i>n</i> cities and we want to store information about the amount of gas and time needed to go from city\u00a0<i>i</i> to city <i>j</i> (which is not necessarily equivalent to the amount of gas and time needed to go from city\u00a0<i>j</i> to city\u00a0<i>i</i>). For a given city\u00a0<i>i</i>, for each of the other <i>n</i> cities, we need to represent 2 numbers: the amount of gas needed to go from city\u00a0<i>i</i> to each of the\u00a0<i>n</i> cities (including itself), and the amount of time needed to go from city\u00a0<i>i</i> to each of the\u00a0<i>n</i> cities (including itself). Therefore, we need to store\u00a0<i>n\u00a0</i>\u00d7\u00a0<i>n</i>\u00a0\u00d7 2 = 2<i>n</i>\u00b2 numbers. Therefore, the space complexity is O(<i>n</i>\ufeff\u00b2).</p>", "tests_archive": null, "source": null, "subtitle_files": [], "options": {}, "feedback_correct": "", "video": null}, "id": "95851", "time": "2016-09-06T23:40:14.921486"}