{"id": "95896", "block": {"name": "text", "tests_archive": null, "animation": null, "feedback_wrong": "", "subtitle_files": [], "video": null, "options": {}, "text": "<p>\n\nLastly, we will discuss <b>input</b>\u00a0and <b>output</b>\u00a0in C++, which is much simpler than in Java.<br></p><p><b>IO Keywords/Operators/Functions:</b> In C++, the standard output, standard input, and standard error streams are represented by the <span class=\"wysiwyg-font-tt\">cout</span>,\u00a0<span class=\"wysiwyg-font-tt\">cin</span>, and <span class=\"wysiwyg-font-tt\">cerr</span> objects, respectively. Also, newline characters can be outputted using the <span class=\"wysiwyg-font-tt\">endl</span> keyword. You use the <span class=\"wysiwyg-font-tt\">&lt;&lt;</span> operator to write to standard output (or to any <span class=\"wysiwyg-font-tt\">osteam</span>, for that matter):</p><p></p><pre><code class=\"cpp\">cout &lt;&lt; \"Hello, world!\" &lt;&lt; endl &lt;&lt; \"My name is Lloyd!\" &lt;&lt; endl;</code></pre><p></p><p>and you use the <span class=\"wysiwyg-font-tt\">&gt;&gt;</span> operator to read from standard input (or any <span class=\"wysiwyg-font-tt\">istream</span>, for that matter):</p><p></p><pre><code class=\"cpp\">int n;                      // declare the variable to hold the input\ncout &lt;&lt; \"Please enter n: \"; // prompt user\ncin &gt;&gt; n;                   // read user input and store in variable n</code></pre><p></p><p>The <span class=\"wysiwyg-font-tt\">getline</span> method reads an entire line of input (from any <span class=\"wysiwyg-font-tt\">istream</span>):</p><p></p><pre><code class=\"cpp\">string userInput;        // declare the variable to hold the input\ngetline(cin, userInput); // read a single line from cin and store it in userInput</code></pre><p></p><p><b>End of Input:</b> If the end of input has been reached, or if something could not be read correctly, the stream is set to a failed state, which you can test for using the <span class=\"wysiwyg-font-tt\">fail</span> method:</p><p></p><pre><code class=\"cpp\">int n;\ncin &gt;&gt; n;\nif(cin.fail()) {\n    cerr &lt;&lt; \"Bad input!\" &lt;&lt; endl;\n}</code></pre>", "source": null, "subtitles": {}, "feedback_correct": ""}, "time": "2016-09-12T22:24:58.821529"}