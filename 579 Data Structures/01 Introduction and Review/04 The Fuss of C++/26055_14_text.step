{"block": {"tests_archive": null, "feedback_correct": "", "subtitle_files": [], "text": "<p>Now that we have reviewed the main basic syntax and variable differences between C++ and Java, we will now discuss how <b>generic programming</b> is implemented in C++.</p><p>With data structures, recall that we do not always know what data types we will be storing, but whatever data structures we implement should work exactly the same if we store <span class=\"wysiwyg-font-tt\">int</span>s, <span class=\"wysiwyg-font-tt\">long</span>s, <span class=\"wysiwyg-font-tt\">float</span>s, <span class=\"wysiwyg-font-tt\">string</span>s, etc. In Java, we could use \"generics\", such as in the following example:</p><p></p><pre><code class=\"java\">class Node&lt;Data&gt; { // Java Node class, with generic type \"Data\" specified\n    public static final Data data;\n    public Node(Data d) {\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003data = d;\n    }\n}<br></code></pre><p></p><p></p><pre><code class=\"java\">Node&lt;Student&gt; a = new Node&lt;Student&gt;(exampleStudent); // a.data is a variable of type Student\nNode&lt;String&gt;  b = new Node&lt;String&gt;(exampleString);   // b.data is a variable of type String</code></pre><p></p><p>In C++, the equivalent of this is the use of <b>templates</b>.</p><p></p><pre><code class=\"cpp\">template&lt;typename Data&gt; // specified generic type \"Data\"\nclass Node {            // C++ Node class, which can now use the type \"Data\"\n    public:\n        Data const data;\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Node(const Data &amp; d) : data(d) {}\n};</code></pre><p></p><p></p><pre><code class=\"cpp\">Node&lt;Student&gt; a(exampleStudent); // a.data is a variable of type Student\nNode&lt;string&gt;  b(exampleString);  // b.data is a variable of type string</code></pre><p></p>", "feedback_wrong": "", "options": {}, "subtitles": {}, "name": "text", "source": null, "video": null, "animation": null}, "time": "2016-09-11T01:04:40.396943", "id": "96130"}