{"id": "95891", "block": {"name": "text", "feedback_correct": "", "animation": null, "subtitle_files": [], "video": null, "feedback_wrong": "", "options": {}, "source": null, "text": "<p>Now, we will discuss the differences between\u00a0<b>classes</b> in Java and C++. To help exemplify the differences, we will write a simple Student class in both Java and C++:</p><p></p><pre><code class=\"java\">class Student { // Java\n    public static int numStudents = 0;           // declare and define static variable\n    private String name;                         // declare instance variable\n\n    public Student(String n) { /* CODE */ }      // declare and define constructor\n\n    public void setName(String n) { /* CODE */ } // declare and define setter method\n    public String getName() { /* CODE */ }       // declare and define getter method\n}</code></pre><p></p><p></p><pre><code class=\"cpp\">class Student { // C++\n\u2003\u2003\u2003\u2003public:\n        static int numStudents; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0    // declare static variable\n\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Student(string n);     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0   // declare constructor\n\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003void setName(string n); \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0    // declare setter method\n        string getName() const; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0    // declare getter method\n\n    private:\n        string name;          \u00a0 \u00a0 \u00a0 \u00a0 \u00a0   \u00a0 \u00a0    // declare instance variable\n};\n\nint Student::numStudents = 0;                    // define static variable\n\nStudent::Student(string n) { /* CODE */ }        // define constructor\n\nvoid Student::setName(string n) { /* CODE */ }   // define setter method\nstring Student::getName() const { /* CODE */ }   // define getter method</code></pre><p></p><p></p><ul><li>In Java, each individual item must be declared as <span class=\"wysiwyg-font-tt\">public</span> or <span class=\"wysiwyg-font-tt\">private</span>, but in C++, we have public and private\u00a0<i>sections</i>, started by the keywords <span class=\"wysiwyg-font-tt\">public</span> and <span class=\"wysiwyg-font-tt\">private</span>, respectively.</li><li>In Java, we actually fill out the methods within the class, but in C++, we only declare the methods, and the actual implementations are listed separately outside of the class (prefixed by the class name, with the <span class=\"wysiwyg-font-tt\">::</span> operator separating the class name and the method name)</li><li>In C++, accessor (or \"getter\") methods are tagged with the keyword <span class=\"wysiwyg-font-tt\">const</span>, which prevents the method from modifying instance variables</li><li>In C++, there is a semicolon after the class's closing bracket</li></ul><p>Also, note that, in C++, for the sake of convenience, you can initialize non-static variables of the object using a\u00a0<b>member initializer list</b> when you define the constructor. Note that, because static variables cannot be initialized in constructors in C++, you can <i>only</i>\ufeff use the member initializer list to initialize non-static variables of an object.\u00a0Below is an example of the syntax for the same <span class=\"wysiwyg-font-tt\">Student</span> class described above (but with the setter and getter methods omitted for the sake of simplification):</p><p></p><pre><pre><code class=\"cpp\">class Student { // C++<br>\u2003\u2003\u2003\u2003public:\n        static int numStudents;        // declare static variable\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Student(string n);             // declare constructor<br><br>\u00a0 \u00a0 private:<br>\u00a0 \u00a0 \u00a0 \u00a0 string name;                   // declare instance variable<br>};<br>int Student::numStudents = 0;          // define static variable\n\nStudent::Student(string n) : name(n) { // define constructor using member initializer list for instance var\n    numStudents++;\n}</code></pre></pre><p></p><p>To finish off the comparison of classes in C++ versus in Java, we want to introduce the notion of <span class=\"wysiwyg-font-tt\">.cpp</span> and <span class=\"wysiwyg-font-tt\">.hpp</span> files in C++. In Java, you write <i>all</i> of your code (declarations <i>and</i> definitions) in a <span class=\"wysiwyg-font-tt\">.java</span> file, which must have a class defined (where the class must have the same name as the filename of the <span class=\"wysiwyg-font-tt\">.java</span> file, minus the file extension).</p><p>In C++, however, you can have your code split between a <span class=\"wysiwyg-font-tt\">.cpp</span> file (known as a \"source file\") and a <span class=\"wysiwyg-font-tt\">.hpp</span> file (known as a \"header file\"). In the <span class=\"wysiwyg-font-tt\">.hpp</span> file, you will <i>declare</i> your classes and functions, but you will not actually define them. Then, in the <span class=\"wysiwyg-font-tt\">.cpp</span> file, you will actually fill in the bodies of your code.</p><p>It might seem inconvenient to have a single series of logic split between two files, but the reason behind this is to be able to distribute your header file freely so that people can have a map of how to use your product (i.e., they will have access to the declarations of all of your classes and functions, so they will know <i>how</i> they would be able to use your full code)\u00a0without any fear of anyone stealing your implementation (because all of your actual code is in the source .cpp file).</p><p>Below is an example of how we would split up the previously described <span class=\"wysiwyg-font-tt\">Student</span> class into a <span class=\"wysiwyg-font-tt\">.hpp</span> and <span class=\"wysiwyg-font-tt\">.cpp</span> file:</p><p><b>Student.hpp</b><br></p><p></p><pre><code class=\"cpp\">class Student {\n    public:<br>\u00a0 \u00a0 \u00a0 \u00a0 static int numStudents;  \u00a0 \u00a0 \u00a0 // declare static variable<br>\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Student(string n);  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  // declare constructor\n\n    private:\n  \u00a0 \u00a0 \u00a0 string name;  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  // declare instance variable\n};</code></pre><p></p><p><b>Student.cpp</b></p><p></p><pre><code class=\"cpp\">int Student::numStudents = 0;          // define static variable\n\nStudent::Student(string n) : name(n) { // define constructor using member initializer list for instance var\n    numStudents++;\n}</code></pre><p></p>", "subtitles": {}, "tests_archive": null}, "time": "2016-09-15T14:56:57.381222"}