{"id": "95895", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Next, we will discuss C++ <b>vectors</b>.</p><p><b>Vectors:</b> The C++ <span class=\"wysiwyg-font-tt\">vector</span> has the best features of the\u00a0<span class=\"wysiwyg-font-tt\">array</span>\u00a0and <span class=\"wysiwyg-font-tt\">ArrayList</span>\u00a0in Java. A C++ <span class=\"wysiwyg-font-tt\">vector</span>\u00a0has convenient elemental access (using the familiar <span class=\"wysiwyg-font-tt\">[]</span> operator) and can grow dynamically. If <span class=\"wysiwyg-font-tt\">T</span> is some type, then <span class=\"wysiwyg-font-tt\">vector&lt;T&gt;</span> is a dynamic array of elements of type <span class=\"wysiwyg-font-tt\">T</span>. A <span class=\"wysiwyg-font-tt\">vector</span> also has the convenient \"push\" and \"pop\" functions of a stack (a data type that will be further discussed later in this text), where you can add an element to the back of the <span class=\"wysiwyg-font-tt\">vector</span> using the <span class=\"wysiwyg-font-tt\">push_back</span> function, and you can remove the last element of the vector using the <span class=\"wysiwyg-font-tt\">pop_back</span> function.</p><p></p><pre><code class=\"cpp\">vector&lt;int&gt; a;      // a vector that is initially empty\nvector&lt;int&gt; a(100); // a vector that initially contains 100 elements\na.push_back(0);     // add 0 to the end of a\na.pop_back();       // remove the last element of a\ncout &lt;&lt; a[10];      // output the element at index 10 of a</code></pre><p></p><p><b>Vector Indexing:</b> Regarding indexing, the valid indices are between 0 and a.size()-1 (just like in Java). However, unlike in Java, there is no runtime check for legal indices, so accessing an illegal index could cause you to access garbage data without even realizing it. <br></p><p><b>Memory:</b>\u00a0Like in a Java <span class=\"wysiwyg-font-tt\">array</span>, the elements stored in a C++ <span class=\"wysiwyg-font-tt\">vector</span> are contiguous in memory (i.e., the elements all show up right after one another). Regarding memory storage, like all other C++ objects, a <span class=\"wysiwyg-font-tt\">vector</span> is a value, meaning the elements of the <span class=\"wysiwyg-font-tt\">vector</span> are values. If one <span class=\"wysiwyg-font-tt\">vector</span> is assigned to another, all elements are copied (unlike in Java, where you would simply have another reference to the same <span class=\"wysiwyg-font-tt\">array</span> object).</p><p></p><pre><code class=\"cpp\">vector&lt;int&gt; a(100); // a vector that initially contains 100 elements\nvector&lt;int&gt; b = a;  // b is now a copy of a, so all of a's elements are copied</code></pre><p></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-02T19:32:25.922668"}