{"time": "2016-09-05T12:23:06.588433", "block": {"tests_archive": null, "animation": null, "feedback_correct": "", "subtitles": {}, "source": null, "text": "<p>We will first discuss the differences between <b>data types</b> in C++ and Java, which are actually quite similar.</p><p><b>Number Representation:</b> Like Java, C++ has the <span class=\"wysiwyg-font-tt\">int</span> and <span class=\"wysiwyg-font-tt\">double</span> types. However, with <span class=\"wysiwyg-font-tt\">ints</span>, the number of bytes an <span class=\"wysiwyg-font-tt\">int</span> variable takes in C++ depends on the machine, whereas in Java, an <span class=\"wysiwyg-font-tt\">int</span> variable takes exactly 4 bytes, no matter what hardware is used. For the purposes of this class, however, this difference is negligible, since UCSD's ieng6 servers use 4-byte <span class=\"wysiwyg-font-tt\">int</span>s.</p><p></p><pre><code class=\"cpp\">int  a; // this variable can range from -2\u00b3\u00b9 to +2\u00b3\u00b9 - 1\nlong b; // this variable can range from -2\u2076\u00b3 to +2\u2076\u00b3 - 1\nchar c; // this variable can range from -2\u2077  to +2\u2077  - 1</code></pre><p></p><p><b>Unsigned Data Types:</b> In C++, you can specify unsigned data types, whereas Java does not allow unsigned types. Recall that the first bit of an <span class=\"wysiwyg-font-tt\">int</span>, <span class=\"wysiwyg-font-tt\">long</span>, <span class=\"wysiwyg-font-tt\">double</span>, or even <span class=\"wysiwyg-font-tt\">char</span> is the \"sign bit\": it represents if the stored value is positive or negative. This is why, in both languages, a regular <span class=\"wysiwyg-font-tt\">int</span> (which contains 4 bytes, or 4*8 = 32 bits) ranges from -2\u00b3\u00b9 to +2\u00b3\u00b9-1 (31 bits to represent the magnitude of the number, and 1 bit to represent the sign). In C++, if you specify a variable to be an <span class=\"wysiwyg-font-tt\">unsigned int</span> instead of a regular <span class=\"wysiwyg-font-tt\">int</span>, its value will be able to range from 0 to +2\u00b3\u00b2-1.</p><p></p><pre><code class=\"cpp\">unsigned int  a; // this variable can range from 0 to +2\u00b3\u00b2 - 1\nunsigned long b; // this variable can range from 0 to +2\u2076\u2074 - 1\nunsigned char c; // this variable can range from 0 to +2\u2078  - 1</code></pre><p></p><p><b>Booleans:</b> The equivalent of the Java <span class=\"wysiwyg-font-tt\">boolean</span> data type is simply <span class=\"wysiwyg-font-tt\">bool</span>. The usage of a C++ <span class=\"wysiwyg-font-tt\">bool</span> is the same as the usage of a Java <span class=\"wysiwyg-font-tt\">boolean</span>.</p><p></p><pre><code class=\"cpp\">bool havingFun = true;</code></pre><p></p><p><b>Strings:</b> In C++, the <span class=\"wysiwyg-font-tt\">string</span> type is very similar to Java's <span class=\"wysiwyg-font-tt\">String</span> class. However, there are a few key differences. First, Java <span class=\"wysiwyg-font-tt\">String</span>s are immutable. On the other hand, one can modify C++ <span class=\"wysiwyg-font-tt\">string</span>s. Next, the substring command in C++ is <span class=\"wysiwyg-font-tt\">substr</span>, where <span class=\"wysiwyg-font-tt\">s.substring(i,n)</span> returns the substring of <span class=\"wysiwyg-font-tt\">s</span> that starts at position <span class=\"wysiwyg-font-tt\">i</span> and is of length <span class=\"wysiwyg-font-tt\">n</span>. Also, in Java, <span class=\"wysiwyg-font-tt\">String</span> objects can be concatenated with any other object (and the other non-<span class=\"wysiwyg-font-tt\">String</span> object will automatically be converted to a <span class=\"wysiwyg-font-tt\">String</span>), but in C++, <span class=\"wysiwyg-font-tt\">string</span> objects can only be concatenated with other <span class=\"wysiwyg-font-tt\">string</span> objects (the conversion is not automatically done for you).</p><p></p><pre><code class=\"cpp\">string message = \"Hi, Niema!\";\nstring name = message.substring(7,5); // name would have a value of \"Niema\"</code></pre><p></p><p><b>Comparing Objects:</b> To compare objects in C++, you simply use the relational operators <span class=\"wysiwyg-font-tt\">== != &lt; &lt;= &gt; &gt;=</span>. In Java, you only use the relational operators to compare primitives, but in C++, since you are able to overload the relational operators as if they were methods, you use the relational operators to compare\u00a0<i>all</i> objects (including non-primitives).</p><p></p><pre><code class=\"cpp\">string name1 = \"Niema\";\nstring name2 = \"Liz\";\nbool sameName = (name1 == name2); // sameName would have a value of 0, or false</code></pre><br><p></p>", "options": {}, "subtitle_files": [], "name": "text", "video": null, "feedback_wrong": ""}, "id": "95888"}