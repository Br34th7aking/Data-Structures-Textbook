{"block": {"tests_archive": null, "feedback_correct": "", "subtitle_files": [], "text": "<p>In the previous step, we briefly mentioned the <span class=\"wysiwyg-font-tt\">const</span> keyword, but what does it actually mean? In general, <span class=\"wysiwyg-font-tt\">const</span> implies that something will not be allowed to be changed. Of course, this sounds vague, and the reason why we're keeping the general definition vague is because the actual restrictions that come about from the <span class=\"wysiwyg-font-tt\">const</span> keyword depend on where it is placed with respect to the variable it is modifying.</p><p>For variables in general, you can place the <span class=\"wysiwyg-font-tt\">const</span> keyword before or after the type, and the <span class=\"wysiwyg-font-tt\">const</span> keyword makes it so that the variable <b>can never be modified after initialization</b>. Below is an example using <span class=\"wysiwyg-font-tt\">int</span> objects:</p><p></p><pre><code class=\"cpp\">const int a = 5; // 'a' cannot be modified after this: it will always have a value of 5\nint const b = 6; // 'b' cannot be modified after this: it will always have a value of 6</code></pre><p></p><p>With <b>pointers</b>, the <span class=\"wysiwyg-font-tt\">const</span> keyword becomes a bit trickier. Below are the different places we can place the <span class=\"wysiwyg-font-tt\">const</span> keyword and a description of the result:</p><p></p><pre><code class=\"cpp\">int a = 5;                   // create a regular int\nint b = 6;                   // create a regular int\nconst int * ptr1 = &amp;a;       // can change what ptr1 points to, but can't modify the actual object itself\nint const * ptr2 = &amp;a;       // equivalent to ptr1\nint * const ptr3 = &amp;a;       // can modify the object itself, but can't change what ptr3 points to\nconst int * const ptr4 = &amp;a; // can't change what ptr2 points to AND can't modify the actual object itself\n\nptr1 = &amp;b;                   // valid, because I CAN change what ptr1 points to\n*pr1 = 7;                    // NOT valid, because I CAN'T modify the object itself\n\n*ptr3 = 7;                   // valid, because I CAN modify the object itself\nptr3 = &amp;b;                   // NOT valid, because I CAN'T change what ptr3 points to\n\nptr4 = &amp;b;                   // NOT valid, because I CAN'T change what ptr4 points to\n*ptr4 = 7;                   // NOT valid, because I can't modify the object itself</code></pre><p></p><p>With <b>references</b>, the <span class=\"wysiwyg-font-tt\">const</span> keyword isn't too complicated. Basically, it prevents modifying the object being referenced via the <span class=\"wysiwyg-font-tt\">const</span> reference. Below are some examples with explanations:</p><p></p><pre><code class=\"cpp\">int a = 5;            // create a regular int\nconst int b = 6;      // create a const int\n\nconst int &amp; ref1 = a; // creates a const reference to 'a' (can't modify the object using ref1)\nint const &amp; ref2 = a; // equivalent to ref1\n\nref1 = 7;             // NOT valid, because ref1 can't modify the object\n\nconst int &amp; ref3 = b; // valid, because you can have const reference to a const object\nint &amp; ref4 = b;       // NOT valid, because you CAN'T have a non-const reference to a const object\n\nint &amp; const ref5 = a; // invalid syntax (const must come before the &amp; symbol)</code></pre><p></p><p>As mentioned previously, <b>functions</b> can be <span class=\"wysiwyg-font-tt\">const</span> as well. By making a function <span class=\"wysiwyg-font-tt\">const</span>, you are enforcing that the function can\u00a0<i>only</i> modify\u00a0<i>local</i> variables, or variables whose scope only exists\u00a0<i>within</i> the function. You\u00a0<i>cannot</i> modify anything that exists outside of the <span class=\"wysiwyg-font-tt\">const</span> function.</p>", "feedback_wrong": "", "options": {}, "subtitles": {}, "name": "text", "source": null, "video": null, "animation": null}, "time": "2016-09-11T01:04:35.486774", "id": "118026"}