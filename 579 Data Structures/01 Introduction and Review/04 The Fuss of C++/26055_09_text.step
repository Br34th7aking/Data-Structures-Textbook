{"id": "95894", "block": {"subtitles": {}, "source": null, "video": null, "feedback_wrong": "", "options": {}, "animation": null, "text": "<p>Next, the differences between <b>functions</b> in Java and C++.</p><p><b>Global Functions:</b> In Java, every function must either be an instance method or a static function of a class. C++ supports both of these cases, but it also supports functions that are not part of any class, called \"global functions\". Typically, every functional C++ program starts with the global function <span class=\"wysiwyg-font-tt\">main</span>:</p><p></p><pre><code class=\"cpp\">int main() {\n    // CODE\n}</code></pre><p></p><p>Notice that this <span class=\"wysiwyg-font-tt\">main</span> method has a return value (<span class=\"wysiwyg-font-tt\">int</span>), whereas the <span class=\"wysiwyg-font-tt\">main</span> methods of Java are <span class=\"wysiwyg-font-tt\">void</span>. By convention, a C++ <span class=\"wysiwyg-font-tt\">main</span> method returns 0 if it completed successfully, or some non-zero integer otherwise.</p><p><b>Passing Parameters:</b> C++ has two parameter-passing mechanisms:\u00a0<i>call by value</i> (as in Java) and\u00a0<i>call by reference</i>. When an object is passed by value, since C++ objects are not references to objects, the function receives a copy of the actual argument. As a result, the function cannot modify the original. If we want to be able to modify the original object, we must pass the object by reference, which we can do by adding an <span class=\"wysiwyg-font-tt\">&amp;</span> after the parameter type.</p><p>Note that, even if we do not intend to modify the original object, there are still times where we would want to pass by reference. For example, in the world of Bioinformatics, programs often represent genomes as string objects and perform various algorithms on these strings. The human genome is roughly 3.3 billion letters long, so a string object containing the entire human genome would be roughly 3.3 GB large. Even if we have no intention of modifying this object in whatever method we will pass it in, we want to pass by reference so that we do not accidentally create a copy of this absurdly large object.</p><p></p><pre><code class=\"cpp\">double gcContent(string &amp; genome) {\n    // CODE\n}</code></pre><p></p><p>In short, in C++, you always use call by reference when a function needs to modify a parameter, and you still might want to use call by reference in other situations as well.</p>", "feedback_correct": "", "tests_archive": null, "subtitle_files": [], "name": "text"}, "time": "2016-09-03T01:05:30.988093"}