{"time": "2016-09-20T21:00:38.421469", "block": {"name": "text", "subtitles": {}, "source": null, "subtitle_files": [], "feedback_wrong": "", "video": null, "animation": null, "feedback_correct": "", "tests_archive": null, "text": "<h1>Array List (Dynamic Array)</h1><p><b>Summary Description</b></p><ul><li>Array Lists (or Dynamic Arrays) are simply arrays wrapped in a container that handles automatically resizing the array when it becomes full</li><li>As a result, if we know which index of the Array List we wish to access, we can do so in O(1) time because of the array's random access property</li><li>Array Lists are typically implemented such that the elements are contiguous in the array (i.e., there are no empty slots in the array)</li></ul><p></p><p><br></p><h2>Time/Space Complexities of an Unsorted Array List</h2><p><b>Worst-Case Time Complexity (Unsorted Array List)</b></p><ul><li><b><span class=\"wysiwyg-color-green\">Find:</span> O(<i>n</i>)</b> \u2014 We need to iterate over all\u00a0<i>n</i> elements to find the query</li><li><b><span class=\"wysiwyg-color-purple\">Insert:</span> O(<i>n</i>)</b>\u00a0\u2014 If we insert at the front of the Array List, we need to move over each of the\u00a0<i>n</i> elements<br></li><li><b><span class=\"wysiwyg-color-red\">Remove:</span> O(<i>n</i>)</b>\u00a0\u2014 If we remove from the front of the Array List, we need to move over each of the\u00a0<i>n</i> elements<br></li></ul><p><b>Average-Case Time Complexity (Unsorted Array List)</b></p><p></p><ul><li><b><span class=\"wysiwyg-color-green\">Find:</span> O(<i>n</i>)</b>\u00a0\u2014 The average number of checks is\u00a0$\\frac{1+2+...+n}{n} =  \\frac{\\sum_{i=1}^{n}{i}}{n} = \\frac{n(n+1)}{2n} = \\frac{n+1}{2} $\u00a0<br></li><li><b><span class=\"wysiwyg-color-purple\">Insert:</span> O(<i>n</i>)</b>\u00a0\u2014 The average number of \"element moves\" is\u00a0$ \\frac{n+(n-1)+...+1+0}{n} =  \\frac{\\sum_{i=0}^{n}{i}}{n} = \\frac{n(n+1)}{2n} = \\frac{n+1}{2}  $\u00a0<br></li><li><b><span class=\"wysiwyg-color-red\">Remove:</span> O(<i>n</i>)</b>\u00a0\u2014 The average number of \"element moves\" is\u00a0$  \\frac{(n-1)+(n-2)+...+1+0}{n} =  \\frac{\\sum_{i=0}^{n-1}{i}}{n} = \\frac{n(n-1)}{2n} = \\frac{n}{2}   $\u00a0<br></li></ul><p><b>Best-Case Time Complexity (Unsorted Array List)</b><br></p><p></p><ul><li><b><span class=\"wysiwyg-color-green\">Find:</span> O(1)</b>\u00a0\u2014 The query is the first element in the Array List<br></li><li><b><span class=\"wysiwyg-color-purple\">Insert:</span> O(1)</b>\u00a0\u2014 If we insert at the end of the Array List, we don't need to move any elements<br></li><li><b><span class=\"wysiwyg-color-red\">Remove:</span> O(1)</b>\u00a0\u2014 If we remove from the end of the Array List, we don't need to move any elements</li></ul><p><b>Space Complexity (Unsorted Array List)</b><br></p><p></p><ul><li><b>O(<i>n</i>)</b>\u00a0\u2014 The two extremes are\u00a0<i>just before</i> resizing (completely full, so the array is of size\u00a0<i>n</i>) or\u00a0<i>just after</i> resizing (array is half full, so the array is of size 2<i>n</i>)</li></ul><p><br></p><h2>Time/Space Complexities of a Sorted Array List<br></h2><p></p><p><b>Worst-Case Time Complexity (Sorted Array List)</b></p><ul><li><b><span class=\"wysiwyg-color-green\">Find:</span> O(log <i>n</i>)</b> \u2014 We can perform Binary Search to find an element</li><li><b><span class=\"wysiwyg-color-purple\">Insert:</span> O(<i>n</i>)</b>\u00a0\u2014 If we insert at the front of the Array List, we need to move over each of the <i>n</i> elements<br></li><li><b><span class=\"wysiwyg-color-red\">Remove:</span> O(<i>n</i>)</b>\u00a0\u2014 If we remove from the front of the Array List, we need to move over each of the <i>n</i> elements<br></li></ul><p><b>Average-Case Time Complexity (Sorted Array List)</b></p><p></p><ul><li><b><span class=\"wysiwyg-color-green\">Find:</span> O(log <i>n</i>)</b>\u00a0\u2014 The derivation is too complex for a summary slide, but it's the average case of Binary Search<br></li><li><b><span class=\"wysiwyg-color-purple\">Insert:</span> O(<i>n</i>)</b>\u00a0\u2014 The average number of \"element moves\" is\u00a0$ \\frac{n+(n-1)+...+1+0}{n} =  \\frac{\\sum_{i=0}^{n}{i}}{n} = \\frac{n(n+1)}{2n} = \\frac{n+1}{2}  $\u00a0<br></li><li><b><span class=\"wysiwyg-color-red\">Remove:</span> O(<i>n</i>)</b>\u00a0\u2014 The average number of \"element moves\" is\u00a0$  \\frac{(n-1)+(n-2)+...+1+0}{n} =  \\frac{\\sum_{i=0}^{n-1}{i}}{n} = \\frac{n(n-1)}{2n} = \\frac{n}{2}   $\u00a0<br></li></ul><p><b>Best-Case Time Complexity (Sorted Array List)</b><br></p><p></p><ul><li><b><span class=\"wysiwyg-color-green\">Find:</span> O(1)</b>\u00a0\u2014 The query is the first element in the Array List we check via Binary Search<br></li><li><b><span class=\"wysiwyg-color-purple\">Insert:</span> O(1)</b>\u00a0\u2014 If we insert at the end of the Array List, we don't need to move any elements<br></li><li><b><span class=\"wysiwyg-color-red\">Remove:</span> O(1)</b>\u00a0\u2014 If we remove from the end of the Array List, we don't need to move any elements</li></ul><p></p><p><b>Space Complexity (Sorted Array List)</b><br></p><p></p><ul><li><b>O(<i>n</i>)</b>\u00a0\u2014 The two extremes are <i>just before</i> resizing (completely full, so the array is of size <i>n</i>) or <i>just after</i> resizing (array is half full, so the array is of size 2<i>n</i>)</li></ul><p></p>", "options": {}}, "id": "122237"}