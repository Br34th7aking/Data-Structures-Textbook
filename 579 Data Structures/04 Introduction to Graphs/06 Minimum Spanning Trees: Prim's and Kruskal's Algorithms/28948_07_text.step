{"id": "116960", "time": "2016-09-01T21:50:51.218576", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p></p><p>Implementation-wise, <b><span class=\"wysiwyg-color-blue\">Prim's Algorithm</span></b> achieves the steps described previously by using a priority queue of edges sorted by edge weights. However, unlike <b><span class=\"wysiwyg-color-purple\">Dijkstra's Algorithm</span></b>, which had used the<i> </i><i>total</i> path edge weights explored so far to the priority queue for comparison, <b><span class=\"wysiwyg-color-blue\">Prim's Algorithm</span></b> uses <i>single</i> edge weights.</p><p>Here is the pseudocode for <b><span class=\"wysiwyg-color-blue\">Prim's Algorithm</span></b>:</p><ol><li>Initialize all the vertex fields of the graph \u2014 just like <b><span class=\"wysiwyg-color-purple\">Dijkstra's Algorithm</span></b>: Set all \"done\" fields to false. Pick a start vertex <i>r</i>. Set its \"prev\" field to -1 and its \"done\" field to true. Add all the edges adjacent to <i>r</i> as a tuple that includes the starting vertex, <i>v</i>, ending vertex, <i>w</i>, and cost, into the priority queue. <br></li><li>Is the priority queue empty? Done!</li><li>Else: Dequeue the top element, (<i>v</i>, <i>w</i>, cost) from the priority queue (i.e., remove the smallest cost edge).</li><li>Is the \"done\" field of vertex <i>w</i> marked true? If so, then this edge connects two vertices already connected in the <b><span class=\"wysiwyg-color-red\">MST</span></b> and we therefore cannot use it. Go to step 2.</li><li>Else: Mark the \"done\" field of vertex <i>w</i> true, and set the \"prev\" field of <i>w</i> to indicate<i> v</i>. <br></li><li>Add all the edges adjacent to <i>w</i> into the priority queue. <br></li><li>Go to step 2. <br></li></ol><p></p><p>Below is a visualization of how<b> <span class=\"wysiwyg-color-blue\">Prim's Algorithm </span></b>takes advantage of the priority queue to choose which vertices and edges to use to build the <b><span class=\"wysiwyg-color-red\">Minimum Spanning Tree</span></b>. Use the arrows in the bottom left to step through the slides. <br></p>\n\n<p><br>So how well does <b><span class=\"wysiwyg-color-blue\">Prim's Algorithm</span></b> do with respect to time complexity? Hopefully by now you should be able to see all the similarities between<b> <span class=\"wysiwyg-color-blue\">Prim's</span></b> and <b><span class=\"wysiwyg-color-purple\">Dijkstra's Algorithm</span></b> and can thus come to the intuitive conclusion that <b><span class=\"wysiwyg-color-blue\">Prim's Algorithm</span> </b>is also <b>O(|V| + |E|* log(|E|))</b>.<br></p>", "feedback_correct": "", "video": null, "animation": null}}