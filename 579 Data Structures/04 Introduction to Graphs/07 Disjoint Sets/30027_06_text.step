{"id": "117333", "time": "2016-09-01T21:51:04.146550", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>We mentioned earlier that elements in the disjoint set are connected through the <span class=\"wysiwyg-color-green\"><b>union</b></span><i> </i>operation (we care about connecting elements in our set in order to be able to show a relationship between the elements, just like in a general graph).<br></p><p> How exactly does the <span class=\"wysiwyg-color-green\"><b>union</b> </span>operation work? Formally, the purpose of the <span class=\"wysiwyg-color-green\"><b>union</b></span> operation is to join two sets. This implies that, after we have unioned two different sets, the two sets should end up with the <b>same</b> sentinel node. Consequently, a lot of freedom actually surrounds the concept behind the <span class=\"wysiwyg-color-green\"><b>union</b></span> operation because there are so many ways to merge two sets of vertices.</p><p>For example, suppose I start with the disjoint set below:</p><p><span class=\"image-wrapper\"><img src=\"https://ucarecdn.com/c390a70e-b9da-40ec-9c71-8fa0c0c3bc58/\" alt=\"\"></span></p><p>Let's say I want to <span class=\"wysiwyg-color-green\"><b>union</b></span>(F, E) \n\n\u2014\n\n \"merge the set vertex F is in with the set vertex E is in.\" First I must find the set that contains vertex F by performing my \"find' algorithm, which would return F (the sentinel node of F is F). Then, I must find the set that contains vertex E by performing my \"find\" algorithm again, which would return C (the sentinel node of E is C). Then, perhaps the most intuitive way to union sets F and C would be to connect vertex C to vertex F like this:</p><p><span class=\"image-wrapper\"><img src=\"https://ucarecdn.com/fee14a0d-9c92-462b-b7f8-271d3eddafd7/\" title=\"Image: https://ucarecdn.com/fee14a0d-9c92-462b-b7f8-271d3eddafd7/\" alt=\"\"></span></p><p>In the example above, we basically just stacked the vertices and literally connected the sentinel node of vertex E (which was vertex C) to the sentinel node of vertex F (which was vertex F). Notice that I specifically connected the <b>sentinel nodes</b> of the two elements on which I called union, not necessarily the elements themselves! This is extremely important because, otherwise, you might disrupt the structure of your Up-Tree.\u00a0Now, the important question to ask is: Do vertex F and vertex E end up returning the <b>same</b> sentinel node? The answer in this case is obviously yes; if we traverse up from both vertex E and vertex F, the root is vertex F.</p>", "feedback_correct": "", "video": null, "animation": null}}