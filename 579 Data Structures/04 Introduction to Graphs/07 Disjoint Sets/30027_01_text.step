{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>In the hit TV show\u00a0<i>Chuck</i>, Sarah Walker is a secret agent working for the CIA, and she is assigned the task of spying on computer geek Chuck Bartowski. She wants to make sure Chuck isn't secretly working for some evil agency, so specifically, her task is to find out if there is some \"connection\" between Chuck and a known villain, either direct or indirect. To do so, she must look at Chuck's own social circle, and then look at the social circles of each individual in Chuck's social circle, and then look at the social circles of each individual in\u00a0<i>those</i> people's social circles, etc. As one might expect, this task blows up in size quite quickly, so Sarah would be better off writing an efficient program to solve the problem for her. How might she formulate this CIA task as a formal computational problem?</p><p>We can represent Chuck's social network (and the social networks of those around him) using a <i>\ufeffgraph</i>: nodes (<i>V</i>)\u00a0are individuals, and edges (<i>E</i>) represent individuals having a direct social connection to one another. Sarah's goal is to come up with a way of being able to query a person's name and determine if the person is connected to Chuck, either directly or indirectly. If she were to approach this as a naive graph traversal algorithm, she would need to use BFS each time she performs a query, which is O(|<i>V</i>| + |<i>E</i>|). Luckily, Sarah did well in her university Data Structures course and, as a result, she had the Computer Science skills needed to solve the seemingly complex problem quite efficiently.</p><p>In this section, we will discuss the\u00a0<b>Disjoint Set</b> ADT, which will help Sarah greatly speed up her surveillance problem.</p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "116965", "time": "2016-09-14T00:11:51.712528"}