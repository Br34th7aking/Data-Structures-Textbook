{"id": "118007", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>In the meantime, how do we go about implementing this \"forest of nodes\"? One option would be to implement it as an adjacency list or an adjacency matrix, just like we went about implementing the graphs in the previous lessons. Note, however, that nodes in an Up-Tree will always only need to store an edge to a single other node, its parent, as opposed to multiple adjacent vertices. As a result, we can take advantage of a simple array to store the information that we need.</p><p>To understand how this array representation works, we will reproduce the example Up-Tree from the previous step below:</p><p><img alt=\"\" src=\"https://ucarecdn.com/e6cf965f-e0f9-4a96-9844-42da7b8ba77a/\"></p><p>Below is an array that represents the Up-Tree in the example above:</p><div><p><img alt=\"\" src=\"https://ucarecdn.com/ed2682ed-4fa9-4a4c-99f1-59610dc6f0de/\"></p><p>Every index of the array corresponds to a particular vertex (e.g. index 0 corresponds to vertex A, index 3 corresponds to vertex D, etc.). The content of each cell of the array corresponds to the corresponding vertex's parent. For example, the index corresponding to vertex B \u2014 index 1 \u2014 has a 0 in it because index 0 corresponds to vertex A and vertex A is the parent of vertex B. Also, the index corresponding to vertex F \u2014 index 5 \u2014 has a -1 in it because an index of -1 corresponds to NULL, and since vertex F doesn't have a parent, its parent is NULL. </p></div>\n\n<br><p></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-07T23:38:22.598439"}