{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>By now, we have encountered two different algorithms that can find a shortest path between the vertices in a graph. However, you may have noticed that all this time we have been operating under the assumption that the graphs being operated on were <i>unweighted\u00a0</i>(i.e., all edge weights were the same). What happens when we try to find the shortest path between two vertices in a\u00a0<i>weighted</i> graph using <b><span class=\"wysiwyg-color-green\">BFS</span></b>? Note that we define the\u00a0<i>shortest weighted path</i> as the path that has the smallest\u00a0<i>total path weight</i>, where\u00a0<i>total path weight</i>\ufeff is simply the sum of all edge weights in the path.</p><p>For example, lets perform <b><span class=\"wysiwyg-color-green\">BFS</span></b> on the graph below:</p><p><img src=\"https://ucarecdn.com/794edb54-6e62-4992-b894-a3fa98f9866e/\" alt=\"\"></p><p>Suppose we are trying to find the shortest path from vertex<i> A </i>to <i>C</i>. By starting at vertex <i>A</i>, <b><span class=\"wysiwyg-color-green\">BFS</span></b> will immediately traverse the edge with weight 30, thereby discovering vertex <i>C</i> and returning the path <i>A \u2192\u00a0C </i>to be the shortest path. Yet, if we look closely, we find that counter-intuitively, the <i>longer </i>path in terms of number of edges actually produces the <i>shortest </i><i>weighted </i>path (i.e., Path <i>A \u2192\u00a0B \u2192\u00a0C </i>has a total path weight of 12 + 5 = 17, which is less than 30).</p><p>Consequently, we need to look to a new algorithm to help us find an accurate weighted shortest path: specifically, we will look at <b></b><b><span class=\"wysiwyg-color-purple\">Dijkstra's Algorithm</span></b><b><i></i></b>.\u00a0</p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "111096", "time": "2016-09-14T00:11:31.430795"}