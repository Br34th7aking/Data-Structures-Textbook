{"block": {"tests_archive": null, "feedback_correct": "", "subtitle_files": [], "text": "<p>The idea behind <b><span class=\"wysiwyg-color-purple\">Dijkstra's Algorithm</span>\u00a0</b>is that we are constantly looking for the lowest-weight paths and seeing which vertices are discovered along the way. As a result, the algorithm explores neighbors similarly to how the <b><span class=\"wysiwyg-color-green\">Breadth First Search</span> </b>algorithm would, except it prioritizes which neighbors it searches for next by calculating which neighbor lies on the path with the lowest overall path weight.</p><p>Take the simple example from the previous step:</p><p><img src=\"https://ucarecdn.com/d10ddc6e-9262-425f-8249-b36b39aa8376/\" alt=\"\"></p>Suppose we start at vertex <i>C</i> and want to find the shortest path from <i>C</i> to all other vertices. <span class=\"wysiwyg-color-purple\"><b>Dijkstra's algorithm</b></span><b> </b>would run roughly like this:<br><ol><li>We would take note that the distance from vertex <i>C</i> to vertex <i>C</i> is 0 (by definition, the distance from a node to itself must be 0). As a result, we would mark that we have found the shortest path to vertex\u00a0<i>C</i> (which is just\u00a0<i>C</i>).</li><li>We would traverse the next \"shortest\" path (i.e., path with the smallest total weight) that we could find from <i>C</i>. In this case, our options are a path of weight 5 (<i>C</i>\u00a0\u2192 <i>B</i>)\u00a0or a path of weight 30 (<i>C</i>\u00a0\u2192\u00a0<i>A</i>); we choose the path with the smaller weight of 5 (<i>C</i>\u00a0\u2192\u00a0<i>B</i>). <br></li><li>We would take note that we have arrived at vertex <i>B</i>, which implies that\u00a0the shortest distance from vertex <i>C</i> to vertex <i>B</i> is the total weight of the path we took, which is 5. As a result, we would mark that we have found the shortest path to vertex <i>B\u00a0</i>(which is\u00a0<i>C</i>\u00a0\u2192\u00a0<i>B</i>).</li><li>We would traverse the next \"shortest\" path that we could find from <i>C</i>. Our options are now the path we forewent earlier (<i>C</i>\u00a0\u2192\u00a0<i>A</i>, with weight 30) and the path extending from\u00a0<i>B</i> (<i>C</i>\u00a0\u2192\u00a0<i>B</i>\u00a0\u2192\u00a0<i>A</i>, with weight 5 + 12 = 17).\u00a0We choose the path with the smaller weight of 17 (<i>C</i>\u00a0\u2192\u00a0<i>B\u00a0</i>\u2192 <i>A</i>). <br></li><li>We would take note that we have arrived at vertex <i>A</i>, which implies that\u00a0the shortest distance from vertex <i>C</i> to vertex <i>A</i> is the total weight of the path we took, which is 17. As a result, we would mark that we have found the shortest path to vertex <i>A</i>\u00a0(which is\u00a0<i>C\u00a0\u2192 B\u00a0\u2192 A</i>).</li><li>We would take note that all vertices have been marked as found, and as a result, all shortest paths have been found!<br></li></ol>", "feedback_wrong": "", "options": {}, "subtitles": {}, "name": "text", "source": null, "video": null, "animation": null}, "time": "2016-09-11T01:09:31.566792", "id": "111859"}