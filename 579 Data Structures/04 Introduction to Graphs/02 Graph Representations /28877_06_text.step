{"id": "110720", "time": "2016-09-01T21:50:08.955533", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>As we saw previously, an <b><span class=\"wysiwyg-color-red\">adjacency matrix</span></b> is not ideal for graphs with significantly fewer than <b></b>|<i><span class=\"wysiwyg-color-black\">V</span></i>|\u00b2<b></b> edges because of the wasted space used up by unneeded 0s. As a result, we turn to an alternative data structure to represent\u00a0<b><span class=\"wysiwyg-color-green\">sparse</span></b> graphs: the\u00a0<b><span class=\"wysiwyg-color-green\">adjacency list</span></b>.\u00a0 We will use the example below to describe how an adjacency list works.</p><p><img src=\"https://ucarecdn.com/3c5d8c92-a890-42d6-bd5e-bb3af5a3c31d/\" alt=\"\"></p><ul><li><span class=\"wysiwyg-color-red\"><span class=\"wysiwyg-color-black\">The\u00a0<i>i</i>-th\u00a0\"row\" is a list representing the edges coming from vertex <i>i</i></span></span></li><li><span class=\"wysiwyg-color-red\"><span class=\"wysiwyg-color-black\">The\u00a0<i>j</i>-th entry\u00a0in a given row <i>i</i>\u00a0corresponds to the <i>j</i>-th edge coming out of vertex\u00a0<i>i</i><br></span></span></li></ul><p>As you can probably see, if <b></b>|<i><span class=\"wysiwyg-color-black\">E</span></i>|<b></b> is relatively small, the <b><span class=\"wysiwyg-color-green\">adjacency list</span></b> has a much smaller storage requirement than an equivalent <b><span class=\"wysiwyg-color-red\">adjacency matrix</span></b>. Since we are storing a single list for each of our <b></b>|<i><span class=\"wysiwyg-color-black\">V</span></i>|<b></b> vertices (and each list has some constant-space overhead) and each of our <b></b>|<i><span class=\"wysiwyg-color-black\">E</span></i>|<b></b> edges is represented by a single element in one of the lists (so each edge is only accounted for once), our space complexity becomes <b>\u00a0<span class=\"wysiwyg-color-black\">O(|</span><i><span class=\"wysiwyg-color-black\">V</span></i><span class=\"wysiwyg-color-black\">|+|</span><i><span class=\"wysiwyg-color-black\">E</span></i><span class=\"wysiwyg-color-black\">|)</span></b><b></b>.</p><p>It is important to note that, as mentioned before, <b></b>|<i><span class=\"wysiwyg-color-black\">E</span></i>|<b></b> can be as large as <b></b>|<i><span class=\"wysiwyg-color-black\">V</span></i>|\u00b2<b></b>. If this is the case, then the space complexity for storing a dense graph becomes <b><span class=\"wysiwyg-color-black\">|</span><i><span class=\"wysiwyg-color-black\">V</span></i><span class=\"wysiwyg-color-black\">| + |</span><i><span class=\"wysiwyg-color-black\">V</span></i><span class=\"wysiwyg-color-black\">|\u00b2</span></b> and therefore will take up more space than an adjacency matrix (which would have only taken up <b><span class=\"wysiwyg-color-black\">|</span></b><i><b><span class=\"wysiwyg-color-black\">V</span></b></i><b><span class=\"wysiwyg-color-black\">|\u00b2</span></b>). As a result, we can conclude that an <b><span class=\"wysiwyg-color-green\">adjacency list</span></b> is not ideal for\u00a0<b><span class=\"wysiwyg-color-red\">dense</span></b> graphs.<br></p>", "feedback_correct": "", "video": null, "animation": null}}