{"id": "111098", "time": "2016-09-02T18:28:04.229417", "block": {"animation": null, "text": "<p>Fun Fact: In many cases, you will often only be interested in finding the shortest path from a particular vertex to another <i>single </i>particular vertex. However, as of today, there is no known algorithm which can run more efficiently by only dealing with a particular single destination vertex as opposed to just finding the shortest path from one to <i>all </i>other<i> </i>vertices.\u00a0 As a result, the best optimization that we can do is to include an \"early out\" option and hope that it happens early enough in the computation (i.e. return from the algorithm once it has computed the shortest path from the source to the destination, but not necessarily all the rest of the vertices). <br></p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b> Why does including an \"early out\" option <b>not</b> improve the worst-case time complexity of a shortest path algorithms? <br></p>", "options": {}, "feedback_correct": "", "source": null, "subtitle_files": [], "name": "text", "feedback_wrong": "", "subtitles": {}, "tests_archive": null, "video": null}}