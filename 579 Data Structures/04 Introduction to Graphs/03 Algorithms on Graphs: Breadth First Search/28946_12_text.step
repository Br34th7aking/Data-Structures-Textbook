{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>As can be seen,\u00a0<b><span class=\"wysiwyg-color-green\">\ufeffBreadth First Search</span></b><span class=\"wysiwyg-color-green\"></span> is an excellent algorithm for traversing a graph, and it can be used to solve many problems in weighted and unweighted graph problems. With regard to the example we started with, it should hopefully be clear that BFS allows us to find the shortest path (i.e., least edges) from one node to any other node in a graph.<br></p><p>However, hopefully the lasting question on the previous step peaked your curiosity: we mentioned earlier in this chapter that graphs can get quite massive when working with real data, so what happens if the memory requirements of BFS become too great for modern computers to be able to handle memory-wise? Is there an alternative graph traversal algorithm that might be able to save the day?</p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "117870", "time": "2016-09-14T00:11:20.151895"}