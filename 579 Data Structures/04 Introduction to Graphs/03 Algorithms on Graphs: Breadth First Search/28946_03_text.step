{"id": "111101", "time": "2016-09-01T21:50:14.968108", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>One algorithm to explore all vertices in a graph is called <i></i><b><span class=\"wysiwyg-color-green\">Breadth First Search (BFS)</span></b><i></i>.<i></i>\u00a0The idea behind <b><span class=\"wysiwyg-color-green\">BFS</span></b> is to explore all vertices reachable from\n the current vertex before moving onto the next. We will use the graph below as an example.</p><p><span class=\"image-wrapper\"><img src=\"https://ucarecdn.com/16247a8d-d6d2-434a-9efe-6f9250ab8e6e/\"></span></p><p>Suppose\n we start at 0. <b><span class=\"wysiwyg-color-green\">BFS</span></b> will then choose to \"visit\" 1, since it is \nimmediately reachable from 0. From 1, <b><span class=\"wysiwyg-color-green\">BFS</span></b> will choose to \"visit\" 3 <i>and </i>4 (not simultaneously, but in some arbitrary order) since they are <i>both</i> immediately reachable from 1. After, <b><span class=\"wysiwyg-color-green\">BFS</span></b> will \"visit\" 2 as it reachable from 3.\u00a0</p><p></p><p>The rough algorithm for <b><span class=\"wysiwyg-color-green\">BFS</span></b> can be thought of as:<br></p><p></p><ol><li>Begin at the starting node <i>s</i>. It has distance 0 from itself.\n</li><li>Consider nodes adjacent to <i>s</i>. They have distance 1. Mark them as visited.\n</li><li>Then consider nodes that have not yet been visited that are adjacent to those at distance 1. They have distance 2. Mark them as visited.\n</li><li>Etc. etc. until all nodes reachable from <i>s</i>\u00a0are visited.</li></ol><p></p>", "feedback_correct": "", "video": null, "animation": null}}