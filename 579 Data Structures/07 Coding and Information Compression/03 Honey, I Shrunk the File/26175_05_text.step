{"id": "96573", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p><b>Huffman's Algorithm - <span class=\"wysiwyg-color-green\">Tree Construction</span>:</b> The algorithm creates the Huffman Tree in a <b>bottom-up</b> approach:</p><p></p><ol><li>Compute the frequencies of all symbols that appear in the input</li><li>Start with a \"forest\" of single-node trees, one for each symbol that appeared in the input (ignore symbols with count 0, since they don't appear at all in the input)</li><li>While there is more than 1 tree in the forest:<ol><li>Remove the two trees (T1 and T2) from the forest that have the lowest count contained in their roots</li><li>Create a new node that will be the root of a new tree. This new tree will have T1 and T2 as left and right subtrees. The count in the root of this new tree will be the sum of the counts in the roots of T1 and T2. Label the edge from this new root to T1 as \"1\" and label the edge from this new root to T2 as \"0\"</li><li>Insert this new tree in the forest, and go back to the While statement</li></ol></li><li>Return the one tree in the forest as the Huffman tree</li></ol><p>Let's create a Huffman Tree from the string <span class=\"wysiwyg-color-green\"><b>AAAAA</b></span><b><span class=\"wysiwyg-color-purple\">BB</span><span class=\"wysiwyg-color-green\">A</span>HH<span class=\"wysiwyg-color-purple\">B</span><span class=\"wysiwyg-color-blue\">C</span><span class=\"wysiwyg-color-purple\">B</span><span class=\"wysiwyg-color-red\">G</span><span class=\"wysiwyg-color-blue\">CCC</span></b>:</p><center><p><iframe src=\"https://drive.google.com/file/d/0B6bdBQu0Dmc3Q1prRGJHNFFGMTQ/preview\" width=\"640\" height=\"480\"></iframe></p></center>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-02T19:38:39.098375"}