{"id": "96250", "block": {"feedback_correct": "", "name": "code", "feedback_wrong": "", "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span> Decoding a Message Using a Coding Scheme</b></p><p>We will be using the same trivial example as the previous step, where we have the following symbol mappings:</p><p></p><ul><li><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-color-green\">A</span></b></span><b><span class=\"wysiwyg-color-green\">\u00a0\u2194 </span></b><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-color-green\">00</span></b></span></li><li><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-color-blue\">C</span></b></span><b><span class=\"wysiwyg-color-blue\">\u00a0\u2194 </span></b><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-color-blue\">01</span></b></span></li><li><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-color-purple\">G</span></b></span><b><span class=\"wysiwyg-color-purple\">\u00a0\u2194 </span></b><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-color-purple\">11</span></b></span></li><li><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-color-red\">T</span></b></span><b><span class=\"wysiwyg-color-red\">\u00a0\u2194 </span></b><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-color-red\">11</span></b></span></li></ul><p>Given a string of 0's and 1's, decode the message via the above mapping and print out the resulting decoded message to standard output.</p><p></p>", "subtitle_files": [], "source": {"execution_time_limit": 5, "code": "import random\n\ndef generate_seq(N):\n    return ''.join(random.choice(\"01\") for _ in range(N))\n\ndef generate():\n    tests = [\n             '00011011'\n            ]\n    tests += [generate_seq(100) for _ in range(10)]\n    return tests\n\n\ndef solve(dataset):\n    dataset = dataset.strip()\n    code = {'00':'A', '01':'C', '10':'G', '11':'T'}\n    s = ''\n    for i in range(0,len(dataset),2):\n        s += code[dataset[i:i+2]]\n    return s\n\n\ndef check(reply, clue):\n    if len(reply) == 0:\n        return 0, \"You didn't output anything. Are you sure you're outputting to cout?\"\n    reply = reply.strip()\n    clue = clue.strip()\n    if reply == clue:\n        return 1\n    else:\n        return 0, (\"Your code's output does not match the expected output\\n\\nCORRECT OUTPUT:\\n\" + clue + \"\\n\\nYOUR OUTPUT:\\n\" + reply)", "samples_count": 1, "execution_memory_limit": 256, "manual_memory_limits": [], "templates_data": "::c++11\n::header\n#include <iostream>\nusing namespace std;\n\n::code\nvoid decodeString(string message) {\n    // YOUR CODE HERE\n}\n\n\n::footer\nint main() {\n  string s;\n  getline(cin,s);\n  decodeString(s);\n  return 0;\n}", "is_memory_limit_scaled": true, "is_time_limit_scaled": true, "manual_time_limits": [], "test_archive": []}, "animation": null, "video": null, "tests_archive": "/api/step-sources/96250/tests", "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "code_templates": {"c++11": "void decodeString(string message) {\n    // YOUR CODE HERE\n}"}, "limits": {"c++11": {"time": 5, "memory": 256}}, "samples": [["00011011", "ACGT"]]}, "subtitles": {}}, "time": "2016-09-02T19:38:27.133150"}