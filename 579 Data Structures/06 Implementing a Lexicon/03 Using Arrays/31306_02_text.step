{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>Below is pseudocode to implement the three operations of a lexicon using an\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b>. Recall that, because \"find\" is our most used operation by far, we want to be able to use <b>Binary Search</b> to find elements, meaning\u00a0we definitely want to keep our <b><span class=\"wysiwyg-color-green\">Array</span></b> <b>sorted</b> and keep all elements in the <b><span class=\"wysiwyg-color-green\">Array</span></b> <b>adjacent</b> to one another (i.e., no gaps between filled cells).\u00a0In all three functions below, the backing <b><span class=\"wysiwyg-color-green\">Array</span></b>\u00a0is denoted as <span class=\"wysiwyg-font-tt\">array</span>.</p><p></p><pre><code class=\"cpp\"><b>find(word):   // Lexicon's \"find\" function\n</b>    return array.binarySearch(word) // call the backing Array's \"find\" function</code></pre><p></p><p></p><pre><code class=\"cpp\"><b>insert(word): // Lexicon's \"insert\" function, keeping the lexicon sorted\n</b>    array.sortedInsert(word)        // assuming the backing Array can do sorted insertions</code></pre><p></p><p></p><pre><code class=\"cpp\"><b>remove(word): // Lexicon's \"remove\" function\n</b>    array.remove(word)              // call the backing Array's \"remove\" function</code></pre><p></p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b>\u00a0By making sure we do sorted insertions, we are making our insertion algorithm slower. Why would we do this instead of just allocating extra space and always adding new elements to the end of the\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b>?<br></p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "121515", "time": "2016-09-14T00:13:22.520817"}