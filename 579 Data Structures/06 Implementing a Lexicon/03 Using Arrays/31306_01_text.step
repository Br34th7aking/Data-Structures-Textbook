{"time": "2016-09-20T20:58:59.680463", "block": {"name": "text", "subtitles": {}, "source": null, "subtitle_files": [], "feedback_wrong": "", "video": null, "animation": null, "feedback_correct": "", "tests_archive": null, "text": "<p>The second Data Structure we will discuss for implementation of a lexicon is the <b><span class=\"wysiwyg-color-green\">Array</span></b>. To refresh your memory, below are some important details regarding <b><span class=\"wysiwyg-color-green\">Arrays</span></b>:</p><p></p><ul><li>Because all of the slots of an\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b> are allocated adjacent to one another in memory, and because every slot of an\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b> is exactly the same size, we can find the exact memory address of any slot of the\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b> in O(1) time if we know the index (i.e., we have\u00a0<b>random access</b>)</li><li><b><span class=\"wysiwyg-color-green\">Arrays</span></b> cannot simply be \"resized,\" so if we were to want to insert new elements into an\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b> that is full, we would need to allocate a new\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b> of large enough size, and we would then need to copy over all elements from the old\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b> into the new one, which is a O(<i>n</i>) operation<br></li><li>If an\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b> is <b>unsorted</b>, to find an element, we potentially need to iterate over all\u00a0<i>n</i> elements, making this a\u00a0<b>O(<i>n</i>)</b> operation in the\u00a0<b>worst case</b></li><li>If an\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b> is\u00a0<b>sorted</b>, to find an element, because of\u00a0<b>random access</b>, we can perform a\u00a0<b>Binary Search</b> algorithm to find the element in\u00a0<b>O(log\u00a0<i>n</i>)</b> in the\u00a0<b>worst case</b></li></ul><p>Recall that we mentioned that we will very rarely be modifying our list of words. Thus, even though the time complexity to insert or remove elements in the worst case is O(<i>n</i>), because this occurs so infrequently, this slowness is effectively negligible for our purposes.</p><p>Now that we have reviewed the properties of the\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b>, we can begin to discuss how to actually use it to implement the three lexicon functions we previously described.</p>", "options": {}}, "id": "121422"}