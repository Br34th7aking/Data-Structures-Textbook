{"id": "122679", "block": {"name": "text", "tests_archive": null, "animation": null, "feedback_wrong": "", "subtitle_files": [], "video": null, "options": {}, "text": "<p>The <b>remove</b>\u00a0algorithm is extremely trivial once you understand the find algorithm. To remove a word\u00a0<i>key</i> from a\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>, simply perform the find algorithm. If you successfully find\u00a0<i>key</i>, simply remove the \"word node\" label from the node at which you end up.</p><p>Below is formal pseudocode for the remove algorithm of the <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>:</p><p></p><pre><code class=\"cpp\"><b>remove(key): // remove key if it exists in this TST\n</b>    u = root node of the TST\n    c = first letter of key\n    loop infinitely:\n        // left child\n        if c &lt; u.label:\n            if u has a left child:\n                u = u.leftChild\n            else:\n                return                            // key cannot exist in this TST\n\n        // right child\n        else if c &gt; u.label:\n            if u has a right child:\n                u = u.rightChild\n            else:\n                return                            // key cannot exist in this TST\n\n        // middle child\n        else:\n            if c is the last letter of key and u is a word-node:\n                remove the word-node label from u // found key, so remove it from the TST\n                return\n            else:\n                if u has a middle child:\n                    u = u.middleChild\n                else:\n                    return                        // key cannot exist in this TST</code></pre><p></p>", "source": null, "subtitles": {}, "feedback_correct": ""}, "time": "2016-09-12T22:33:04.687034"}