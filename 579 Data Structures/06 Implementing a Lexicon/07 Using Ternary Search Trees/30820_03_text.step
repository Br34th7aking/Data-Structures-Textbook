{"block": {"tests_archive": null, "feedback_correct": "", "subtitle_files": [], "text": "<p>To\u00a0<b>find</b> a word\u00a0<i>key</i>, we start our tree traversal at the root of the the <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>. Let's denote the current node as <i>u</i> and the current letter of\u00a0<i>key</i> as\u00a0<i>c</i>:</p><p></p><ul><li>If\u00a0<i>c</i> is less than\u00a0<i>u</i>'s label: If <i>u</i> has a left child,\u00a0traverse down to\u00a0<i>u</i>'s left child. Otherwise, we have failed (<i>key</i> does not exist in this\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>)</li><li>If\u00a0<i>c</i> is greater than\u00a0<i>u</i>'s label: If <i>u</i> has a\u00a0right child,\u00a0traverse down to\u00a0<i>u</i>'s right child. Otherwise, we have failed (<i>key</i> does not exist in this <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>)</li><li>If\u00a0<i>c</i> is equal to\u00a0<i>u</i>'s label: If\u00a0<i>c</i> is the last letter of\u00a0<i>key</i>, if <i>u</i> is labeled as a \"word node,\" we have successfully found\u00a0<i>key</i>\u00a0in our <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>; if not, we have failed. Otherwise, if <i>u</i> has a middle child,\u00a0traverse down to\u00a0<i>u</i>'s middle child and set\u00a0<i>c</i> to the next character of\u00a0<i>key</i>; if not, we have failed (<i>key</i> does not exist in this\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>)</li></ul><p></p><p>Below is formal pseudocode for the find\u00a0algorithm of the <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>:</p><p></p><pre><code class=\"cpp\"><b>find(key): // return True if key exists in this TST, otherwise return False\n</b>    u = root node of the TST\n    c = first letter of key\n    loop infinitely:\n        // left child\n        if c &lt; u.label:\n            if u has a left child:\n                u = u.leftChild\n            else:\n                return False     // key cannot exist in this TST\n\n        // right child\n        else if c &gt; u.label:\n            if u has a right child:\n                u = u.rightChild\n            else:\n                return False     // key cannot exist in this TST\n\n        // middle child\n        else:\n            if c is the last letter of key and u is a word-node:\n                return True      // we found key in this TST!\n            else:\n                if u has a middle child:\n                    u = u.middleChild\n                else:\n                    return False // key cannot exist in this TST</code></pre><p></p>", "feedback_wrong": "", "options": {}, "subtitles": {}, "name": "text", "source": null, "video": null, "animation": null}, "time": "2016-09-11T01:12:15.005328", "id": "122676"}