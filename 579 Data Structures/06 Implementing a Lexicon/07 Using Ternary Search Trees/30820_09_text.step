{"id": "122680", "time": "2016-09-09T17:03:09.496488", "block": {"subtitle_files": [], "text": "<p>The\u00a0<b>insert</b> algorithm also isn't too bad once you understand the find algorithm. To insert a word\u00a0<i>key</i> into a\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>, perform the find algorithm:</p><p></p><ul><li>If you're able to legally traverse through the tree for every letter of\u00a0<i>key</i> (which implies\u00a0<i>key</i> is a prefix of another word in the tree), simply label the node at which you end up as a \"word node\"</li><li>If you are performing the tree traversal and run into a case where you want to traverse left or right, but no such child exists, create a new left/right child labeled by the current letter of\u00a0<i>key</i>, and then create middle children labeled by each of the remaining letters of\u00a0<i>key</i></li><li>If you run into a case where you want to traverse down to a middle child, but no such child exists, simply create middle children labeled by each of the remaining letters of\u00a0<i>key</i><br></li></ul><p>Below is formal pseudocode for the insert algorithm of the <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>:</p><p></p><pre><code class=\"cpp\"><b>insert(key): // insert key into this TST\n</b>    u = root node of the TST\n    c = first letter of key\n    loop infinitely:\n        // left child\n        if c &lt; u.label:\n            if u has a left child:\n                u = u.leftChild\n            else:\n                u.leftChild = new node labeled by c\n                u = u.leftChild\n                iterate c over the remaining letters of key:\n                    u.middleChild = new node labeled by c\n                    u = u.middleChild\n                label u as a word-node     // inserted key into the TST\n\n        // right child\n        else if c &gt; u.label:\n            if u has a right child:\n                u = u.rightChild\n            else:\n                u.rightChild = new node labeled by c\n                u = u.rightChild\n                iterate c over the remaining letters of key:\n                    u.middleChild = new node labeled by c\n                    u = u.middleChild\n                label u as a word-node     // inserted key into the TST\n\n        // middle child\n        else:\n            if c is the last letter of key:\n                label u as a word-node     // inserted key into the TST\n            else:\n                if u has a middle child:\n                    u = u.middleChild\n                else:\n                    iterate c over the remaining letters of key:\n                        u.middleChild = new node labeled by c\n                        u = u.middleChild\n                    label u as a word-node // insert key into the TST</code></pre><p></p>", "feedback_correct": "", "tests_archive": null, "subtitles": {}, "source": null, "name": "text", "video": null, "feedback_wrong": "", "options": {}, "animation": null}}