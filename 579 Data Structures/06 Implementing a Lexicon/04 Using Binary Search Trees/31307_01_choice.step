{"block": {"animation": null, "source": {"sample_size": 4, "is_html_enabled": false, "preserve_order": true, "is_multiple_choice": false, "is_always_correct": false, "options": [{"is_correct": false, "text": "Regular Binary Search Tree", "feedback": ""}, {"is_correct": false, "text": "Randomized Search Tree", "feedback": ""}, {"is_correct": true, "text": "AVL Tree", "feedback": ""}, {"is_correct": false, "text": "Red-Black Tree", "feedback": ""}]}, "text": "<p><b><span class=\"wysiwyg-color-purple\">EXERCISE BREAK:</span></b>\u00a0The third Data Structure we will discuss for implementation of a lexicon is the <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>. Given that we will be doing significantly more \"find\" operations than \"insert\" or \"remove\" operations, which type of a\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> would be the optimal choice for us <i>\ufeffin practice</i>?<br></p>", "feedback_correct": "", "feedback_wrong": "", "video": null, "name": "choice", "subtitles": {}, "subtitle_files": [], "options": {}, "tests_archive": null}, "id": "121601", "time": "2016-09-20T01:14:04.842755"}