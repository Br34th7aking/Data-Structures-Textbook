{"id": "121426", "time": "2016-09-09T17:02:06.320061", "block": {"subtitle_files": [], "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b>\u00a0<b>Implementing a Lexicon Using a Doubly-Linked List</b></p><p>In C++, the <span class=\"wysiwyg-font-tt\">list</span> container is implemented as a\u00a0<b><span class=\"wysiwyg-color-blue\">Doubly-Linked List</span></b>. In this code challenge, your task is to implement the three functions of the lexicon ADT described previously in C++ using the <span class=\"wysiwyg-font-tt\">list</span> container. Note that we mentioned two possible \"insert\" functions in the previous step (<span class=\"wysiwyg-font-tt\">insertSorted</span> and <span class=\"wysiwyg-font-tt\">insertUnsorted</span>). For this challenge, feel free to implement either one. Below is the C++ <span class=\"wysiwyg-font-tt\">Lexicon</span> class we have declared for you:</p><p></p><pre><code class=\"cpp\">class Lexicon {\n    public:\n        list&lt;string&gt; linkedList;  // instance variable list object\n        bool find(string word);   // \"find\" function of Lexicon class\n        void insert(string word); // \"insert\" function of Lexicon class\n\u00a0 \u00a0 \u00a0 \u00a0 void remove(string word); // \"remove\" function of Lexicon class\n};</code></pre><p></p><p>If you need help using the C++ <span class=\"wysiwyg-font-tt\">list</span>, be sure to look at the <a rel=\"nofollow\" href=\"http://www.cplusplus.com/reference/list/list/\">C++ Reference</a>.</p>", "feedback_correct": "", "tests_archive": "/api/step-sources/121426/tests", "subtitles": {}, "source": {"is_memory_limit_scaled": true, "is_time_limit_scaled": true, "code": "def generate():\n    tests = [\"N/A\"]\n    return tests\n\n\ndef solve(dataset):\n    return \"N/A\"\n\n\ndef check(reply, clue):\n    reply = reply.strip()\n    if reply == \"N/A\" or reply == \"PASS\":\n        return 1\n    elif reply == \"FIND\":\n        return 0,\"Your 'find' function is incorrect.\\n\"\n    elif reply == \"INSERT\":\n        return 0,\"Your 'insert' function is incorrect.\\n\"\n    elif reply == \"REMOVE\":\n        return 0,\"Your 'remove' function is incorrect.\\n\"\n    else:\n        return 0", "execution_memory_limit": 256, "manual_time_limits": [], "samples_count": 1, "test_archive": [], "manual_memory_limits": [], "execution_time_limit": 5, "templates_data": "::c++11\n::header\n#include <list>\n#include <string>\n#include <stdlib.h>\n#include <iostream>\nusing namespace std;\n\nclass Lexicon {\n    public:\n        list<string> linkedList;  // instance variable list object\n        bool find(string word);   // \"find\" function of Lexicon class\n        void insert(string word); // \"insert\" function of Lexicon class\n        void remove(string word); // \"remove\" function of Lexicon class\n};\n\n::code\n/* Return true if Lexicon contains word, otherwise return false */\nbool Lexicon::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into Lexicon (return nothing) */\nvoid Lexicon::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Lexicon (return nothing) */\nvoid Lexicon::remove(string word) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    // Initialize Lexicon object\n    Lexicon d;\n    d.linkedList.push_back(\"ALEXANDERNIEMAMOSHIRI\");\n    \n    // Test \"find\" function\n    if(!d.find(\"ALEXANDERNIEMAMOSHIRI\") || d.find(\"NIEMA\")) {\n        cout << \"FIND\"; exit(0);\n    }\n    \n    // Test \"insert\" function\n    d.insert(\"NIEMA\");\n    if(!d.find(\"NIEMA\")) {\n        cout << \"INSERT\"; exit(0);\n    }\n    \n    // Test \"remove\" function\n    d.remove(\"NIEMA\");\n    if(d.find(\"NIEMA\")) {\n        cout << \"REMOVE\"; exit(0);\n    }\n    \n    // All tests passed\n    cout << \"PASS\";\n}"}, "name": "code", "video": null, "feedback_wrong": "", "options": {"code_templates": {"c++11": "/* Return true if Lexicon contains word, otherwise return false */\nbool Lexicon::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into Lexicon (return nothing) */\nvoid Lexicon::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Lexicon (return nothing) */\nvoid Lexicon::remove(string word) {\n    /* YOUR CODE HERE */\n}"}, "samples": [["N/A", "N/A"]], "execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c++11": {"memory": 256, "time": 5}}}, "animation": null}}