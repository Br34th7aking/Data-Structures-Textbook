{"id": "121435", "time": "2016-09-02T18:30:07.510783", "block": {"animation": null, "text": "<p>As you might have inferred, the\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b> might not be the best choice for implementing the lexicon ADT we described. To use a\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, we have two implementation choices.</p><p>We can choose to keep the elements\u00a0<b>unsorted</b>. If we were to do so, the\u00a0<b>worst-case time complexity</b> of\u00a0<b>find</b> and <b>remove</b> operations would be\u00a0<b>O(<i>n</i>)</b>, and that of\u00a0<b>insertion</b> operations would be\u00a0<b>O(1)</b>. However, if we were to iterate over the elements of the list, the elements would not be in any meaningful order.</p><p>Alternatively, we can choose to keep the elements\u00a0<b>sorted</b>. If we were to do so, the <b>worst-case time complexity</b>\ufeff of\u00a0<b>find</b> and <b>remove</b> operations would still be\u00a0<b>O(<i>n</i>)</b>,\u00a0but now, that of\u00a0<b>insertion</b> operations would\u00a0<i>also</i> be\u00a0<b>O(<i>n</i>)</b>. However, if we were to iterate over the elements of the list, the elements\u00a0<i>would</i> be in a meaningful order: they would be in <b>alphabetical order</b>. Also, we could choose if we wanted to iterate in\u00a0<i>ascending</i> alphabetical order or in\u00a0<i>descending</i> alphabetical order by simply choosing from which end of the\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>,\u00a0<i>head</i> or\u00a0<i>tail</i>, we wanted to begin our iteration.</p><p>In terms of memory efficiency, a\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>\u00a0has exactly one node for each word, meaning the <b>space complexity</b>\u00a0is <b>O(</b><i><b>n</b></i><b>)</b>, which is as good as we can get if we want to store all <i>n</i>\u00a0elements.<br></p><p>In general, we're hoping that we have instilled enough intuition in you such that you shudder slightly every time you hear O(<i>n</i>) with regard to data structures, as we have explored so many different data structures that allow us to do better. Also, in this case specifically, recall that we explicitly mentioned that \"find\" was going to be our most frequently used operation by far. Therefore, even though we could potentially have O(1) \"insert\" operations, the fact that \"find\" operations are O(<i>n</i>) in this implementation approach should make you frustrated, or even angry, with us for wasting your precious time.</p><p>In the next section, we will discuss a slightly better approach for implementing our lexicon ADT: the\u00a0<b><span class=\"wysiwyg-color-green\">Array</span></b>.</p>", "options": {}, "feedback_correct": "", "source": null, "subtitle_files": [], "name": "text", "feedback_wrong": "", "subtitles": {}, "tests_archive": null, "video": null}}