{"time": "2016-09-05T12:33:42.373443", "block": {"tests_archive": "/api/step-sources/121892/tests", "animation": null, "feedback_correct": "", "subtitles": {}, "source": {"samples_count": 1, "execution_time_limit": 5, "execution_memory_limit": 256, "code": "def generate():\n    tests = [\"N/A\"]\n    return tests\n\n\ndef solve(dataset):\n    return \"N/A\"\n\n\ndef check(reply, clue):\n    reply = reply.strip()\n    if reply == \"N/A\" or reply == \"PASS\":\n        return 1\n    elif reply == \"FIND\":\n        return 0,\"Your 'find' function is incorrect.\\n\"\n    elif reply == \"INSERT\":\n        return 0,\"Your 'insert' function is incorrect.\\n\"\n    elif reply == \"REMOVE\":\n        return 0,\"Your 'remove' function is incorrect.\\n\"\n    else:\n        return 0", "manual_memory_limits": [], "is_memory_limit_scaled": true, "manual_time_limits": [], "is_time_limit_scaled": true, "test_archive": [], "templates_data": "::c++11\n::header\n#include <string>\n#include <iostream>\nusing namespace std;\n\nclass Node {\n    public:\n        bool word = false;\n        Node* children[26]; // children[0] corresponds to 'a', children[1] to 'b', etc.\n        Node();\n};\n\nNode::Node(void) {\n    for(int i = 0; i < 26; ++i) {\n        children[i] = NULL;\n    }\n}\n\nclass MultiwayTrie {\n    public:\n        Node* root = new Node();  // root node of MultiwayTrie\n        bool find(string word);   // \"find\" function of MultiwayTrie class\n        void insert(string word); // \"insert\" function of MultiwayTrie class\n        void remove(string word); // \"remove\" function of MultiwayTrie class\n};\n\n/* Return true if Lexicon contains word, otherwise return false */\nbool MultiwayTrie::find(string word) {\n    Node* curr = root;\n    for(int i = 0; i < word.length(); ++i) {\n        int c = word[i] - (int)'a';\n        if(curr->children[c] != NULL) {\n            curr = curr->children[c];\n        }\n        else {\n            return false;\n        }\n    }\n    return curr->word;\n}\n\n/* Insert word into Lexicon (return nothing) */\nvoid MultiwayTrie::insert(string word) {\n    Node* curr = root;\n    for(int i = 0; i < word.length(); ++i) {\n        int c = word[i] - (int)'a';\n        if(curr->children[c] == NULL) {\n            curr->children[c] = new Node();\n        }\n        curr = curr->children[c];\n    }\n    curr->word = true;\n}\n\n/* Remove word from Lexicon (return nothing) */\nvoid MultiwayTrie::remove(string word) {\n    Node* curr = root;\n    for(int i = 0; i < word.length(); ++i) {\n        int c = word[i] - (int)'a';\n        if(curr->children[c] != NULL) {\n            curr = curr->children[c];\n        }\n        else {\n            return;\n        }\n    }\n    curr->word = false;\n}\n\nclass Lexicon {\n    public:\n        MultiwayTrie mwt;         // instance variable MultiwayTrie object\n        bool find(string word);   // \"find\" function of Lexicon class\n        void insert(string word); // \"insert\" function of Lexicon class\n        void remove(string word); // \"remove\" function of Lexicon class\n};\n\n::code\n/* Return true if Lexicon contains word, otherwise return false */\nbool Lexicon::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into Lexicon (return nothing) */\nvoid Lexicon::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Lexicon (return nothing) */\nvoid Lexicon::remove(string word) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    // Initialize Lexicon object\n    Lexicon d;\n    d.mwt.insert(\"ALEXANDERNIEMAMOSHIRI\");\n    \n    // Test \"find\" function\n    if(!d.find(\"ALEXANDERNIEMAMOSHIRI\") || d.find(\"NIEMA\")) {\n        cout << \"FIND\"; exit(0);\n    }\n    \n    // Test \"insert\" function\n    d.insert(\"NIEMA\");\n    if(!d.find(\"NIEMA\")) {\n        cout << \"INSERT\"; exit(0);\n    }\n    \n    // Test \"remove\" function\n    d.remove(\"NIEMA\");\n    if(d.find(\"NIEMA\")) {\n        cout << \"REMOVE\"; exit(0);\n    }\n    \n    // All tests passed\n    cout << \"PASS\";\n}"}, "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b>\u00a0<b>Implementing a Lexicon Using a Multiway Trie</b></p><p>Unfortunately, C++ does not natively have a <b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b> implementation for us to use in our Lexicon class implementation. Fortunately for you, we have defined the following MultiwayTrie class for you to use (the same class you implemented on the previous step):</p><p></p><pre><code class=\"cpp\">class MultiwayTrie {\n    public:\n        bool find(string word);   // \"find\" function of MultiwayTrie class\n        void insert(string word); // \"insert\" function of MultiwayTrie class\n\u00a0 \u00a0 \u00a0 \u00a0 void remove(string word); // \"remove\" function of MultiwayTrie class\n};<br></code></pre><p></p><p>In this challenge, you will use the <span class=\"wysiwyg-font-tt\">MultiwayTrie</span> class we defined for you to implement the <span class=\"wysiwyg-font-tt\">Lexicon</span> class. Below is the C++ <span class=\"wysiwyg-font-tt\">Lexicon</span> class we have declared for you:</p><p></p><pre><code class=\"cpp\">class Lexicon {\n    public:\n        MultiwayTrie mwt;         // instance variable MultiwayTrie object\n        bool find(string word);   // \"find\" function of Lexicon class\n        void insert(string word); // \"insert\" function of Lexicon class\n\u00a0 \u00a0 \u00a0 \u00a0 void remove(string word); // \"remove\" function of Lexicon class\n};</code></pre>", "options": {"execution_memory_limit": 256, "limits": {"c++11": {"time": 5, "memory": 256}}, "code_templates": {"c++11": "/* Return true if Lexicon contains word, otherwise return false */\nbool Lexicon::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into Lexicon (return nothing) */\nvoid Lexicon::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Lexicon (return nothing) */\nvoid Lexicon::remove(string word) {\n    /* YOUR CODE HERE */\n}"}, "samples": [["N/A", "N/A"]], "execution_time_limit": 5}, "subtitle_files": [], "name": "code", "video": null, "feedback_wrong": ""}, "id": "121892"}