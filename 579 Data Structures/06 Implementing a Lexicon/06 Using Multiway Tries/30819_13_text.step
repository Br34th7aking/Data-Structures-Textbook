{"block": {"animation": null, "source": null, "text": "<p>We previously discussed using a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> to implement a lexicon, which would allow us to perform find, insert, and remove operations with an\u00a0<i>average</i>-case time complexity of O(<i>k</i>), assuming we take into account the time it takes to compute the hash value of a string of length\u00a0<i>k</i> (where\u00a0<i>k</i> is the length of the longest word in the dictionary). However, with this approach, it would be impossible for us to iterate through the words in the lexicon in any meaningful order.</p><p>In this chapter, we have now discussed using a\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b> to implement a lexicon, which allows us to perform find, insert, and remove operations with a\u00a0<b>worst-case time complexity</b> of\u00a0<b>O(<i>k</i>)</b>. Also, because of the structure of a\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>, we can easily and efficiently iterate through the words in the lexicon in alphabetical order (either ascending or descending order) by performing a\u00a0<b><span class=\"wysiwyg-color-green\">pre-order traversal</span></b>. We can use this exact\u00a0<b><span class=\"wysiwyg-color-green\">pre-order traversal</span></b> technique to create\u00a0<b>auto-complete</b> functionality for our lexicon.</p><p>However,\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Tries</span></b> are\u00a0<i>extremely</i> <b>inefficient</b> in terms of\u00a0<b>space usage</b>: in order to have fast access to edges coming out of a given node <i>u</i>, we need to allocate space for each of the |\u03a3| possible edges that could theoretically come out of\u00a0<i>u</i>. If our trie is relatively dense, this space usage is tolerable, but if our trie is relatively sparse, there will be a\u00a0<i>lot</i> of space wasted in terms of empty space for possible edges.</p><p>In the next section, we will discuss a data structure that lets us obtain a time efficiency <i>close</i> to that of a\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>, but without the terrible space requirement: the\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>.</p>", "feedback_correct": "", "feedback_wrong": "", "video": null, "name": "text", "subtitles": {}, "subtitle_files": [], "options": {}, "tests_archive": null}, "id": "121893", "time": "2016-09-20T01:14:34.943770"}