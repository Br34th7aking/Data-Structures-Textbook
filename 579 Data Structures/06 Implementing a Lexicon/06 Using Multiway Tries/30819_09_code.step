{"id": "121828", "time": "2016-09-01T21:53:16.016030", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {"execution_memory_limit": 256, "limits": {"c++11": {"memory": 256, "time": 5}}, "execution_time_limit": 5, "samples": [["N/A", "N/A"]], "code_templates": {"c++11": "/* Return true if MultiwayTrie contains word, otherwise return false */\nbool MultiwayTrie::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into MultiwayTrie (return nothing) */\nvoid MultiwayTrie::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from MultiwayTrie (return nothing) */\nvoid MultiwayTrie::remove(string word) {\n    /* YOUR CODE HERE */\n}"}}, "name": "code", "subtitles": {}, "tests_archive": "/api/step-sources/121828/tests", "source": {"execution_memory_limit": 256, "templates_data": "::c++11\n::header\n#include <string>\n#include <iostream>\nusing namespace std;\n\nclass Node {\n    public:\n        bool word = false;\n        Node* children[26]; // children[0] corresponds to 'a', children[1] to 'b', etc.\n        Node();\n};\n\nNode::Node(void) {\n    for(int i = 0; i < 26; ++i) {\n        children[i] = NULL;\n    }\n}\n\nclass MultiwayTrie {\n    public:\n        Node* root = new Node();  // root node of MultiwayTrie\n        bool find(string word);   // \"find\" function of MultiwayTrie class\n        void insert(string word); // \"insert\" function of MultiwayTrie class\n        void remove(string word); // \"remove\" function of MultiwayTrie class\n};\n\n::code\n/* Return true if MultiwayTrie contains word, otherwise return false */\nbool MultiwayTrie::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into MultiwayTrie (return nothing) */\nvoid MultiwayTrie::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from MultiwayTrie (return nothing) */\nvoid MultiwayTrie::remove(string word) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    // Initialize MultiwayTrie object\n    MultiwayTrie d;\n    \n    // Test \"insert\" and \"find\" functions\n    d.insert(\"NIEMA\");\n    if(d.find(\"ALEXANDERNIEMAMOSHIRI\") || !d.find(\"NIEMA\")) {\n        cout << \"INSERTFIND\"; exit(0);\n    }\n    \n    // Test \"remove\" function\n    d.remove(\"NIEMA\");\n    if(d.find(\"NIEMA\")) {\n        cout << \"REMOVE\"; exit(0);\n    }\n    \n    // All tests passed\n    cout << \"PASS\";\n}", "code": "def generate():\n    tests = [\"N/A\"]\n    return tests\n\n\ndef solve(dataset):\n    return \"N/A\"\n\n\ndef check(reply, clue):\n    reply = reply.strip()\n    if reply == \"N/A\" or reply == \"PASS\":\n        return 1\n    elif reply == \"INSERTFIND\":\n        return 0,\"Either your 'insert' or your 'find' function is incorrect.\\n\"\n    elif reply == \"REMOVE\":\n        return 0,\"Your 'remove' function is incorrect.\\n\"\n    else:\n        return 0", "is_time_limit_scaled": true, "manual_memory_limits": [], "manual_time_limits": [], "execution_time_limit": 5, "test_archive": [], "is_memory_limit_scaled": true, "samples_count": 1}, "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b>\u00a0<b>Implementing a Multiway Trie</b></p><p>In this challenge, you will be implementing a\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b> with\u00a0\u03a3 = {a, ..., z}. We will define a <span class=\"wysiwyg-font-tt\">Node</span> class for you, and you will use it in your implementation of a\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>.</p><p>Below is the C++ <span class=\"wysiwyg-font-tt\">Node</span> class we have defined for you:</p><p></p><pre><code class=\"cpp\">class Node {\n    public:\n        bool word = false;  // Node's \"word\" label\n        Node* children[26]; // children[0] corresponds to 'a', children[1] to 'b', etc.\n        Node();             // Node constructor\n}\n\nNode::Node(void) {<br>\u00a0 \u00a0 for(int i = 0; i &lt; 26; ++i) {<br>\u00a0 \u00a0 \u00a0 \u00a0 children[i] = NULL;<br>\u00a0 \u00a0 }<br>}\n</code></pre><p></p><p>Below is the C++ <span class=\"wysiwyg-font-tt\">Lexicon</span> class we have declared for you:</p><p></p><pre><code class=\"cpp\">class MultiwayTrie {\n    public:\n        Node* root = new Node();  // root node of Multiway Trie\n        bool find(string word);   // \"find\" function of MultiwayTrie class\n        void insert(string word); // \"insert\" function of MultiwayTrie class\n\u00a0 \u00a0 \u00a0 \u00a0 void remove(string word); // \"remove\" function of MultiwayTrie class\n};</code></pre>", "feedback_correct": "", "video": null, "animation": null}}