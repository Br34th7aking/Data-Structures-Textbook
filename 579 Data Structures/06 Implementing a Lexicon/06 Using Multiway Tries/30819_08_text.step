{"id": "121894", "block": {"name": "text", "tests_archive": null, "animation": null, "feedback_wrong": "", "subtitle_files": [], "video": null, "options": {}, "text": "<p>Because of the clean structure of a\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>, we can iterate through the elements in the trie in sorted order by performing a\u00a0<b><span class=\"wysiwyg-color-green\">pre-order traversal</span></b> on the trie. Below is the pseudocode to recursively output all words in a\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b> in ascending or descending alphabetical order (we would call either function on the root):</p><p></p><pre><code class=\"cpp\"><b>ascendingPreOrder(node): // Recursively iterate over the words in ascending order\n</b>    if node is a word-node:\n        output the word labeled by path from root to node\n    for each child of node (in ascending order):\n        ascendingPreOrder(child)\n</code></pre><p></p><p></p><pre><code class=\"cpp\"><b>ascendingPreOrder(node): // Recursively iterate over the words in descending order\n</b>    if node is a word-node:\n        output the word labeled by path from root to node\n    for each child of node (in descending order):\n        ascendingPreOrder(child)<br></code></pre><p></p><p>We can use this recursive <b><span class=\"wysiwyg-color-green\">pre-order traversal</span></b> technique to provide another useful function to our\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>: auto-complete. If we were given a prefix and we wanted to output all words in our\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b> that start with this prefix, we can traverse down the trie along the path labeled by the prefix, and we can then call the recursive <b><span class=\"wysiwyg-color-green\">pre-order traversal</span></b> function on the node we reached.</p>", "source": null, "subtitles": {}, "feedback_correct": ""}, "time": "2016-09-12T22:32:54.522511"}