{"id": "121817", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Up until this point, we have discussed\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Tables</span></b> and how they work: you have some array of length\u00a0<i>M</i>, and to insert a key\u00a0<i>k</i> into the array, you\u00a0<b><span class=\"wysiwyg-color-blue\">hash</span></b>\u00a0<i>k</i> to some index in the array and perform the insertion. However, we even though we addressed the fact that\u00a0<i>collisions</i> can occur (i.e., multiple keys can\u00a0<b><span class=\"wysiwyg-color-blue\">hash</span></b> to the same index in the array), we chose to effectively ignore them. We emphasized that\u00a0<i>collisions</i> are the cause of slowness in a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, but aside from just repeatedly stating that collisions are bad for performance, we just glossed over them.</p><p>In this section, we will begin to chip away at\u00a0<i>collisions</i> by focusing on <i>why they occur</i>, and as a result,\u00a0<i>how</i> we can go about\u00a0<i>avoiding</i> (or at least\u00a0<i>minimizing</i>) them. We still won't be discussing <i>why they cause slowness</i> in a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> nor how to go about\u00a0<i>resolving</i> them, but these equally important topics will be extensively discussed soon. For now, just remember that collisions are bad for performance, and because of this, we want to design our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> in such a way that we\u00a0minimize them.</p><p>Thus far, we have witnessed two components of a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> that we are free to choose:</p><p></p><ul><li>A\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> is backed by an array, so we have the power to choose the\u00a0<b>array's size</b> (i.e., the\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table's</span></b>\u00a0<i>capacity</i>)</li><li>A\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> computes indices from keys, so we have the power to choose the\u00a0<b><span class=\"wysiwyg-color-green\">hash function</span></b> that does this index mapping</li></ul><p>To figure out how we can optimally design these two parameters of a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, we will take a journey through the realm of probability theory to see how we can probabilistically minimize collisions. Formally, we will try to find a way to compute the\u00a0<i>expected number</i>\ufeff of collisions, and we will then attempt to minimize this value.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-07T23:38:59.089665"}