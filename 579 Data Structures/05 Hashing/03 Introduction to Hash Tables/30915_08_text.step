{"id": "122037", "time": "2016-09-01T21:51:30.941777", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>Hopefully you didn't spend too much time on the <b><span class=\"wysiwyg-color-red\">STOP and Think</span></b> in the previous step, because the answer is there really is\u00a0<i>no</i> good way of printing things in sorted order in a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. Why? Because <b><span class=\"wysiwyg-color-blue\">keys</span></b> are <b>not</b> sorted in this data structure! This is very different from a lot of the data structures that we have discussed so far (such as trees) where we maintained an ordering property throughout inserting elements. <br></p><p>So in the example given in the previous step, if we were to use an iterator to iterate through the <b><span class=\"wysiwyg-color-blue\">keys</span></b> in our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, we would expect the output to be \"F B N.\"</p><p>What if we were to insert the numbers 1-10 in an arbitrary <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b><span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">; could we then expect the <b><span class=\"wysiwyg-color-blue\">keys\u00a0</span></b></span><span class=\"wysiwyg-color-black\">to be in sorted order? The answer is no! Why? Because we have no clue exactly what hash value the underlying\u00a0<b><span class=\"wysiwyg-color-green\">hash function</span></b> is producing in order to map the key to an index. For example, if\u00a0$  H(k) = 2^k\\ \\%\\ M  $ then we would expect to see:</span></span></p><img alt=\"\" src=\"https://ucarecdn.com/4baf7310-ee9a-4e19-bd21-c0010f9b5747/\" width=\"544\" height=\"312\">", "feedback_correct": "", "video": null, "animation": null}}