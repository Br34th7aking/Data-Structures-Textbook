{"id": "121914", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Hopefully you found the previous step to be pretty cool: we have now found a way to take a key of <i>any</i> type and have it map to a valid index in an array, all thanks to our <b><span class=\"wysiwyg-color-green\">hash function</span></b>.</p><p>Moreover, we are now able to find the key in constant time because we know exactly where we expect it to be, also because of our <b><span class=\"wysiwyg-color-green\">hash function</span></b>! <span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">Finding the letter 'A' in our</span></span> <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>\u00a0(which should be successful) would go through the process below (note how similar it is to insert):</p><p><img alt=\"\" src=\"https://ucarecdn.com/7730aec4-bd4d-48e8-a2e2-c109915c6988/\"></p><p>Similarly, attempting to find the letter 'E' in our\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> (which should fail) would be just as easy:</p><p><img alt=\"\" src=\"https://ucarecdn.com/5394e27f-5c65-4f6e-a0b8-41167bd9303b/\"></p><p>Note that we didn't have to resort to linearly searching or even using some optimized search algorithm such as binary search to find the key. Instead, we were able to find the key in constant time. It turns out that we got lucky with this simple example, but it turns out that we can formally prove that, if we design our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> intelligently, the <i>average</i>-case\u00a0time complexity to find an element is O(1) (we will later see why the <i>worst</i>-case time complexity is <i>not</i> constant-time).</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-07T23:38:49.684916"}