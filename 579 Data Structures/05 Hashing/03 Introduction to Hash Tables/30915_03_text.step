{"id": "121914", "time": "2016-09-01T21:51:26.486491", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "Hopefully you find the previous step to be pretty cool; we have now found a way to take a\u00a0<b><span class=\"wysiwyg-color-blue\">key</span>\u00a0</b>of <i>any</i> type and have it map to a valid index in an array, all thanks to our <b><span class=\"wysiwyg-color-green\">hash function</span></b>.<br><br>Moreover, we are now able to find the <b><span class=\"wysiwyg-color-blue\">key</span></b> in constant time because we know exactly where we expect it to be, also because of our <b><span class=\"wysiwyg-color-green\">hash function</span></b>! <span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">Finding the letters A and E in our</span></span> <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> would go through the process below (note how similar it is to insert):<br><br><img alt=\"\" src=\"https://ucarecdn.com/ebae77d5-4c52-44c9-9a7c-bed0e4c0f846/\" width=\"581\" height=\"167\"><br><img alt=\"\" src=\"https://ucarecdn.com/1f0c6860-9da1-4bbf-86dd-3572ede08321/\" width=\"584\" height=\"159\"><br>Note that we didn't have to resort to linearly searching or even using some optimized search such as binary search to find the <b><span class=\"wysiwyg-color-blue\">key</span></b>. Consequently, we say that the average time complexity to find an element is constant (we will see in the later lessons why the worst case time complexity is <i>not</i>\ufeff constant).<br>", "feedback_correct": "", "video": null, "animation": null}}