{"id": "122040", "time": "2016-09-01T21:51:31.863002", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "In C++, <span class=\"wysiwyg-color-black\">a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> is called an <a rel=\"nofollow\" href=\"http://www.cplusplus.com/reference/unordered_set/unordered_set/\">unordered_set</a>. The name should be pretty intuitive since our <i>set</i> of <b><span class=\"wysiwyg-color-blue\">keys</span></b> is unordered. The C++ code to implement a simple </span><span class=\"wysiwyg-color-purple\"><b>Hash Table</b></span><b> </b><span class=\"wysiwyg-color-black\">would be:</span> <br><p><code>\n</code></p><pre><code><pre><code class=\"cpp\"><pre><code class=\"cpp\"><pre><code>#include&lt;unordered_set&gt;<br>unordered_set&lt;std::string&gt; animals = {\"Giraffe\",\"Polar Bear\",\"Tucan\"};</code></pre></code></pre></code></pre></code></pre><br>If we wanted to easily iterate through the <b>keys</b> we have stored, we would use an iterator like so:<br><pre><code><pre><code>for ( auto it = animals.begin(); it != animals.end(); ++it ) {\n    std::cout &lt;&lt; \" \" &lt;&lt; *it;\n    std::cout &lt;&lt; std::endl;\n}\n\n//Output:\n//Tucan\n//Giraffe\n//Polar Bear</code></pre></code></pre><br>Notice that the output above is unsorted, just as we expected!<br><br><b><span class=\"wysiwyg-color-red\">Note: </span></b>If we wanted to insert a <b><span class=\"wysiwyg-color-blue\">key</span></b> that was a custom class, we would need to overload C++'s <b><span class=\"wysiwyg-color-green\">hash function</span> </b>and <b>key equality </b>method<b> </b>in order to have the unordered_set be able to properly hash the custom class.<br>", "feedback_correct": "", "video": null, "animation": null}}