{"id": "121805", "time": "2016-09-01T21:51:28.279715", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>In general, a <b><b><span class=\"wysiwyg-color-purple\">Hash Table</span></b></b> needs to be able implement the following set of functions:<br></p><ul><li><b><span class=\"wysiwyg-font-tt\">insert(key)</span></b></li><li><b><span class=\"wysiwyg-font-tt\">find(key)</span></b></li><li><b><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-font-tt\">delete(key)</span></b><br></span></b></li><li><b><span class=\"wysiwyg-font-tt\">hashFunction(key)</span></b><span class=\"wysiwyg-font-tt\">: to produce a hash value for a key to use to map to a valid index</span><b><span class=\"wysiwyg-font-tt\"><br></span></b></li><li><b><span class=\"wysiwyg-font-tt\">key_equality(key1, key2):</span></b><span class=\"wysiwyg-font-tt\"> to check if two keys are equal, to avoid duplicate insertions<br></span></li></ul><p></p><p>Below is pseudocode for the \"insert\" operation of a\u00a0<b><b><span class=\"wysiwyg-color-purple\">Hash Table</span></b></b>. Note that this is a simplified version of the \"insert\" operation as we do not allow a <b><span class=\"wysiwyg-color-blue\">key</span></b> to be inserted if another <b><span class=\"wysiwyg-color-blue\">key</span></b> is already at its index. We will discover later on that this is usually not the approach taken.\u00a0</p><p></p><pre><code class=\"python\"><b>insert(key): #</b>return true upon successful insertion<b>\n\n    </b>index = hashFunction(key) \n\n    if arr is full:\n        return false\n\n    # if this is a duplicate insertion\n    if arr[index] == key:\n        return false\n\n    else if arr[index] is empty:\n        arr[index] = key\n        return true\n\n    # there is another key at that index\n    else:\n        return false</code></pre><br><p></p><p>Below is pseudocode for the \"find\" operation of a <b><b><span class=\"wysiwyg-color-purple\">Hash Table</span></b></b>. Note that this \"find\" operation is also simplified, as it is based upon the simplified premise of the \"insert\" function above (i.e., we only expect to find the key in 1 location, which we will later see is usually not the approach taken).<br></p><p><code class=\"cpp\"><b>\n</b></code></p><pre><code class=\"python\">find(key): #return true upon successful find\n\n    index = hashFunction(key) \n\n    return arr[index] == key</code></pre><code class=\"cpp\"></code><p></p><p></p><p></p>", "feedback_correct": "", "video": null, "animation": null}}