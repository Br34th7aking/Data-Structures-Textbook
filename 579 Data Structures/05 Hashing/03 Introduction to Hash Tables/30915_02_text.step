{"id": "118623", "time": "2016-09-01T21:51:25.638508", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "A <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> can be thought as a collection of items that on average can be retrieved really fast. A <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> can be implemented using an array and we thus more formally define\u00a0a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> to be an array of size <i>M</i> that stores <b><span class=\"wysiwyg-color-blue\">keys</span></b> <i>k</i>.<br><br>For example, suppose we would like have a <b><span class=\"wysiwyg-color-purple\">Hash Table </span></b>of size 5 that stores letters as <b><span class=\"wysiwyg-color-blue\">keys</span></b>. We would choose a  <b><span class=\"wysiwyg-color-green\">hash function</span></b>\n that takes in the ASCII values of letters and maps them to indexes (e.g. 'A'-&gt; index 0, 'B' -&gt; index 1, etc.). Since <i>M</i> = 5, we need to make sure that any ASCII values we insert into the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> will always map to a valid index (a number 0 - 4). As a result we choose the   <b><span class=\"wysiwyg-color-green\">hash function</span></b>\n to be H(<i>k</i>) = <i>k</i> % M, where <i>k </i>is the<b> <span class=\"wysiwyg-color-blue\">key </span></b>and <i>M</i> is the size of the table.\u00a0<span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\"><br><br>Inserting the letter A into our</span></span> <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> would go through this process:<br><br><img alt=\"\" src=\"https://ucarecdn.com/2ef601a6-f150-46d6-909a-eddead00eb75/\" width=\"713\" height=\"208\"><br>The rest of our insertions would look like this:<br><br><img alt=\"\" src=\"https://ucarecdn.com/a2df7132-0608-4a0e-933d-ddf83036e448/\" width=\"517\" height=\"253\"><br><b><span class=\"wysiwyg-color-red\">Note:</span> </b>Some of you may have noticed that if we were to insert both letters A and F, F would have attempted to insert itself where A is already at. More formally, we call this a <i>collision</i>. We will discuss collisions in much more depth later on. <br>", "feedback_correct": "", "video": null, "animation": null}}