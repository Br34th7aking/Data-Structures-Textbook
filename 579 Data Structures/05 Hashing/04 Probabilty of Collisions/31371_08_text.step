{"id": "121800", "time": "2016-09-01T21:51:41.494989", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>We prefaced this discussion about probability with the intention of selecting a size for our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> that would help us <i>avoid</i> collisions in the average case. Mathematically, this translates into the following question: \"What size should our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> be in order to keep the <i>expected</i> (i.e., average-case) number of collisions relatively small?\" So lets see how we can go about to compute the <b>expected total number of collisions</b> for <i>any</i> general <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. <br></p><p>Suppose we are throwing <i>N</i> cookies into <i>M</i> glasses of milk. The first cookie lands in some glass of milk. The remaining <i>N</i>-1 cookies have a probability $ \\frac{1}{M} $\u00a0of landing in the <i>same</i> glass of milk; so the average number of collisions with the <i>first</i> cookie will be $ \\frac{N-1}{M} $\u00a0(i.e., $ \\frac{1}{M} $\u00a0added\u00a0 <i>N</i>-1\u00a0times to account for the same probability for each remaining cookie left to throw). <br></p><p>Now lets the second cookie lands in some glass of milk. The remaining <i>N-</i>2 cookies each have probability $ \\frac{1}{M} $\u00a0of landing in the same glass of milk; so the number of collisions with the second cookie will be $ \\frac{N-2}{M} $, etc.\u00a0</p><p class=\"wysiwyg-text-align-center\"> So, the <b>expected total number of collisions</b> is $\\sum_{i=1}^{N-1} \\frac{i}{M} = \\frac{N(N-1)}{2M}$\u00a0</p><p>If we want there to be 1 collision on average (which translates into the O(1) average-case time complexity we desire), we can see that the expected number of collisions will be 1 when $\\frac{N(N-1)}{2M} = 1$, which, for a large\u00a0<i>M</i>, implies $N = \\sqrt{2M}$. In other words, if we will be inserting\u00a0<i>N</i> elements into our Hash Table, in order to keep the make the expected number of collisions equal to 1, we need our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> to be of size\u00a0$ M = O(N^2)$.</p><p>This is undeniably a pretty intuitive conclusion  because, in general, the more\n extra space you have, the lower the expected number of collisions. As a result, we also expect a better average-case performance.  However, as you might have inferred, this is extremely wasteful space-wise! It turns out that making the expected number of collisions exactly 1 is a bit overkill, however by general \"rule of thumb\", we get an average O(1) performance when $ M = 1.3N $. <br></p><p>It is important to note that we often analyze how full we expect our <b><span class=\"wysiwyg-color-purple\">hash table</span> </b>to be through the analysis of the <b><span class=\"wysiwyg-color-green\">load factor</span></b>\u00a0$ \u03b1=\\frac{N}{M} $ where <i>M</i> = size of the table and <i>N</i> = number of keys that have been inserted in the table <i>so far</i>. By following the general rule of thumb above, we thus expect the <b><b><span class=\"wysiwyg-color-green\">load factor</span></b> </b>to always be no more than\u00a0$ \\frac{1}{1.3} $ or 0.77.<br></p>", "feedback_correct": "", "video": null, "animation": null}}