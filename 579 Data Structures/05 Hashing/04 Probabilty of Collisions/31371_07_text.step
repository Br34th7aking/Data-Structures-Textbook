{"id": "122022", "time": "2016-09-01T21:51:40.670767", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "Referring back to the previous example we worked with, we had 3 keys to insert and consequently we chose to create a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> of size 3 to fit all the keys. However, we calculated an alarmingly high collision probability of 77.8% with that construction. So what exactly is going on? <br><br><p>This is actually a pretty crazy phenomenon and it is illustrated best by the infamous \"<b>Birthday Paradox</b><b>.</b>\" The goal of the \"<b>Birthday Paradox</b>\" is to figure out how likely is it that 2 people share the same birthday from an <i>N </i>amount of people.</p><p>For example, suppose there are 365 slots in a hash table: <i>M</i> = 365 (because there are 365 days in a non-leap year). Using the equations from the previous steps, we see<br></p><div><ul><li>For <i>N</i>=10, $P_{N,M}(\\ge 1\\ collision) = 12\\%$\u00a0</li><li>For <i>N</i>=20, $P_{N,M}(\\ge 1\\ collision) = 41\\%$\u00a0</li><li>For <i>N</i>=30, $P_{N,M}(\\ge 1\\ collision) = 71\\%$\u00a0</li><li>For <i>N</i>=40, $P_{N,M}(\\ge 1\\ collision) = 89\\%$\u00a0</li><li>For <i>N</i>=50, $P_{N,M}(\\ge 1\\ collision) = 97\\%$\u00a0</li><li>For <i>N</i>=60, $P_{N,M}(\\ge 1\\ collision) = 99$+$\\%$\u00a0</li></ul><p>So, among 60 randomly selected people, it is almost certain that at least one pair of them will have the same birthday. That is crazy! The fraction $\\frac{60}{365}$ is a mere $16.44\\%$ and that's how full our hash table of birthdays needed to be in order to have almost guaranteed a collision.\u00a0 So how can we use this information to help us build a<b> <span class=\"wysiwyg-color-purple\">Hash Table</span></b> that minimizes the amount of collisions?<br></p></div>", "feedback_correct": "", "video": null, "animation": null}}