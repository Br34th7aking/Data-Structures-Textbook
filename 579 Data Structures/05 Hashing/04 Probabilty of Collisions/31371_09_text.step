{"id": "122023", "time": "2016-09-01T21:51:42.325837", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>We have now seen why it is important to use a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> that is larger than the amount of <b><span class=\"wysiwyg-color-blue\">keys</span></b> we expect to insert in order to avoid collisions. However, it is important to note that we have been assuming that our <b><span class=\"wysiwyg-color-blue\">keys</span></b> are equally likely to be hashed to each index; is this a fair assumption? Well, in the extreme case, if we were to explicitly make our <b><span class=\"wysiwyg-color-green\">hash function</span> </b>H(k) = 1, then this would not be a fair assumption. However, we know that this is a bad <b><span class=\"wysiwyg-color-green\">hash function\u00a0</span></b><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">and as a result we would never use it; we would of course try to use a\u00a0 <b><span class=\"wysiwyg-color-green\">hash function</span></b> that creates as close to an equal distribution of\u00a0<b><span class=\"wysiwyg-color-blue\">keys</span></b> as possible... so how do we do that?</span></span> <br></p><p>In order to create the most evenly distributed <b><span class=\"wysiwyg-color-green\">hash function</span></b>, our goal is to have a unique <i>k</i> that satisfies the equation <i>a</i>*<i>k</i> % <i>M</i> = index, where <i>a</i> is an arbitrary integer constant,\u00a0<i>k</i> is the integer hash value of the inserting\u00a0<b><span class=\"wysiwyg-color-blue\">key</span></b>, and <i>M</i> is the size of the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. So what is this equation saying? Well ideally, we want every <b><span class=\"wysiwyg-color-blue\">key</span></b> k to map to its own index; however, we know that that it is inevitable for certain multiples of <i>k</i> since we are dealing with a fixed size\u00a0<i>M</i>. For example, suppose\u00a0<i>M = 5,\u00a0</i>then we know that it is inevitable for both the\u00a0<b><span class=\"wysiwyg-color-blue\">keys</span></b> 5 and 10 to map to index 0 since we only have an initial\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> of size 5. We also know that it is inevitable for any <b>key</b> to <i>not</i> map to index 0 once it is multiplied by <i>M, </i>because it automatically becomes a multiple of the value we are modding by. For example, suppose <i>M = 5 </i>and we have two  <b><span class=\"wysiwyg-color-blue\">keys</span></b> that are of values 1 and 4 that initially hash to index 1 and 4 respectively, the moment we multiply both by 5 they hash to index 0 and collide.<br></p><p>However, beyond those two cases, we do not want to be prone to any more possibilities of collisions! For example, suppose <i>M = 6,</i> <b><span class=\"wysiwyg-color-blue\">keys</span></b> 1 and 4 themselves would map to indexes 1 and 4, respectively. However, the moment we multiply\u00a0 <b><span class=\"wysiwyg-color-blue\">keys</span></b> 1 and  4 by 2, they both end up colliding at index 2. If we were to multiply<b> <b><span class=\"wysiwyg-color-blue\">keys </span></b></b><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">2 and 4 by 3, they would end up colliding at index 0. <br></span></span></p><p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">So whats going on in the last example? The problem is that <i>M</i> is <b>not</b> prime (i.e., <i>M</i> has multiples other than 1 and itself). As a result, we now face a higher probability that originally unique <b><span class=\"wysiwyg-color-blue\">keys</span></b> can collide once they share a multiple of the size of the Hash Table (e.g. both 2 and 3 were multiples of <i>M</i> = 6 in the example). With the sharing of multiples, we now begin to face clusters in the  <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> where more </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">keys</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"> want to map to the same location and we thus face a largely un-equal distribution and an increase in collisions. </span></span><br></p><p>As a result, when increasing the size of our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, we always want to round to the next nearest <b>prime</b> number. <br></p>", "feedback_correct": "", "video": null, "animation": null}}