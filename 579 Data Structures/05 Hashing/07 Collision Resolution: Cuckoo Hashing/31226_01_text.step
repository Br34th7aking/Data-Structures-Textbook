{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>The final collision resolution strategy that we will discuss is called <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b>. <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b>\u2014and its weird name\u2014comes from the concept of actual Cuckoo chicks pushing each other out of their nests in order to have more space to live. In all of the previous open addressing collision resolution strategies we have discussed thus far, if an inserting key collided with a key already in the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, the existing key would remain untouched and the inserting key would take responsibility to find a new place. In <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b>, however, an arguably more aggressive and opposite approach takes place: if an inserting key collides with a key already in the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, the inserting key pushes out the key in its way and takes its place. The displaced key then hashes to a new location (ouch...).</p><p><img height=\"326\" src=\"https://ucarecdn.com/e087eee6-7deb-40c4-97d2-5314e5af1dd0/\" width=\"584\" alt=\"\"></p><p class=\"wysiwyg-text-align-center\"><b>Figure:</b> Chestnut-winged Cuckoo (photo by William Lee)</p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "121065", "time": "2016-09-14T00:12:50.789468"}