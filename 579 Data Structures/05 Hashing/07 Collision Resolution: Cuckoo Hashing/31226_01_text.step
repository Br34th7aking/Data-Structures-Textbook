{"id": "121065", "block": {"name": "text", "tests_archive": null, "animation": null, "feedback_wrong": "", "subtitle_files": [], "video": null, "options": {}, "text": "<p>The final <b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b> that we will discuss is called <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b>. <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b>\n --- and it weird name --- comes from the concept of actual Cuckoo \nchicks pushing each other out of their nests in order to have more space\n to live. In all the previous open addressing <b><span class=\"wysiwyg-color-red\">collision resolution strategies</span></b> we have discussed so far, if an inserting key collided with a key already in the <b><span class=\"wysiwyg-color-purple\">hash table</span></b>, the inserting key would take responsibility to find a new place. In <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b>,\n however, an arguably more aggressive and opposite approach takes place:\n if an inserting key collides with a key already in the <b><span class=\"wysiwyg-color-purple\">hash table</span></b>,\n the inserting key pushes out the key in its way and takes its place. \nThe displaced key then hashes to a new location (ouch...).<br></p>", "source": null, "subtitles": {}, "feedback_correct": ""}, "time": "2016-09-12T22:31:44.174359"}