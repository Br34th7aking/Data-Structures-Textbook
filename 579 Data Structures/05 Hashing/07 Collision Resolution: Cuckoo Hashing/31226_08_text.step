{"id": "122160", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Specifically, the reason why we are in an infinite cycle in the previous visualization is because there are no empty <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> slots in either\u00a0$ T_1\u00a0 $or $ T_2\u00a0\u00a0\u00a0\u00a0$ that a <b><span class=\"wysiwyg-color-blue\">key</span> </b>could potentially hash to, like so: <br></p><img alt=\"\" height=\"457\" src=\"https://ucarecdn.com/9c4a42e7-d3d3-4d9d-b680-e489138eb84f/\" width=\"535\"><br>Formally, an infinite cycle is said to occur if the inserting <b><span class=\"wysiwyg-color-blue\">key</span></b> <i>k</i>\u00a0revisits index1 =\u00a0$ H_1(k) $ after it has already been inserted.<br><br>Consequently, unless\u00a0<b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> has a limit as to how many times it attempts to move a <b><span class=\"wysiwyg-color-blue\">key</span></b>, the algorithm will never stop. As seen in the pseudocode in the previous step, when a\u00a0<b><span class=\"wysiwyg-color-blue\">key</span></b> causes an infinite loop and the insertion fails, we must then resort to re-hashing. Re-hashing is generally done by introducing two new <b><span class=\"wysiwyg-color-green\">hash functions</span></b> and re-inserting all the elements.<br><br><b><span class=\"wysiwyg-color-red\">Note</span></b>: It is important to make sure that the second  <b><span class=\"wysiwyg-color-green\">hash function</span></b> used returns <i>different</i> indexes for <b><span class=\"wysiwyg-color-blue\">keys</span></b> that originally hashed to the same index<b></b>. This is because if a key collides with another key in the first <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, we want to make sure that it will not collide with the same key again in the second <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. Otherwise, we risk hitting a cycle the moment we insert two <b><span class=\"wysiwyg-color-blue\">keys</span></b> that hash to the same first index. <br><br><b><span class=\"wysiwyg-color-red\">STOP and Think</span></b>: Why would <span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">the pair of <b><span class=\"wysiwyg-color-green\">hash functions</span></b> $ H_1(k)=k\\ \\%\\ M $and\u00a0$  H_2(k)=(k+3)\\ \\%\\ M $ </span></span>where <i>k</i> is the <b><span class=\"wysiwyg-color-blue\">key </span></b>and<i> M</i> is the capacity of the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> not be considered good?<br>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-05T17:13:01.662406"}