{"id": "122114", "block": {"subtitles": {}, "source": null, "video": null, "feedback_wrong": "", "options": {}, "animation": null, "text": "<p>By only allowing each <b><span class=\"wysiwyg-color-blue\">key</span></b> to hash to strictly two different locations (thereby potentially causing the cycle in the first place), we end up getting a <b><i>worst-case constant</i></b><i> </i>time complexity for two of our major operations! Specifically:</p><ul><li>For the \"find\" method: we know that if the <b><span class=\"wysiwyg-color-blue\">key</span></b> is not in either index1 = $ H_1(k)\u00a0\u00a0$ or index2 = $ H_2(k)  $, then it is not in the table; this is a constant time operation.</li><li>For the \"delete\" method: we know that the <b><span class=\"wysiwyg-color-blue\">key</span></b> is either in index1 =\u00a0$ H_1(k)  $\n    or index2 =\u00a0$ H_2(k)  $ and all we have to do is remove the <b><span class=\"wysiwyg-color-blue\">key</span></b> from its current index; this is a constant time operation. <br></li></ul><p> This is super unique to <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> because in all the other collision resolution strategies that we have discussed so far, we could only guarantee an <b>average</b><b>-case</b> constant time complexity with respect to our major operations because worst-case scenario we had to traverse the entire <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>.<br></p><p>For the \"insert\" method in <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> however, we only get an <i>average</i> case constant time complexity since worst case scenario we would have to rehash the entire table (which is not a constant time operation) but on an <i>average</i>\ufeff case scenario ---though beyond the scope of this text--- we can prove through amortized cost analysis that we can finish an insertion in\u00a0 less than the MAX amount of loop iterations before it terminates. <br></p><p>So how do we choose the MAX limit? A common MAX limit is 10. <br></p><p><b><span class=\"wysiwyg-color-red\">Fun Fact:</span> </b>A lot of proofs about cycles in <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> are solved by converting the<span class=\"wysiwyg-color-blue\">\u00a0</span><b><span class=\"wysiwyg-color-blue\">keys</span></b> within the two <b><span class=\"wysiwyg-color-purple\">Hash Tables</span></b> to nodes and their two possible hashing locations to edges to create a graph theory problem! <br></p>", "feedback_correct": "", "tests_archive": null, "subtitle_files": [], "name": "text"}, "time": "2016-09-03T01:11:43.140355"}