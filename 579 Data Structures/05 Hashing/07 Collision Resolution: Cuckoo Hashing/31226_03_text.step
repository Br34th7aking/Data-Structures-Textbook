{"time": "2016-09-20T20:58:22.972348", "block": {"name": "text", "subtitles": {}, "source": null, "subtitle_files": [], "feedback_wrong": "", "video": null, "animation": null, "feedback_correct": "", "tests_archive": null, "text": "<p>As mentioned in the previous step, <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> was invented with the use of two <b><span class=\"wysiwyg-color-purple\">Hash Tables</span></b> simultaneously, in order to decrease the probability of collisions in each table, which is how <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> is typically implemented today. Formally, the <b><span class=\"wysiwyg-color-green\">hash function</span></b> $  H_1(k)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ hashes keys <i>exclusively</i> to the <i>first</i> <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> $ T_1\u00a0\u00a0$, and the <b><span class=\"wysiwyg-color-green\">hash function</span></b> $   H_2(k)\u00a0\u00a0$ hashes keys <i>exclusively</i> to the<i> second</i> <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> $ T_2 $. A key <i>k</i> starts by hashing to\u00a0$  T_1   $, and if another arbitrary key\u00a0<i>j</i> collides with key <i>k</i> at some point in the future, key <i>k</i> then hashes to $ T_2 $. <b>However</b>, a key can also get kicked out of $ T_2\u00a0\u00a0\u00a0$, in which case it hashes back to $ T_1 $ and potentially kicks out another key. We admit that this may sound confusing, so we have provided another visualization below to see how the keys jump around between the two tables. Use the arrows in the bottom left to walk through the slides.</p><p><iframe src=\"https://docs.google.com/presentation/d/1enss8FYHLN5VfPXA1ODzV0rxnr62lFrUrlURqKnkaj8/embed?start=false&amp;loop=false&amp;delayms=60000\" width=100% height=\"550\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b> Is a <i>\ufeffnew</i> inserting key guaranteed to always end up in the index returned by the primary\u00a0<b><span class=\"wysiwyg-color-green\">hash function</span></b> $ H_1(k) $?</p>", "options": {}}, "id": "121814"}