{"id": "121546", "block": {"feedback_wrong": "", "tests_archive": null, "text": "<p>So how would we go about implementing the delete and find method for a<b> <span class=\"wysiwyg-color-purple\">Hash Table</span></b> that uses<b> <span class=\"wysiwyg-color-blue\">Separate Chaining</span></b><span class=\"wysiwyg-color-black\">? The implementation</span><b> </b><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">is actually quite simple: hash to the correct index and search for the item in the linked list to either delete or return.\u00a0</span></span> Note that this delete method is <i>much </i>easier than the delete method we had to implement in the <b><span class=\"wysiwyg-color-red\">collision resolution strategy</span> </b>of <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>.</p><p>So what other advantage does <b> <span class=\"wysiwyg-color-blue\">Separate Chaining</span></b><b> </b>have? In general, the average case performance is considered much better than <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> and <b><span class=\"wysiwyg-color-blue\">Double Hashing</span> </b>as the amount of keys approaches and even <i>exceeds</i><i> </i>the size of the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, <i>M</i>. This is because the probability of a collision does not necessarily need to go up when a new <b><span class=\"wysiwyg-color-blue\">key</span></b> is inserted with the use of<b> <span class=\"wysiwyg-color-blue\">Separate Chaining</span></b><span class=\"wysiwyg-color-blue\">;</span> in the first Exercise Break of this lesson <i>and</i> the previous lesson we saw that inserting the\u00a0<b><span class=\"wysiwyg-color-blue\">key</span></b> \"F\" into a <b><span class=\"wysiwyg-color-purple\">Hash Table</span> </b>that uses\u00a0<b><span class=\"wysiwyg-color-blue\">Separate Chaining</span></b> kept the probability of a new collision at 0.4 as opposed to increasing it to 0.6 with <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>. It is also important to note that we could never have exceeded <i>M</i> in <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> or <b><span class=\"wysiwyg-color-blue\">Double Hashing</span> </b>without having to resize the backing array and re-insert the elements from scratch.</p><p>A disadvantage for <b><span class=\"wysiwyg-color-blue\">Separate Chaining</span></b> however is that we are now dealing with a bunch of pointers. As a result, we lose some optimization in regards to memory for two reasons: 1) We require extra storage now for pointers 2)\u00a0All the data in our<b> <span class=\"wysiwyg-color-purple\">Hash Table</span></b> is no longer huddled near 1 memory location (since pointers can point to memory anywhere) and as a result this poor locality causes poor cache performance (i.e., it often takes the computer longer to find data that isn't located near previously accessed data). <br></p><p>It is also important to note that <b><span class=\"wysiwyg-color-blue\">Separate Chaining</span></b> does not necessarily <i>have</i> to use linked lists! A <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> can have slots that point to Binary Search Trees, Red-Black Trees, etc. where the worst case time-complexity to find an item would \ufeffdefinitely be faster. However, the reason why we use linked lists is because we do not expect the worst-case time-complexity of finding an item in a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> slot to make a huge difference. Why? Because if it did, that would mean that the rest of our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> is performing poorly and that would imply that we should probably investigate why that might be the case and fix it (perhaps the hash function isn't good or the load factor has become too high).<br></p><p>In general though, <b><span class=\"wysiwyg-color-blue\">Separate Chaining</span></b><b> </b>is considered a much better alternative than  <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> in terms of performance. Nonetheless, we will continue to explore other <b><span class=\"wysiwyg-color-red\">collision resolution strategies</span></b> in the next lesson where we look at methods in which we not only resolve collisions, but take extra measures to avoid collisions in the first place. <br></p>", "subtitle_files": [], "options": {}, "name": "text", "subtitles": {}, "animation": null, "feedback_correct": "", "source": null, "video": null}, "time": "2016-09-04T00:50:19.404444"}