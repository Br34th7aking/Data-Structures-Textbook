{"id": "121807", "time": "2016-09-02T18:29:37.780570", "block": {"animation": null, "text": "<p>We briefly mentioned in the previous step that by not checking for duplicates in the \"insert\" method, we could get a worst case <i>constant</i> time complexity. So why would we not want to check for duplicates? <br></p><p>The first rather obvious option is if we for some reason want multiple copies of the same <b><span class=\"wysiwyg-color-blue\">key</span></b> <i>k </i>in our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b><span class=\"wysiwyg-color-purple\">. <span class=\"wysiwyg-color-black\">This would imply that if we had two of the same\u00a0<b><span class=\"wysiwyg-color-blue\">keys</span></b> <i>k </i>and called delete(<i>k)</i>, delete would only delete\u00a0<i>one</i> copy and consequently calling find</span></span>(<i>k</i>) would still return <i>true</i>. <br></p><p>The second option for not checking duplicates however is if we did in fact <i>not</i> want to have duplicates but would rather have an optimized \"insert\" method (i.e., not have to linearly scan the entire linked list <i>before</i> making an insert). So how would we then ensure that duplicates are not allowed? Well not allowing duplicates implies that if we had two of the same <b><span class=\"wysiwyg-color-blue\">keys</span></b> <i>k </i>and called delete(<i>k)</i>, calling find(<i>k)\u00a0</i>after should return <i>false</i>. As a result, we would need to make sure that delete would delete <i>all</i> copies of the <b><span class=\"wysiwyg-color-blue\">key</span></b> <i>k</i>. <br>Note that if we wanted to have an optimized \"delete\" as opposed to \"insert\" method, then we would chose to check for duplicate insertions in the \"insert\" method. <br></p>", "options": {}, "feedback_correct": "", "source": null, "subtitle_files": [], "name": "text", "feedback_wrong": "", "subtitles": {}, "tests_archive": null, "video": null}}