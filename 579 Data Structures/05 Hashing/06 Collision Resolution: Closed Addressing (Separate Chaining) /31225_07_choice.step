{"time": "2016-09-05T12:32:02.952235", "block": {"tests_archive": null, "animation": null, "feedback_correct": "", "subtitles": {}, "source": {"is_always_correct": false, "preserve_order": true, "options": [{"is_correct": false, "text": "O(1)", "feedback": "Hint: The insert method does not allow duplicates; what does this require?"}, {"is_correct": false, "text": "O(log N)", "feedback": ""}, {"is_correct": true, "text": "O(N)", "feedback": ""}], "is_html_enabled": true, "sample_size": 3, "is_multiple_choice": true}, "text": "<b><span class=\"wysiwyg-color-green\">Exercise Break:</span></b> Consider a<b> <span class=\"wysiwyg-color-purple\">Hash Table</span></b> in which collisions are resolved using \n<b><span class=\"wysiwyg-color-blue\">Separate Chaining</span></b>. Select the tightest worst case time complexity for an insert method that uses a doubly linked list (i.e., there are head and tail pointers) and inserts keys to the end of the linked lists. This insert method does not allow duplicates. <br><br>", "options": {}, "subtitle_files": [], "name": "choice", "video": null, "feedback_wrong": ""}, "id": "121547"}