{"id": "123261", "block": {"name": "text", "feedback_correct": "", "animation": null, "subtitle_files": [], "video": null, "feedback_wrong": "", "options": {}, "source": null, "text": "<p>As we have now seen, <b><span class=\"wysiwyg-color-red\">Separate Chaining</span></b> is a <b>closed addressing</b> collision resolution strategy that takes advantage of other data structures (such as a linked list) to store multiple keys in\u00a0one<b> <span class=\"wysiwyg-color-purple\">Hash Table</span> </b>slot. By storing <i>multiple</i> keys in <i>one</i> <b> <span class=\"wysiwyg-color-purple\">Hash Table</span> </b>slot, we ensure that the probability of <i>future</i> collisions does not increase each time an inserting key faces a collision\u2014something that we saw happen in other <b>open addressing </b>methods\u2014thereby giving us more desirable performance.</p><p>Nonetheless, we will continue to explore other collision resolution strategies in the next lesson, where we will look at a collision resolution strategy called <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> that not only resolves collisions, but takes extra \nmeasures to avoid collisions in the first place.</p>", "subtitles": {}, "tests_archive": null}, "time": "2016-09-15T15:04:01.892483"}