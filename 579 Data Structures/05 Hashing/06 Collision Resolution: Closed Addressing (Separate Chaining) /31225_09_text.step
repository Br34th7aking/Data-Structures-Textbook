{"block": {"animation": null, "source": null, "text": "<p>So what are the advantages and disadvantages of <b> <span class=\"wysiwyg-color-red\">Separate Chaining</span></b>?</p><p>In general, the average-case performance is considered much better than <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> and <b><span class=\"wysiwyg-color-purple\">Double Hashing</span></b> as the amount of keys approaches, and even <i>exceeds</i>, <i>M</i>, the capacity of the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> (though this proof is beyond the scope of the text, you can find it <a rel=\"nofollow\" href=\"http://cseweb.ucsd.edu/%7Ekube/cls/100/Lectures/lec16/lec16.pdf\">here</a>). This is because  the probability of <i>future</i> collisions does not increase each time an inserting key faces a collision with the use of <b><span class=\"wysiwyg-color-blue\">Separate Chaining</span></b>: in the first Exercise Break of this lesson <i>and</i> the previous lesson we saw that inserting the key 'f' into a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> that uses <b><span class=\"wysiwyg-color-red\">Separate Chaining</span></b> kept the probability of a new collision at 0.4 as opposed to increasing it to 0.6 as with <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>. It is also important to note that we could never have exceeded <i>M</i> in <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> or <b><span class=\"wysiwyg-color-purple\">Double Hashing</span></b> (not that we would want to in the first place) without having to resize the backing array and reinsert the elements from scratch<br></p><p>A disadvantage for <b><span class=\"wysiwyg-color-red\">Separate Chaining</span></b>,\n however, is that we are now dealing with a bunch of pointers. As a \nresult, we lose some optimization in regards to memory for two reasons:</p><p></p><ol><li>We require extra storage now for pointers (when storing primitive data types).<br></li><li>All the data in our<b> <span class=\"wysiwyg-color-purple\">Hash Table</span></b>\n is no longer huddled near 1 memory location (since pointers can point \nto memory anywhere), and as a result, this poor locality causes poor \ncache performance (i.e., it often takes the computer longer to find data\n that isn't located near previously accessed data)</li></ol>", "feedback_correct": "", "feedback_wrong": "", "video": null, "name": "text", "subtitles": {}, "subtitle_files": [], "options": {}, "tests_archive": null}, "id": "123262", "time": "2016-09-20T01:13:18.961221"}