{"block": {"tests_archive": null, "feedback_correct": "", "subtitle_files": [], "text": "In practice however, we realize that you will more often than not be using the built-in implementation of\u00a0a <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b> </span>as opposed to implementing it from scratch; so how do we use C++'s <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b></span>?<br><br>In C++, a <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b><span class=\"wysiwyg-color-green\">\u00a0</span></span><span class=\"wysiwyg-color-black\">is called an <a href=\"http://www.cplusplus.com/reference/unordered_map/unordered_map/\" rel=\"nofollow\">unordered_<i>map</i></a> and it is specifically implemented using a <b><span class=\"wysiwyg-color-blue\">Separate Chaining</span></b> <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. Just to remind you, in C++, a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> was an <a href=\"http://www.cplusplus.com/reference/unordered_set/unordered_set/\" rel=\"nofollow\">unordered<i>_set</i></a><i>.</i> Referring all the way back to implementing a grade book system, the C++ code to use a </span><b><span class=\"wysiwyg-color-green\">Hash Map</span> </b><span class=\"wysiwyg-color-black\">would be:</span> <br><pre><code><pre><code class=\"cpp\">std::unordered_map&lt;std::string, std::string&gt; Grade_Book = {\n                { \"Kammy\", \"A\"},\n                { \"Alicia\", \"C\"},\n                { \"Anjali\", \"D\"},\n                { \"Nadah\", \"A\"}\n\u2003};</code></pre></code></pre><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\"><br>If we wanted to add a new student to our Grade Boo</span></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">k, we would do the following: <br><br><pre><code class=\"cpp\">Grade_Book.insert({\"Bob\", \"B\"});\n\n// Our new hash map would look something like this:\n//           {  { \"Kammy\", \"A\"},\n//              { \"Bob\" , \"B\"},\n//              { \"Alicia\", \"C\"},\n//              { \"Anjali\", \"D\"},\n//              { \"Nadah\", \"A\"}  };\n//\n// Note how there is no ordering property, as expected\n</code></pre></span></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\"><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\"><br>If we wanted to check Nadah's grade in our Grade Boo</span></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">k, we would do the following: </span></span><br><br><pre><code>std::cout&lt;&lt; Grade_Book[\"Nadah\"] &lt;&lt; std::endl; // [] operator returns the value stored at the key\n\n// Output:\n// A\n</code></pre><br>Though we have mentioned many times that there is no particular ordering property when it comes to a </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\"><b> </b>(and a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>)<b>,\u00a0</b>we can still\u00a0<i>iterate</i> through the inserted objects using an iterator like so:<br><br><pre><code><pre><code><pre><code class=\"cpp\">for (auto&amp; students: Grade_Book) {\n\n   std::cout &lt;&lt; students.firstn&lt;&lt; \": \" &lt;&lt; students.second &lt;&lt; std::endl; // .first returns the key\n                                                                        // .second returns the value\n}</code></pre>// Output:\n// Bob: B\n// Kammy: A\n// Anjali: D\n// Alicia: C\n// Nadah: A</code></pre></code></pre></span></span><br><p></p>", "feedback_wrong": "", "options": {}, "subtitles": {}, "name": "text", "source": null, "video": null, "animation": null}, "time": "2016-09-11T01:11:16.947450", "id": "122548"}