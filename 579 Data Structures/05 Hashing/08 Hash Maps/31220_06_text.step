{"id": "121235", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">So how else is a<b> </b><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b></span> related to a <span class=\"wysiwyg-color-purple\"><b>Hash Table</b> </span></span><span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">(other than the fact that they both start with \"hash\")</span></span><span class=\"wysiwyg-color-black\">? <span class=\"wysiwyg-color-black\">Well implementation wise, we've already mentioned that a </span></span></span><span class=\"wysiwyg-color-black\"><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b></span></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\"><span class=\"wysiwyg-color-black\"> uses a <b><span class=\"wysiwyg-color-blue\">separate chaining</span> <span class=\"wysiwyg-color-purple\">Hash Table</span></b> as its underlying data structure.</span><br></span></span></p><p><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">Consequently, just like a<span class=\"wysiwyg-color-purple\"><b> Hash Table</b></span>, a <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b></span> has an average case time complexity to of O(1) because we are using keys to access particular addresses. A <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b> </span>also uses <span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">a <b>hash function</b> for the purpose of being able to access the addresses of the objects in the <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b>. </span></span></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">As a result, th</span></span>e <b><span class=\"wysiwyg-color-blue\">key</span></b> must also be hashable and have an associated equality test to be able to check for uniqueness (i.e. to use a custom class type as a key, one would have to overload the hash and equal_to member functions). <br></span></span></p><p><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">By allowing to insert a tuple into the <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b></span>, we also gain a certain associativity between the <b><span class=\"wysiwyg-color-blue\">key</span></b> and the object. Though there is still no particular order between the inserted objects --- just like a<span class=\"wysiwyg-color-purple\"><b> Hash Table</b></span> --- we can use the <b><span class=\"wysiwyg-color-blue\">key</span></b> to tell us more information about the values being inserted, something we couldn't do in the <span class=\"wysiwyg-color-purple\"><b>Hash Table</b></span>. <br></span></span></p><p><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">Collision resolution between<b> objects</b> being inserted also played a large role in determining how to properly build an efficient <span class=\"wysiwyg-color-purple\"><b>Hash Table</b></span>; a <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b></span>\u00a0uses a <b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b> if the computed hash value of the <b><span class=\"wysiwyg-color-blue\">keys</span></b> happen to collide. However, the user-specified <b><span class=\"wysiwyg-color-blue\">keys</span></b>\u00a0themselves <i>must</i> be unique. <span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">As a result,\n attempting to insert an object to an already mapped key will result in \nthe original object being overwritten with the new one.</span></span> <br></span></span></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2016-09-02T19:37:33.448618"}