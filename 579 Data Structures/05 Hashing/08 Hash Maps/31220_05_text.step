{"id": "121235", "block": {"name": "text", "feedback_correct": "", "animation": null, "subtitle_files": [], "video": null, "feedback_wrong": "", "options": {}, "source": null, "text": "<p>In case the previous step was too \"hand-wavy\" with regard to how we go about inserting elements, let's look at the pseudocode for the\u00a0<b><span class=\"wysiwyg-color-blue\">Hash Map</span></b>\u00a0operations below. Note that a <span class=\"wysiwyg-color-blue\"><b>Hash Map</b></span> can be implemented using a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> with any of the collision resolution strategies we discussed previously in this chapter. In all of the following pseudocode, the\u00a0<b>Hash Map</b> is backed by an array <span class=\"wysiwyg-font-tt\">arr</span>, and for a (<i>key</i>,\u00a0<i>value</i>) pair <span class=\"wysiwyg-font-tt\">pair</span>, <span class=\"wysiwyg-font-tt\">pair.key</span> indicates the <i>key</i> of <span class=\"wysiwyg-font-tt\">pair</span> and <span class=\"wysiwyg-font-tt\">pair.value</span> indicates the <i>value</i> of <span class=\"wysiwyg-font-tt\">pair</span>.</p><p>In the <b>insert</b> operation's pseudocode below, we ignore collisions (i.e., each key maps to a unique index in the backing array)\u00a0because the actual insertion algorithm would depend on which collision resolution strategy you choose to implement.</p><pre><code class=\"cpp\"><b>insert(key,value): // insert &lt;key,value&gt;, replacing old value with new value if key exists</b>\n    index = hashFunction(key)\n    returnVal = NULL\n\n    // if key already exists, save the old value\n    if arr[index].key == key:\n        returnVal = arr[index].value // we want to return the old value instead of NULL\n\n    // perform the insertion\n    arr[index] = &lt;key,value&gt;\n    return returnVal</code></pre><p></p><p>With respect to insertion, originally, in a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, if a key that was being inserted already existed, we would abort the insertion. In a <b><span class=\"wysiwyg-color-blue\">Hash Map</span></b>, however, attempting to insert a key that already exists will <i>not</i> abort the insertion. Instead, it will result in the original value being overwritten by the new one. </p><p>The pseudocode for the <b>find</b> operation of a <b><span class=\"wysiwyg-color-blue\">Hash Map</span></b> is provided below. Note that this \"find\" algorithm returns the <i>value</i> associated with <i>key</i>, as opposed to a Boolean value as it did in the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> implementation.</p><pre><code class=\"cpp\"><b>find(key): // return value associated with key if key exists, otherwise return NULL</b>\n    index = hashFunction(key)\n    if arr[index].key == key:\n        return arr[index].value\n    else:\n        return NULL</code></pre><p></p><p>The pseudocode for the <b>remove</b> operation of a <b><span class=\"wysiwyg-color-blue\">Hash Map</span></b> is provided below. Just like with the pseudocode for the insertion algorithm above, in the pseudocode below,\u00a0we ignore collisions (i.e., each key maps to a unique index in the backing array) because the actual remove algorithm would depend on which collision resolution strategy you choose to implement.</p><pre><code class=\"cpp\"><b>remove(key): // remove &lt;key,value&gt; if key exists and return value, otherwise return NULL</b>\n    index = hashFunction(key)\n    returnVal = NULL\n\n    // if key already exists, save the old value\n    if arr[index].key == key:\n        returnVal = arr[index].value // we want to return the value instead of NULL\n\n    // perform the removal\n    delete arr[index]</code></pre>", "subtitles": {}, "tests_archive": null}, "time": "2016-09-15T15:04:20.127673"}