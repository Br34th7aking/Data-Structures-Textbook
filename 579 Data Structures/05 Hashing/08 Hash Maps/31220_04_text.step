{"block": {"video": null, "tests_archive": null, "feedback_correct": "", "animation": null, "text": "<p>When we find, insert, or remove (<i>key</i>,\u00a0<i>value</i>) pairs in a\u00a0<b><span class=\"wysiwyg-color-blue\">Hash Map</span></b>, we do\u00a0<i>everything exactly like</i>\u00a0we did with a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, but with respect to the\u00a0<i>key</i>.</p><p>For example, in the <b><span class=\"wysiwyg-color-blue\">Hash Map</span></b> <b>insertion</b> algorithm, we are given a (<i>key</i>,\u00a0<i>value</i>) pair, and we perform the entire insertion operation\u00a0<i>identically</i> to the\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>\u00a0insertion algorithm, except when we actually place the new object into the backing array, in a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, we just store the\u00a0<i>key</i>, but in a\u00a0<b><span class=\"wysiwyg-color-blue\">Hash Map</span></b>, we store the\u00a0<i>key</i> and the\u00a0<i>value</i> together.\u00a0Below is an example of a\u00a0<b><span class=\"wysiwyg-color-blue\">Hash Map</span></b> that contains multiple (<i>key</i>,\u00a0<i>value</i>) pairs:</p><p><img height=\"150\" src=\"https://ucarecdn.com/e9108a34-1aad-4123-b52d-be6e9d695028/\" width=\"523\" alt=\"\"></p><p><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">When we want to <b>find</b> elements, we perform the exact same \"find\" algorithm as we did with a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, but again with respect to the\u00a0<i>key</i> (which is why our \"find\" function only had\u00a0<i>key</i> as a parameter, not\u00a0<i>value</i>), and once we find the (<i>key</i>, <i>value</i>) pair, we simply return the\u00a0<i>value</i>. For example, in the example\u00a0<b></b></span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Hash Map</span></b></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\"><b></b> above, if we were to perform the \"find\" algorithm on \"Kammy,\" we would perform the regular\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> \"find\" algorithm on \"Kammy,\" and when we find the pair that has \"Kammy\" as its\u00a0<i>key</i>, we would return the\u00a0<i>value</i> (in this case, 'A').</span></span></p><p>Just like with finding elements, if want to <b>remove</b> elements from our\u00a0<b><span class=\"wysiwyg-color-blue\">Hash Map</span></b>, we perform the\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> \"remove\" algorithm with respect to the\u00a0<i>key</i> (which is why our \"remove\" function only had\u00a0<i>key</i> as a parameter, not\u00a0<i>value</i>), and once we find the (<i>key</i>,\u00a0<i>value</i>) pair, we simply remove the pair.</p>", "subtitle_files": [], "subtitles": {}, "feedback_wrong": "", "name": "text", "source": null, "options": {}}, "id": "121797", "time": "2016-09-14T00:13:03.464240"}