{"id": "122547", "time": "2016-09-09T17:01:41.739220", "block": {"subtitle_files": [], "text": "In practice, a  <b><span class=\"wysiwyg-color-green\">Map</span> ADT</b> can be implemented in a multitude of ways. For example, we can implement it as a Binary Search Tree by inserting the &lt;<b><span class=\"wysiwyg-color-blue\">key</span>,</b> value&gt; tuples and sorting by using the <b><span class=\"wysiwyg-color-blue\">keys</span></b>.\u00a0 <i>However</i>, if we didn't care so much about the sorting property but rather wanted a faster <i>put</i> and <i>has </i>capability (if we desired a constant time-complexity, for example), then a <b><span class=\"wysiwyg-color-green\">Map</span> ADT</b> can also be implemented using a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>: we refer to this implementation as a <b><span class=\"wysiwyg-color-green\">Hash Map</span></b>. <br><br>Implementation-wise, a<b>\u00a0</b><b><span class=\"wysiwyg-color-green\">Hash Map</span></b> uses the following set of functions:<br><ul><li><b><span class=\"wysiwyg-font-tt\">insert(&lt;key,value&gt;): </span></b><span class=\"wysiwyg-font-tt\">the same as the put operation</span><b><span class=\"wysiwyg-font-tt\"><br></span></b></li><li><b><span class=\"wysiwyg-font-tt\">find(key): </span></b><span class=\"wysiwyg-font-tt\">the same as the has operation</span><b><span class=\"wysiwyg-font-tt\"><br></span></b></li><li><b><span class=\"wysiwyg-font-tt\"><b><span class=\"wysiwyg-font-tt\">remove(key)</span></b><br></span></b></li><li><b><span class=\"wysiwyg-font-tt\">hashFunction(key)</span></b><span class=\"wysiwyg-font-tt\">: to produce a hash value for a key to use to map to a valid index</span><b><span class=\"wysiwyg-font-tt\"><br></span></b></li><li><b><span class=\"wysiwyg-font-tt\">key_equality(key1, key2):</span></b><span class=\"wysiwyg-font-tt\"> to check if two keys are equal, to avoid duplicate key insertions</span></li><li><span class=\"wysiwyg-font-tt\"><b>size()</b></span></li><li><span class=\"wysiwyg-font-tt\"><b>isEmpty()</b></span></li></ul><p><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">Just like a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, a <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b> </span>uses <span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">a <b>hash function</b> for the purpose of being able to access the addresses of the tuples inserted. <span class=\"wysiwyg-color-black\"></span></span></span><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">Consequently, in\u00a0a <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-green\">Hash Map</span></b>, </span> th</span></span>e <b><span class=\"wysiwyg-color-blue\">key</span></b>\n must be hashable and have an associated equality test to be able \nto check for uniqueness (i.e. to use a custom class type as a key, one \nwould have to overload the hash and equal_to member functions). </span></span></p><p></p><code class=\"cpp\"></code><p></p><p></p><p></p>", "feedback_correct": "", "tests_archive": null, "subtitles": {}, "source": null, "name": "text", "video": null, "feedback_wrong": "", "options": {}, "animation": null}}