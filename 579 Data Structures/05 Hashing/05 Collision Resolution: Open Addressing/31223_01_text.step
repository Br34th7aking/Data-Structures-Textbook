{"id": "121062", "time": "2016-09-02T18:29:23.018881", "block": {"animation": null, "text": "<div>As we mentioned repeatedly thus far, we have acknowledged that collisions can happen, and even further, we have proven that they are statistically impossible to fully avoid, but we simply glossed over what to do should we actually encounter one. In this section, we will discuss the first of our <b><span class=\"wysiwyg-color-red\">collision resolution strategies</span></b>\u00a0(i.e., what should be done to successfully perform an insert/find/remove operation if we were to run into a collision): <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>.<br></div>[Niema adds some enticing motivator (about collision resolution strategies in general?)] Something about:<br><ul><li>\"You might have noticed that up until now we have continually mentioned that our goal was to avoid collisions, yet we have never addressed what exactly happens <i>when</i> a collision occurs...\"<br></li><li>A Reminder of the definition the definition we gave: <span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">A </span></span><b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b> can simply be thought of as what the <b><span class=\"wysiwyg-color-blue\">hashing</span></b> algorithm should do when an inserting key wants to be in a  <b><span class=\"wysiwyg-color-purple\">hash table</span></b> location that is already taken by another key. <br></li></ul>", "options": {}, "feedback_correct": "", "source": null, "subtitle_files": [], "name": "text", "feedback_wrong": "", "subtitles": {}, "tests_archive": null, "video": null}}