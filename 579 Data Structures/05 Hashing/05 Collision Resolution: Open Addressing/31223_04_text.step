{"id": "121349", "time": "2016-09-01T21:51:48.580118", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>So how do we go about actually implementing this simple <b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b>? Here is the pseudo-code to implement <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> when inserting a key <i><b>k</b></i>, in a table of size <i><b>M</b></i> with a backing array called <b>arr</b>, using a <b><span class=\"wysiwyg-color-green\">hash function\u00a0</span></b><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">H(<b><i>k</i></b>):</span></span></p><p></p><pre><code class=\"python\">insert_LinearProbe(Key <b>k</b>, int <b>M</b>):\n\n    index = H(<b>k</b>) \n\n    while(true):\n\n        #check for duplicate insertions\n        if <b>arr</b>[index] == <b>k</b>:\n\n            return\n\n        #check if it is safe to insert \n        else if <b>arr</b>[index] == NULL:\n\n            <b>\ufeffarr</b>[index] = k\n\n            return\n\n        #there is a collision, re-calculate index\n        else:\n\n            index = (index + 1) % <b>M\n\n        </b>#we have tried all possible indexes and we are now going in a circle<b>\n        </b>if index == H(<b>k</b>):\n\n            throw an exception OR enlarge table\n</code></pre><br> Notice that the core of the <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> algorithm is defined by this equation:<br><pre><code>index = (index + 1) % <b>M</b></code></pre><br>By obeying the equation above, we are ensuring that our key is inserted strictly within an index (or more formally an address) <i>inside</i> our <b><span class=\"wysiwyg-color-purple\">hash table</span></b><span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">. Consequently, we call this a\u00a0<b>closed hashing</b> <b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b> (i.e. we will insert the actual key only in an address bounded by the realms of our </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-purple\">hash table</span></b></span><span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">). Moreover, since we are inserting the keys themselves into the calculated addresses, we like to say that\u00a0<b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> is an\u00a0<b>open addressing\u00a0<b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b></b> (i.e. </span></span>the keys are open to move to an address other than the address to which they initially hashed<span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">).<br><br><b><span class=\"wysiwyg-color-red\">Note:</span></b> You will most likely encounter people using the terms <b>closed hashing\u00a0</b>and\u00a0<b>open addressing\u00a0</b>interchangeably since they arguably describe the same method of </span></span><b><span class=\"wysiwyg-color-red\">collision resolution</span></b>.<br><br><b><span class=\"wysiwyg-color-red\">STOP and Think:</span> </b>How would we go about <i>finding<b></b></i> a key using <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>?<br><p></p>", "feedback_correct": "", "video": null, "animation": null}}