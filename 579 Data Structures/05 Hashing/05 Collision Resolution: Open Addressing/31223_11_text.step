{"id": "121623", "time": "2016-09-02T18:29:30.315511", "block": {"animation": null, "text": "<p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">The solution to avoid keys re-inserting themselves right <i>next</i> to another key is pretty intuitive: make the keys re-insert themselves further away from other keys. We do this using a technique called </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">. The concept behind the <b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b> of </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"> is to use two hash functions: $  H_1(k) $ to calculate the hashing index and\u00a0$ H_2(k) $ to calculate the <i>offset</i> in the probing sequence<b>.</b> <span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><br></span></span></span></span></p><p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">More formally, </span></span>$ H_2(k)\u00a0\u00a0\u00a0$ should return an integer value between 1 and <i>M-1</i>, where <i>M</i> is the size of the<b> <span class=\"wysiwyg-color-purple\">hash table</span></b>. <span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">You can think of<b> </b></span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"> as originally having\u00a0$ H_{2}(k)=1 $ (i.e., we always moved the key 1 index away from its original location). </span></span>A common choice in</span></span><span class=\"wysiwyg-color-black\"> <b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"> is to set $ H_2(K) = 1 + \\frac{K}{M} \\% (M-1) $.</span></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><br></span></span></p><p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">Here is the pseudo-code to implement <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span> when inserting a key <i><b>k</b></i>, in a table of size <i><b>M</b></i> with a backing array called <b>arr</b>, using a <b><span class=\"wysiwyg-color-green\">hash function </span></b><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">H(<b><i>k</i></b>). Note that </span></span>the pseudocode for  <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span> is extremely similar to <span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><b> </b></span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b></span> (the changes are highlighted with the comment #NEW):<br></span></span></p><p></p><pre><code class=\"python\">insert_DoubleHash(Key <b>k</b>, int <b>M</b>):\n\n    index = H1(<b>k</b>) \n\u2003   offset = H2(<b>k</b>) #NEW\n\n    while(true):\n\n        #check for duplicate insertions\n        if <b>arr</b>[index] == <b>k</b>:\n\n            return\n\n        #check if it is safe to insert \n        else if <b>arr</b>\ufeff[index] == NULL:\n\n            <b>arr</b>[index] = <b>k</b>\n\n            return\n\n        #there is a collision, re-calculate index\n        else:\n\n            index = (index + offset) % <b>M </b>#NEW<b>\n\n        </b>#we have tried all possible indexes and we are now going in a circle<b>\n        </b>if index == H(<b>k</b>):\n\n            throw an exception OR enlarge table </code></pre><br>STOP and Think: Is <b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b> an <b>open addressing</b> <b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b>?<br><p></p>", "options": {}, "feedback_correct": "", "source": null, "subtitle_files": [], "name": "text", "feedback_wrong": "", "subtitles": {}, "tests_archive": null, "video": null}}