{"id": "122112", "time": "2016-09-01T21:51:56.236445", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p><b><span class=\"wysiwyg-color-red\">Note:</span></b> Another <b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b> that solves <b><span class=\"wysiwyg-color-blue\">Linear Probing'</span></b><span class=\"wysiwyg-color-blue\"><b>s</b></span> clustering problem is called <b><span class=\"wysiwyg-color-blue\">Random Hashing</span></b><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">. The idea behind <b><span class=\"wysiwyg-color-blue\">Random Hashing</span></b> is that we use a pseudorandom number generator <b>seeded by the </b></span></span><span class=\"wysiwyg-color-black\"><b>key</b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><b> </b>to produce a hash value</span></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">. Once that hash value is returned, the algorithm just mods it by the size of the <b><span class=\"wysiwyg-color-purple\">Hash Table,</span></b> <i>M</i>, to produce a valid index that the </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">key</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"> can map to. <br></span></span></p><p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">An important nuance of <b><span class=\"wysiwyg-color-blue\">Random Hashing</span></b> is that we must seed the pseudorandom number generator by the key. Why? Because we need to make sure that our <b><span class=\"wysiwyg-color-green\">hash function</span></b> is deterministic (i.e., that it will <i>always</i> produce the same hash value for the same </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">key</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">). Therefore, the only way we can do that is to guarantee to always use the same seed: the </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">key</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"> we are currently hashing. <br></span></span></p><p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">Overall,  <b><span class=\"wysiwyg-color-blue\">Random Hashing</span></b> is considered to work just as well as </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">. However, random number generation can be </span></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">an expensive procedure and as a result it is more common to just stick with </span></span><b><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span></span></span></b><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">.</span></span><b><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><br></span></span></b></p>", "feedback_correct": "", "video": null, "animation": null}}