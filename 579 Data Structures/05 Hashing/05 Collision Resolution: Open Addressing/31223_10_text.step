{"block": {"animation": null, "source": null, "text": "<p>Intuitively, you might think that, instead of probing one slot over during each step of our scan, we could just choose a larger \"skip\": why not jump\u00a0<i>two</i> slots over? Or\u00a0<i>three</i> slots over? This way, the the elements would be more spaced out, so we would have solved the issue of clumps, right? Unfortunately, it's not that simple, and the following example will demonstrate why simply changing the skip from 1 to some larger value doesn't actually change anything.</p><p>Let's start with the following\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>\u00a0that contains a single element, but this time, let's use a skip of 3:</p><p><span class=\"image-wrapper\"><img src=\"https://ucarecdn.com/1a0f102f-777c-4445-bd7a-2e650a8f9a3b/\" alt=\"\" title=\"Image: https://ucarecdn.com/1a0f102f-777c-4445-bd7a-2e650a8f9a3b/\"></span></p><p>What would happen if we were to try to insert a new element? Like before, it has a $ \\frac{1}{5} $\u00a0chance of indexing to 0, 1, 2, 3, or 4. If it happens to land in slots 1, 2, 3, or 4 (each with $ \\frac{1}{5} $\u00a0probability), we would simply perform the insertion. However, if it were to land in slot 0 (with probability $ \\frac{1}{5} $), we would have a collision. Before, in traditional\u00a0<b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>, we had a skip of 1, so we shifted over to slot 1, so the probability of inserting in slot 1 was elevated (to $ \\frac{2}{5} $). Now, if we index to 0, slot 3 has an elevated probability of insertion (to $ \\frac{2}{5} $, like before). In other words, by using a skip of 3, we have the exact same predicament as before: one slot has a higher probability of insertion than the others! All we've done is\u00a0<i>changed</i> which slot it is that has a higher probability!</p><p><span class=\"image-wrapper\"><img title=\"Image: https://ucarecdn.com/548b142b-87af-4f5b-9b3e-53a9bd19a63a/\" alt=\"\" src=\"https://ucarecdn.com/548b142b-87af-4f5b-9b3e-53a9bd19a63a/\"></span></p><p>Even though it might\u00a0<i>appear</i> as though the clumps have disappeared because there's more space between filled slots, it turns out that the clumps still do in fact exist: they are just harder to see. The reason\u00a0<i>why</i> clumps tend to grow is the exact probabilistic issue we saw above (and on the previous step): with the initial indexing, all slots are equally likely to be filled, but upon collision, we deterministically increase the probability of filling certain slots, which are the slots that expand a clump. Instead, we need to think of a clever way to somehow\u00a0<i>evenly distribute</i>\ufeff the insertion probabilities over the open slots, but in a way that is deterministic such that\u00a0we would still be able to find the key if we were to search for it in the future.</p>", "feedback_correct": "", "feedback_wrong": "", "video": null, "name": "text", "subtitles": {}, "subtitle_files": [], "options": {}, "tests_archive": null}, "id": "122232", "time": "2016-09-20T01:13:06.291326"}