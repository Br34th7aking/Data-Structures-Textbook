{"id": "121395", "time": "2016-09-01T21:51:53.688676", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p>As you hopefully agree, <b><span class=\"wysiwyg-color-blue\">Linear Probing </span></b><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">is a fairly simple and straightforward solution to <b><span class=\"wysiwyg-color-red\">collision resolution</span></b>. So what's the catch? <br></span></span></p><p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">We had originally introduced the concept of <b><span class=\"wysiwyg-color-purple\">hash tables</span></b> </span><span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">because we wanted to achieve extremely fast operations. So does using </span></span><b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> <span class=\"wysiwyg-color-black\">slow us down? Unfortunately, yes. As you might have noticed throughout doing the exercise breaks, </span><b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> <span class=\"wysiwyg-color-black\">often resorts to having to <i>linearly scan</i> the <b><span class=\"wysiwyg-color-purple\">hash table</span></b> to find an open slot to insert a key. As a result, </span><span class=\"wysiwyg-color-black\">our worst case time complexity for an insert operations becomes O(<i>N</i>). </span><span class=\"wysiwyg-color-black\">The same goes for attempting to <i>find</i> a key in the </span><b><span class=\"wysiwyg-color-purple\">hash table</span></b><span class=\"wysiwyg-color-black\">; worst case scenario, we must linearly scan the entire <b><span class=\"wysiwyg-color-purple\">hash table</span></b> to see if the key is there. <span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">However, with a table that is not very full, we can in fact  achieve an <i>average constant</i> time complexity for our operations. </span></span><br></span></span></p><p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">Another negative quality about <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> that you may have noticed is that it results in clusters or \"clumps\" of keys throughout the <b><span class=\"wysiwyg-color-purple\">hash table</span></b>. This comes as a direct result of the keys being quite cozy creatures and attempting to re-insert themselves right <i>next</i> to another key.\u00a0 We also see the same problem when clusters of \"deleted\" flags start to appear as we attempt to delete elements. Consequently, once all these clusters start dominating the <b><span class=\"wysiwyg-color-purple\">hash table</span></b>, our performance deteriorates extremely fast.<br></span></span></p><p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">So how can we avoid being slowed down by clusters of keys? </span></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><br></span></span></p>", "feedback_correct": "", "video": null, "animation": null}}