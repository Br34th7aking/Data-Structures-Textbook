{"id": "121624", "time": "2016-09-01T21:51:55.415803", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "text", "subtitles": {}, "tests_archive": null, "source": null, "text": "<p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">By merely introducing a second offset<span class=\"wysiwyg-color-green\">\u00a0</span><b><span class=\"wysiwyg-color-green\">hash function</span></b>,\u00a0</span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><b>\u00a0</b>turns out to truly outperform </span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"> in practice because we no longer face the inevitable fast deterioration of performance resulting from clusters of keys dominating the <b><span class=\"wysiwyg-color-purple\">hash table</span></b>. By using a deterministic second <b><span class=\"wysiwyg-color-green\">hash function</span></b> that depends upon the key being inserted, we are able to get a more even distribution of the keys while still having the ability to figure out where we expect to find the key. However, implementing the delete method for <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><b>\u00a0</b></span></span>still turns out to be as painful as it was for  <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b></span> and we thus still have to worry about re-inserting elements into the <b><span class=\"wysiwyg-color-purple\">hash table</span></b> to clean up the \"delete\" flags. Also, in both   <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b></span> and <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Double Hashing</span></b></span>, the probability of a collision increases each time we insert a new</span></span><span class=\"wysiwyg-color-black\"> <b><span class=\"wysiwyg-color-blue\">key</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">.<br></span></span></p><p><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">Consequently, we will explore <span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\">in the next lesson\u00a0</span></span>an alternative\u00a0<b><span class=\"wysiwyg-color-red\">collision resolution strategy</span></b> called <span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">Separate Chaining</span></b></span> which vastly simplifies the process of deleting elements and more importantly, doesn't require the probability of a collision to increase each time we insert a new\u00a0<b></b></span></span><span class=\"wysiwyg-color-black\"><b><span class=\"wysiwyg-color-blue\">key</span></b></span><span class=\"wysiwyg-color-blue\"><span class=\"wysiwyg-color-black\"><b></b>\u00a0into our   <b><span class=\"wysiwyg-color-purple\">hash table</span></b>.</span></span><span class=\"wysiwyg-color-black\"><b> </b></span><br></p>", "feedback_correct": "", "video": null, "animation": null}}