{"id": "121547", "time": "2016-09-01T21:52:04.099641", "block": {"subtitle_files": [], "feedback_wrong": "", "options": {}, "name": "choice", "subtitles": {}, "tests_archive": null, "source": {"is_html_enabled": true, "options": [{"text": "O(1)", "feedback": "Hint: The insert method does not allow duplicates; what does this require?", "is_correct": false}, {"text": "O(log N)", "feedback": "", "is_correct": false}, {"text": "O(N)", "feedback": "", "is_correct": true}], "is_multiple_choice": true, "preserve_order": true, "is_always_correct": false, "sample_size": 3}, "text": "<b><span class=\"wysiwyg-color-green\">Exercise Break:</span></b> Consider a<b> <span class=\"wysiwyg-color-purple\">Hash Table</span></b> in which collisions are resolved using \n<b><span class=\"wysiwyg-color-blue\">Separate Chaining</span></b>. Select the tightest worst case time complexity for an insert method that uses a doubly linked list (i.e., there are head and tail pointers) and inserts keys to the end of the linked lists. This insert method does not allow duplicates. <br><br>", "feedback_correct": "", "video": null, "animation": null}}