{"block": {"name": "text", "text": "<p>We mentioned earlier that elements in the disjoint set are connected through the <span class=\"wysiwyg-color-green\"><b>union</b></span><i> </i>operation (we care about connecting elements in our set in order to be able to show a relationship between the elements, just like in a general graph).<br></p><p> How exactly does the <span class=\"wysiwyg-color-green\"><b>union</b> </span>operation work? Formally, the purpose of the <span class=\"wysiwyg-color-green\"><b>union</b></span> operation is to join two sets. This implies that, after we have unioned two different sets, the two sets should end up with the <b>same</b> sentinel node. Consequently, a lot of freedom actually surrounds the concept behind the <span class=\"wysiwyg-color-green\"><b>union</b></span> operation because there are so many ways to merge two sets of vertices.</p><p>For example, suppose we start with the disjoint set below:</p><p><img alt=\"\" src=\"https://ucarecdn.com/c390a70e-b9da-40ec-9c71-8fa0c0c3bc58/\"></p><p>Let's say we want to union(F, E) (i.e., merge the set vertex F is in with the set vertex E is in). First we must find the set that contains vertex F by calling \"find\" on vertex F. This would return vertex F since the sentinel node of vertex F is vertex F. Second we must find the set that contains vertex E by by calling \"find\" on vertex E. This would return vertex C since the sentinel node of vertex E is vertex C. Lastly we must find a way to merge both sets. An intuitive way might be to union the sets by connecting vertex C to vertex F like so:<br></p><p><img title=\"Image: https://ucarecdn.com/fee14a0d-9c92-462b-b7f8-271d3eddafd7/\" alt=\"\" src=\"https://ucarecdn.com/fee14a0d-9c92-462b-b7f8-271d3eddafd7/\"></p><p>In the example above, we basically just stacked the vertices and literally connected the sentinel node of vertex E (vertex C) to the sentinel node of vertex F (vertex F). Thus vertex F becomes the parent and vertex C becomes the child. Notice that we specifically connected the <b>sentinel nodes</b> of the two elements on which we called union, not necessarily the elements themselves! This is extremely important because, otherwise, we might be disrupting the structure of our Up-Tree.\u00a0Now, the important question to ask is: Do vertex F and vertex E end up returning the <b>same</b> sentinel node? The answer in this case is obviously yes; if we traverse up from both vertex E and vertex F, the root is vertex F.</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "117333", "time": "2018-03-04T14:40:01.960126"}