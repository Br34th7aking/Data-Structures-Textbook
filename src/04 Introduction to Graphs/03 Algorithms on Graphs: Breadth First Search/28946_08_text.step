{"block": {"name": "text", "text": "<p>In terms of the actual implementation of <b><span class=\"wysiwyg-color-green\">Breadth First Search</span></b>, we take advantage of the <b>queue</b> ADT to determine the order in which to explore vertices. The intuition behind choosing a queue for <b><span class=\"wysiwyg-color-green\">BFS</span></b> stems from a queue's <i>first-in first-out</i> property. With this property, we guarantee that we will explore all the vertices enqueued (put on the queue) first, before moving on to the vertices adjacent to the next dequeued vertex. <br></p>\n\n\n\n\n\n\n\n\n\n\n<p></p><pre><code class=\"\"><p><b>BFSShortestPath(u,v):</b><br>\u00a0   q = an empty queue<br>\u00a0   add (0,u) to q // (0,u) -&gt; (length from u, current vertex)<br>\u00a0   while q is not empty:<br>\u00a0 \u00a0     (length,curr) = q.dequeue()<br>\u00a0 \u00a0     if curr == v: // if we have reached the vertex we are searching for<br>\u00a0 \u00a0 \u00a0       return length<br>\u00a0 \u00a0     for all outgoing edges (curr,w) from curr: // otherwise explore all neighbors\n            if w has not yet been visited:\n                add (length+1,w) to q\n    return \"FAIL\" // if I reach this point, then no path exists from u to v</p></code></pre>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "111803", "time": "2017-11-07T22:22:01.905812"}