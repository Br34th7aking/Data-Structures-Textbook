{"block": {"name": "text", "text": "<h1>Graphs and Graph Representation</h1><p><b>Summary Description</b></p><ul><li>A Graph is simply a set of nodes (or \"vertices\") <i>V</i>\u00a0and a set of edges <i>E</i>\u00a0that connect them</li><li>Edges can be either \"directed\" (i.e., an edge from\u00a0<i>u</i> to\u00a0<i>v</i> does not imply an edge from\u00a0<i>v</i> to\u00a0<i>u</i>) or \"undirected\" (i.e., an edge from\u00a0<i>u</i> to\u00a0<i>v</i> can also be traversed from\u00a0<i>v</i> to\u00a0<i>u</i>)</li><li>Edges can be either \"weighted\" (i.e., there is some \"cost\" associated with the edge) or \"unweighted\"</li><li>We call a graph \"dense\" if it has a relatively large number of edges, or \"sparse\" if it has a relatively small number of edges</li><li>Graphs are typically represented as Adjacency Matrices or Adjacency Lists</li><li>For our purposes in this text, we disallow \"multigraphs\" (i.e., we are disallowing \"parallel edges\": multiple edges with the same start and end node), meaning our graphs have at most |<i>V</i>|\u00b2 edges</li></ul><p></p><p></p><p><br></p><h2>Time/Space Complexities of an Adjacency Matrix</h2><p><b>Time Complexity (Adjacency Matrix)</b></p><ul><li>We can <b>check if an edge exists</b> between two vertices\u00a0<i>u</i> and\u00a0<i>v</i> (and check its cost, if the graph is \"weighted\") in\u00a0<b>O(1)</b> time by simply looking at cell (<i>u</i>,\u00a0<i>v</i>) of our Adjacency Matrix</li><li>If we want to <b>iterate over all outgoing edges</b> of a given node\u00a0<i>u</i>, we can do no better than\u00a0<b>O(|<i>V</i>|)</b> time in the worst case because we would have to iterate over the entire\u00a0<i>u</i>-th row of the Adjacency Matrix (which has |<i>V</i>| columns)</li></ul><p><b>Space Complexity (Adjacency Matrix)</b><br></p><p></p><ul><li><b>O(|<i>V</i>|\u00b2)</b>\u00a0\u2014 If each of our |<i>V</i>| vertices has an edge to each of the other |<i>V</i>| vertices (the most dense our graph can be)<br></li></ul><p><br></p><h2>Time/Space Complexities of an Adjacency List<br></h2><p></p><p><b>Time Complexity (Adjacency List)</b></p><ul><li>We can\u00a0<b>check if an edge exists</b> between two vertices\u00a0<i>u</i> and\u00a0<i>v</i> (and check its cost, if the graph is \"weighted\") by searching for node <i>v</i> in the list of edges in node\u00a0<i>u</i>'s slot in the Adjacency List, which would take\u00a0<b>O(|<i>E</i>|)</b> time in the worst case (if all |<i>E</i>| of our edges came out of node\u00a0<i>u</i>)</li><li>If we want to\u00a0<b>iterate over all outgoing edges</b> of a given node\u00a0<i>u</i>, because an adjacency list has direct access to this list, we can do so in the least amount of time possible, which would be <b>O(|</b><i><b>E</b></i><b>|)</b> only in the event that all |<i>E</i>| of our edges come out of node\u00a0<i>u</i></li></ul><p></p><p><b>Space Complexity (Adjacency List)</b><br></p><p></p><ul><li><b>O(|<i>V</i>|+|<i>E</i>|)</b>\u00a0\u2014 We must allocate one slot for each of our |<i>V</i>| vertices, and we place each of our |<i>E</i>| edges in their corresponding slot<br></li></ul><p></p><p></p><p></p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "124155", "time": "2018-03-04T14:42:55.802290"}