{"id": "124491", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<h1>Minimum Spanning Trees: Prim's and Kruskal's Algorithms</h1><p><b>Summary Description</b></p><ul><li>Given a graph\u00a0<i>G</i>, a Spanning Tree of\u00a0<i>G</i> is a tree that hits every node in\u00a0<i>G</i></li><li>Given a graph\u00a0<i>G</i>, a Minimum Spanning Tree of\u00a0<i>G</i> is a Spanning Tree of\u00a0<i>G</i> that has the minimum overall cost (i.e., that minimizes the sum of all edge weights)</li><li>We discussed two algorithms that can find a Minimum Spanning Tree in an arbitrary graph\u00a0<i>G</i> equally efficiently</li><li>Prim's Algorithm starts with a one-node tree and repeatedly finds a minimum-weight edge that connects a node in the tree to a node that is not in the tree, and adds that connecting edge to the tree</li><li>Kruskal's Algorithm starts with a forest of one-node trees and repeatedly finds a minimum-weight edge that connects two previously unconnected trees in the forest and merges the two trees using the edge</li></ul><p></p><p></p><p><br></p><h2>Time Complexity of Prim's Algorithm</h2><p><b>Worst-Case Time Complexity (Prim's Algorithm)</b></p><ul><li><b>O(|</b><i><b>V</b></i><b>| + |</b><i><b>E</b></i><b>| log |</b><i><b>E</b></i><b>|)</b>\u00a0\u2014\u00a0The formal proof is too complex for a summary slide</li></ul><p><br></p><h2>Time Complexity of Kruskal's Algorithm<br></h2><p></p><p><b>Time Complexity (Adjacency List)</b></p><ul><li><b>O(|</b><i><b>V</b></i><b>| + |</b><i><b>E</b></i><b>| log |</b><i><b>E</b></i><b>|)</b>\u00a0\u2014 The formal proof is too complex for a summary slide</li></ul><p></p><p></p><p></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-02-14T23:22:13.629638"}