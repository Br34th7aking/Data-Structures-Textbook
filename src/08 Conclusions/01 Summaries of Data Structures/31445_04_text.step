{"id": "124151", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<h1>Heap</h1><p><b>Summary Description</b></p><ul><li>A Heap is a complete binary tree that satisfies the <i>Heap Property</i></li><li><i>Heap Property</i>:\u00a0For all nodes <i>A</i>\u00a0and <i>B</i>, if node <i>A</i>\u00a0is the parent of node <i>B</i>,<i></i>\u00a0then node <i>A</i>\u00a0has <i>higher priority</i>\u00a0(or equal priority) than node <i>B</i></li><li>A <i>min</i>-heap is a heap in which every node is <i>smaller</i> than (or equal to) all of its children (or has no children)<br></li><li>A <i>max</i>-heap is a heap where every node is <i>larger</i> than (or equal to) all of its children (or has no children)<br></li><li>It is common to implement a Heap as an Array List because all of the data will be localized in memory (faster in practice)</li><li>If a Heap is implemented as an Array List, the root is stored in index 0, the next node (in a level-order traversal) is at index 1, then at index 2, etc.</li><li>If a Heap is implemented as an Array List, for a node\u00a0<i>u</i> stored at index\u00a0<i>i</i>,\u00a0<i>u</i>'s parent is stored at index\u00a0$ \\lfloor{\\frac{i-1}{2}}\\rfloor $,\u00a0<i>u</i>'s left child is stored at index\u00a0$  2i+1  $, and\u00a0<i>u</i>'s right child is stored at index\u00a0$  2i+2  $\u00a0</li></ul><p></p><p><br></p><h2>Time/Space Complexities of a Heap</h2><p><b>Worst-Case Time Complexity</b></p><ul><li><b><span class=\"wysiwyg-color-green\">Peek:</span> O(1)</b>\u00a0\u2014 We just return the root, which is a O(1) operation</li><li><b><span class=\"wysiwyg-color-purple\">Insert:</span> O(log\u00a0<i>n</i>)</b>\u00a0\u2014 If our new element has to bubble up the entire tree, which has a height of O(log\u00a0<i>n</i>)<br></li><li><b><span class=\"wysiwyg-color-red\">Pop:</span> O(log\u00a0<i>n</i>)</b>\u00a0\u2014 If our new root has to trickle down the entire tree, which has a height of O(log <i>n</i>)<br></li></ul><p><b>Average-Case Time Complexity</b></p><p></p><ul><li><b><span class=\"wysiwyg-color-green\">Peek:</span> O(1)</b>\u00a0\u2014 We just return the root, which is a O(1) operation</li><li><b><span class=\"wysiwyg-color-purple\">Insert:</span> O(log\u00a0<i>n</i>)</b>\u00a0\u2014\u00a0The formal proof is too complex for a summary slide<br></li><li><b><span class=\"wysiwyg-color-red\">Pop:</span> O(log\u00a0<i>n</i>)</b>\u00a0\u2014\u00a0The formal proof is too complex for a summary slide<br></li></ul><p><b>Best-Case Time Complexity</b><br></p><p></p><ul><li><b><span class=\"wysiwyg-color-green\">Peek:</span> O(1)</b>\u00a0\u2014 We just return the root, which is a O(1) operation<br></li><li><b><span class=\"wysiwyg-color-purple\">Insert:</span> O(1)</b>\u00a0\u2014 If our new element doesn't have to bubble up at all<br></li><li><b><span class=\"wysiwyg-color-red\">Pop:</span> O(1)</b>\u00a0\u2014 If our new root doesn't have to trickle down at all</li></ul><p><b>Space Complexity</b><br></p><p></p><ul><li><b>O(<i>n</i>)</b>\u00a0\u2014 We typically implement a Heap as an Array List</li></ul><p></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-01-05T20:14:51.037054"}