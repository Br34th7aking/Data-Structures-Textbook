{"id": "122164", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>It might seem strange, but it turns out that it can be extremely difficult to achieve\u00a0<b><span class=\"wysiwyg-color-green\">true</span>\u00a0random number generation</b>. The method by which we generate\u00a0<b><span class=\"wysiwyg-color-green\">true</span> random numbers</b> is by\u00a0measuring some physical phenomenon that is expected to be random and then compensating for possible biases in the measurement process.\u00a0Example sources of physical randomness include measuring atmospheric noise, thermal noise, and other external electromagnetic and quantum phenomena: things that demonstrate natural\u00a0<i>entropy</i> (or disorder).</p><p>The speed at which entropy can be harvested from natural sources is dependent on the underlying physical phenomena being measured, which is typically significantly slower than the speed of a computer processor. As a result, the computer processes that measure these sources of entropy are said to be \"blocking\": they have to slow down (or halt entirely)\u00a0until enough entropy is harvested to meet the demand. As a result,\u00a0<b><span class=\"wysiwyg-color-green\">true</span> random number generation</b> is typically very\u00a0<i>slow</i>.<br></p><p>It turns out, however, that there exist\u00a0computational algorithms that can produce long sequences of seemingly random results, which are in fact completely determined by a shorter initial value, known as a <b>seed</b>. Basically, you create an instance of a random number, and you\u00a0<i>seed</i> it with some number, which is then used to generate the sequence of \"random\" numbers. This type of a random number generator is said to be\u00a0<b><span class=\"wysiwyg-color-red\">pseudo</span>-random</b> because it\u00a0<i>seems</i> to be random for all intents and purposes, but given the seed, it's fully deterministic.</p><p>For example, let's say that yesterday, we seeded some random number generator using the integer 42 as our seed. The sequence of numbers we received as we queried the random number generator\u00a0<i>seemed</i> to be randomly distributed. However, let's say that today, we seed the random number generator, again with the integer 42 as our seed. The sequence of numbers we receive today will be\u00a0<i>completely identical</i> to the sequence of numbers we received yesterday! Hence, the random number generator is\u00a0<b><span class=\"wysiwyg-color-red\">pseudo</span>-random</b>. Because these algorithms for generating\u00a0<b>pseudo-random</b> numbers are not bound by any physical measurements, they are\u00a0<i>much faster</i>\u00a0to generate than\u00a0<b><span class=\"wysiwyg-color-green\">true</span> random number generation</b>.</p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b> We mentioned that generating\u00a0<b><span class=\"wysiwyg-color-green\">true</span> random numbers</b> is very slow, but generating\u00a0<b><span class=\"wysiwyg-color-red\">pseudo</span>-random numbers</b> based off of some seed number is very fast. Is there some way we can merge the two approaches to get reasonably good randomness that is fast to generate?<br></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-02-14T23:11:53.387883"}