{"time": "2016-09-20T20:50:58.090338", "block": {"name": "text", "subtitles": {}, "source": null, "subtitle_files": [], "feedback_wrong": "", "video": null, "animation": null, "feedback_correct": "", "tests_archive": null, "text": "<p>Next, we will discuss the differences between <b>variables</b> in Java and C++. Note that variables in C++ can actually be much more complex than what we cover here, but the more complicated details are out of the scope of this text. This is just to teach you the basics.</p><p><b>Variable Safety:</b> In Java, if you declare a local variable but do not initialize it before you try to use it, the compiler will throw an error. However, in C++, if you declare a local variable but do not initialize it before you try to use it, the compiler will NOT throw an error! It will simply use whatever random \"garbage data\" happened to be at that location in memory! This can cause a LOT of headache when debugging your code, so always remember to initialize your variables in C++! Also, in Java, if you attempt to \"demote\" a variable (i.e., store it in a smaller datatype) without explicitly casting it as the lower datatype, the compiler will throw an error. However, in C++, the compiler will not complain! Below is perfectly valid C++ code in which we do both: we declare two variables and use them without initializing them, and we then demote to a smaller datatype without explicitly typecasting.</p><p></p><pre><code class=\"cpp\">int harry; // dummy variable 1\r\nint lloyd; // dummy variable 2\r\nbool dumbAndDumber = (harry + lloyd); // C++ will allow this!</code></pre><p></p><p><b>Global Variables:</b> In Java, all variables must be declared either within a class or within a method. In C++, however, variables can be declared outside of functions and classes. These \"global variables\" can be accessed from any function in a program, which makes them difficult to manage, so try to avoid using them.</p><p></p><pre><code class=\"cpp\">bool dummy = true;\r\nclass DummyClass {\r\n    // some stuff here\r\n};\r\nint main() {\r\n    cout &lt;&lt; dummy; // this is valid\r\n}</code></pre><p></p><p><b>Constant Variables:</b> In Java, a variable can be made so that it cannot be reassigned by using the <span class=\"wysiwyg-font-tt\">final</span> keyword.\u00a0 In C++, the equivalent keyword is <span class=\"wysiwyg-font-tt\">const</span>, though there are some subtle differences between Java's \r\n<span class=\"wysiwyg-font-tt\">final</span> \r\n\r\nand C++'s \r\n<span class=\"wysiwyg-font-tt\">const</span>.\u00a0 In Java \r\n<span class=\"wysiwyg-font-tt\">final</span>\r\n\r\n\r\n\r\n\r\n\r\nsimply prevents the variable from being reassigned.\u00a0 If the data itself is mutable, it can still be changed.\u00a0 In C++ for a variable that directly references (mutable) data, <span class=\"wysiwyg-font-tt\">const</span> will prevent that data from being changed.\u00a0 Actually, the C++ \r\n<span class=\"wysiwyg-font-tt\">const</span>\r\n\r\nkeyword can be a bit tricky, and we'll discuss it in more detail in a few steps.<br></p><p></p><pre><code class=\"cpp\">int main() {\r\n    const string DUMMY_NAME = \"Harry\";  // DUMMY_NAME cannot be reassigned and \"Harry\" cannot be modified\r\n    DUMMY_NAME = \"Barry\";  // This is not allowed!  But if DUMMY_NAME were not const it would be OK\r\n    DUMMY_NAME[0] = 'L';   // This is not allowed!  But if DUMMY_NAME were not const it would be OK\r\n}</code></pre><p></p>", "options": {}}, "id": "95890"}