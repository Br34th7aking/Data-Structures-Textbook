{"id": "111773", "block": {"feedback_correct": "", "name": "choice", "feedback_wrong": "", "text": "<p><b><span class=\"wysiwyg-color-purple\">EXERCISE BREAK:</span></b> What is the tightest upper-bound for the time complexity of the following segment of C++ code (in Big-O notation)?</p><p></p><pre><code class=\"cpp\">void tricky(int n) {\n    int operations = 0;\n    while(n &gt; 0) {\n        for(int i = 0; i &lt; n; i++) {\n            cout &lt;&lt; \"Operations: \" &lt;&lt; operations++ &lt;&lt; endl;\n        }\n        n /= 2;\n    }<br>}</code></pre><div><br></div><div><b><span class=\"wysiwyg-color-red\">HINT:</span></b> Does the sum representing the number of operations performed converge to some function of\u00a0<i>n</i>?</div>", "subtitle_files": [], "source": {"preserve_order": true, "is_multiple_choice": false, "is_always_correct": false, "options": [{"text": "O(1)", "feedback": "", "is_correct": false}, {"text": "O(log <i>n</i>)", "feedback": "", "is_correct": false}, {"text": "O(<i>n</i>)", "feedback": "", "is_correct": true}, {"text": "O(<i>n</i> * log <i>n</i>)", "feedback": "", "is_correct": false}, {"text": "O(<i>n</i>\u00b2)", "feedback": "", "is_correct": false}], "sample_size": 5, "is_options_feedback": false, "is_html_enabled": true}, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-06-08T22:30:08.311683"}