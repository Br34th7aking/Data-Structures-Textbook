{"block": {"name": "text", "text": "<p>\n\nFor example, say we have a list of <i>n</i>\u00a0numbers and, for each number, we want to print out the number and its opposite. Assuming the \"print\" operation is a single operation and the \"opposite\" operation is also a single operation, we will be performing 3 operations for each number (print itself, return the opposite of it, and print the opposite).<br></p><p>If we have <i>n</i> elements and we will be performing exactly 3 operations on each element, we will be performing exactly 3<i>n</i>\u00a0operations. Therefore, we would say that this algorithm is O(<i>n</i>), because there exists some constant (3) for which the number of operations performed by our algorithm is always bounded by the function <i>g</i>(<i>n</i>) = <i>n</i>.\n\n</p><p>Note that, although this algorithm is O(<i>n</i>), it is also technically O(<i>n</i>\u00b2) and any other larger function of\u00a0<i>n</i>, because technically, these are all functions that are upper-bounds on the function\u00a0<i>f</i>(<i>n</i>) = 3<i>n</i>. However, when we describe algorithms, we always want to describe them using the tightest possible upper-bound.</p><p>\n\nHere's another example: say I have an algorithm that, given a list of <i>n</i>\u00a0students, prints out 5 header lines (independent of\u00a0<i>n</i>) and then prints the <i>n</i>\u00a0students' names and grades on separate lines. This algorithm will perform 2<i>n</i>\u00a0+ 5 operations total: 2 operations per student (print name, print grade) and 5 operations independent of the number of students (print 5 header lines). The time complexity of this algorithm in Big-O notation would be O(2<i>n</i>\u00a0+ 5), which we would simplify to O(<i>n</i>) because we drop the constant (2<i>n</i>\u00a0becomes <i>n</i>) and drop all lower terms (5 &lt; <i>n</i>\u00a0as <i>n</i>\u00a0becomes large).\n\n<br></p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "95854", "time": "2017-11-07T22:15:28.043859"}