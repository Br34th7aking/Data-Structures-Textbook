{"time": "2016-09-20T20:51:50.471320", "block": {"name": "text", "subtitles": {}, "source": null, "subtitle_files": [], "feedback_wrong": "", "video": null, "animation": null, "feedback_correct": "", "tests_archive": null, "text": "<p>There are three main types of version control systems (VCSs): <b><span class=\"wysiwyg-color-green\">local</span></b>, <b><span class=\"wysiwyg-color-blue\">centralized</span></b>, and <b><span class=\"wysiwyg-color-purple\">distributed</span></b>.</p><p>A <b><span class=\"wysiwyg-color-green\">local VCS</span></b> is essentially a more sophisticated way of saving different versions of a file locally (think \"Final_Essay_rough.doc\", \"Final_Essay_final.doc\", \"Final_Essay_final_final.doc\", \"Final_Essay_final_seriously_this_time\", etc.). In practice, a local VCS does not actually save all of these different versions of the same file. Instead, for each revision of your file, it keeps a \"patch\" (i.e., a list of edits) with respect to a previous version. Thus, to re-create what a file looked like at any point in time, the local VCF simply adds up all of the patches until that time point.</p><p>A local VCS solves the issue of keeping a personal set of revisions to a file, but as we know, most real-world projects are not one-person jobs: they typically consist of collaborative efforts of an entire team. A <b><span class=\"wysiwyg-color-blue\">centralized VCS</span></b> solves this need to have version control when dealing with revisions from multiple individuals. Centralized VCSs have a single server that contains all of the versioned files. Individual developers check out files from that central place when they want to make changes. This works quite well, but it has some flaws. One large flaw being: What if the centralized server goes down, even temporarily? During that downtime, nobody can collaborate at all, nor can they save any changes to anything they were working on. Also, if the server goes down permanently (e.g. the hard drive crashes), everything except for what the developers might have had checked out locally would be lost forever.</p><p>Consequently, we have the <b><span class=\"wysiwyg-color-purple\">distributed VCS</span></b>, such as Git. Distributed VCS clients don't just check out the latest snapshot of the files in the project: they fully mirror the repository locally. In other words, every clone is a full backup of all the data: if the centralized server dies, any local client repository can simply be copied back to the server to restore it.</p>", "options": {}}, "id": "96218"}