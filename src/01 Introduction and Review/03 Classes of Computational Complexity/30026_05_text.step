{"block": {"name": "text", "text": "<p>The third class of computational problems we will discuss is\u00a0<b><span class=\"wysiwyg-color-red\">NP-Hard</span></b>\u00a0(<i><b><span class=\"wysiwyg-color-red\">N</span></b></i>ondeterministic <i><b><span class=\"wysiwyg-color-red\">P</span></b></i>olynomial-time <i><b><span class=\"wysiwyg-color-red\">hard</span></b></i>). Describing\u00a0<b><span class=\"wysiwyg-color-red\">NP-Hard</span></b> problems is a bit trickier because we want to avoid going too deep in the topic; but basically, a problem can be considered\u00a0<b><span class=\"wysiwyg-color-red\">NP-Hard</span></b> if it is\u00a0<i>at least</i> as hard as the hardest problems in <b><span class=\"wysiwyg-color-blue\">NP</span></b>. More\u00a0precisely, a problem <i>H</i> is <b><span class=\"wysiwyg-color-red\">NP-Hard</span></b> when every problem <i>L</i> in <b><span class=\"wysiwyg-color-blue\">NP</span></b> can be \"reduced\", or transformed, to problem\u00a0<i>H</i>\u00a0in polynomial time. As a result, if someone were to find a polynomial-time algorithm to solve any\u00a0<b><span class=\"wysiwyg-color-red\">NP-Hard</span></b> problem, this\u00a0would give polynomial-time algorithms for all problems in <b><span class=\"wysiwyg-color-blue\">NP</span></b>.</p><p>The \"Subset Sum Problem\" described previously is an example of an <b><span class=\"wysiwyg-color-red\">NP-Hard</span></b> problem. There's no \"clean\" way to come to this realization on your own without taking a complexity theory course, so take our word that it is (an explanation would go well out of the scope of this text).</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "116975", "time": "2017-11-07T22:15:39.014277"}