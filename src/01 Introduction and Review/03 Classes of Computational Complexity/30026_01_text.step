{"block": {"name": "text", "text": "<p>\n\nNow that we have the ability to determine algorithm time complexity in our arsenal of skills, we have found a way to take an arbitrary algorithm and describe its performance as we scale its input size. Note that, however, algorithms are simply <i>solutions</i> to <i>computational problems</i>. A single computational problem can have numerous algorithms as solutions. As a simple example, say our computational problem is the following: \"Given a vector containing <i>n</i> integers, return the largest element\". Below is one algorithmic solution:\n\n<br></p><p></p><pre><code class=\"cpp\">int getMax1(vector&lt;int&gt; vec) {\n    int max = vec[0];\n    for(int i : vec) {\n        if(i &gt; max) {\n            max = i;\n        }\n    }\n    return max;\n}\n</code></pre><p></p><p>Equivalent Python code has been produced below:</p><p></p><pre><code class=\"python\">def getMax1(vec):\n    m = vec[0]\n    for i in vec:\n        if i &gt; m:\n            m = i\n    return m</code></pre><p></p><p>Below is a second algorithmic solution that is equally correct, but that is clearly less efficient (and more convoluted):</p><p></p><pre><code class=\"cpp\">int getMax2(vector&lt;int&gt; vec) {\n    for(int i : vec) {\n        bool best = true;\n        for(int j : vec) {\n            if(i &lt; j) {\n                best = False;\n                break;\n            }\n        }\n        if(best) {\n            return i;\n        }\n    }\n}</code></pre><p></p><p>Below is equivalent Python code:</p><p></p><pre><code class=\"python\">def getMax2(vec):\n    for i in vec:\n        best = True\n        for j in vec:\n            if i &lt; j:\n                best = False\n                break\n        if best:\n            return i</code></pre><p></p><p>As we can deduce, the first algorithm has a time complexity of O(<i>n</i>), whereas the second algorithm has a time complexity of O(<i>n</i>\u00b2). We were able to describe the two <i>algorithms</i> (getMax1 and getMax2), but is there some way we can describe the <i>computational problem</i> itself?</p><p>In this section, we will be discussing the main classes of computational problems: <b><span class=\"wysiwyg-color-green\">P</span></b>, <b><span class=\"wysiwyg-color-blue\">NP</span></b>,\n\n<b><span class=\"wysiwyg-color-red\">NP-Hard</span></b>, and <b><span class=\"wysiwyg-color-purple\">NP-Complete</span></b>.</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "115250", "time": "2017-11-07T22:15:35.554005"}