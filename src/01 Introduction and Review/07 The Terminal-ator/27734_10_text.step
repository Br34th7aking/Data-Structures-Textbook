{"id": "122405", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>The simple <span class=\"wysiwyg-font-tt\">g++</span> command we just learned is great if your code is simple and fits in just a handful of files, but as you become a more seasoned programmer, you will begin embarking on more and more complex projects. When working on a large and robust project, good practice dictates that the program should be modularized into smaller individual components, each typically in its own file, for the sake of organization and cleanliness. Although this makes the actual programming and organization easier, it makes compiling a bit more complex: the more components a program has, the more things we need to specify to <span class=\"wysiwyg-font-tt\">g++</span> for compilation.</p><p>As a result, developers of complex projects will include a <span class=\"wysiwyg-font-tt\"><b>Makefile</b></span>, which is a file that contains all of the information needed to compile the code. Then, as a user, we simply download the project and call the <span class=\"wysiwyg-font-tt\"><b>make</b></span> command, which parses the <span class=\"wysiwyg-font-tt\">Makefile</span> for us and performs the compilation on its own. The basic syntax for a <span class=\"wysiwyg-font-tt\">Makefile</span> is as follows (by <span class=\"wysiwyg-font-tt\">[tab]</span>, we mean the tab character):</p><p></p><pre><code class=\"no-highlight\">target: dependencies<br>[tab]system command<br></code></pre><p></p><p>For example, we could compile the previous example using the following <span class=\"wysiwyg-font-tt\">Makefile</span>:</p><p></p><pre><code class=\"bash\">all:\n\tg++ -o hello_world HelloWorld.cpp\n</code></pre><p></p><p>Note that the whitespace above is a\u00a0<b>tab character</b>,\u00a0<i>not</i> multiple spaces. In a <span class=\"wysiwyg-font-tt\">Makefile</span>, you\u00a0<b>must</b> use tab characters for indentation. To compile our code, assuming we have <span class=\"wysiwyg-font-tt\">HelloWorld.cpp</span> and <span class=\"wysiwyg-font-tt\">Makefile</span> in the same directory, we can go into the directory and do this:</p><p></p><pre><code class=\"bash\">$ make          # run the make command to compile our code\n$ ./hello_world # run our program\nHello, world!   # our code's output</code></pre><p></p><p>In the example above, our target is called <span class=\"wysiwyg-font-tt\"><b>all</b></span>, which will be the default target for this <span class=\"wysiwyg-font-tt\">Makefile</span>. The <span class=\"wysiwyg-font-tt\">make</span> program will use this target if no other one is specified. However, note that, in general, the default target for <span class=\"wysiwyg-font-tt\">Makefiles</span> is whichever target was specified <i>first</i>. We also see that there are no dependencies for target <span class=\"wysiwyg-font-tt\">all</span>, so <span class=\"wysiwyg-font-tt\">make</span> safely executes the system commands specified.</p><p>Depending on the project, if it has been modularized enough, it is useful to use different targets because, if you modify a single file in the project, make won't recompile\u00a0<i>everything</i>: it will\u00a0<i>only</i> recompile the portions that were modified. Also, you can add custom targets for doing common tasks, such as removing all files created during the compilation process. For example, say our <span class=\"wysiwyg-font-tt\">HelloWorld.cpp</span> code depended on another file, <span class=\"wysiwyg-font-tt\">PrintWords.cpp</span>, we might create the following <span class=\"wysiwyg-font-tt\">Makefile</span>:</p><p></p><pre><code class=\"bash\">all: hello_world                       # default all target, which has 1 dependency: hello_world\n\nhello_world: HelloWorld.o PrintWords.o # hello_world target, which has 2 dependencies\n\tg++ -o hello_world HelloWorld.o PrintWords.o\n\nHelloWorld.o: HelloWorld.cpp           # HelloWorld.o target, which has 1 dependency\n\tg++ -c HelloWorld.cpp\n\nPrintWords.o: PrintWords.cpp           # PrintWords.o target, which has 1 dependency\n\tg++ -c PrintWords.cpp\n\nclean:                                 # clean target, to remove all compiled files\n\trm *o hello_world\n</code></pre><p></p><p>We can then compile and run our code as follows:</p><p></p><pre><code class=\"bash\">$ make          # compile our code\n$ ./hello_world # run our program\nHello, world!   # our code's output\n$ make clean    # remove all files resulting from compilation using the Makefile's clean target</code></pre><p></p><p>You can get pretty fancy when you write a <span class=\"wysiwyg-font-tt\">Makefile</span>! So as your projects become more and more complex, be sure to write a <span class=\"wysiwyg-font-tt\">Makefile</span> that is robust enough to handle your project with ease. There is an excellent resource on about writing a <span class=\"wysiwyg-font-tt\">Makefile</span>, written by Hector Urtubia, that can be found <a href=\"http://mrbook.org/blog/tutorials/make/\" rel=\"nofollow\">here</a>.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-02-14T23:12:27.383894"}