{"block": {"name": "text", "text": "\n\n<p class=\"wysiwyg-text-align-left\">As mentioned before, we want to try to encode our messages so that the number of bits of <i>memory used to store the message</i> is equal to (or barely larger than) the number of bits of <i>information in the message</i>. A common example of this\u00a0is the storage of DNA sequences on a computer. Recall that DNA sequences can be thought of as strings coming from an alphabet of four letters: <b><span class=\"wysiwyg-color-green\">A</span></b>, <b><span class=\"wysiwyg-color-blue\">C</span></b>, <b><span class=\"wysiwyg-color-purple\">G</span></b>, and <b><span class=\"wysiwyg-color-red\">T</span></b>. Typically, we store DNA sequences as regular text files, so each letter is represented by one ASCII symbol. For example, the sequence <b><span class=\"wysiwyg-color-green\">A</span><span class=\"wysiwyg-color-blue\">C</span><span class=\"wysiwyg-color-purple\">G</span><span class=\"wysiwyg-color-red\">T</span>\u00a0</b>would be stored as:</p><p class=\"wysiwyg-text-align-center\"><span class=\"wysiwyg-color-green\"><b>A</b></span><span class=\"wysiwyg-color-blue\"><b>C</b></span><span class=\"wysiwyg-color-purple\"><b>G</b></span><span class=\"wysiwyg-color-red\"><b>T</b></span><b>\u00a0\u2192 '<span class=\"wysiwyg-color-green\">A</span>' '<span class=\"wysiwyg-color-blue\">C</span>' '<span class=\"wysiwyg-color-purple\">G</span>' '<span class=\"wysiwyg-color-red\">T</span>' \u2192 <span class=\"wysiwyg-color-green\">01000001</span>\u00a0<span class=\"wysiwyg-color-blue\">01000011</span>\u00a0<span class=\"wysiwyg-color-purple\">01000111</span>\u00a0<span class=\"wysiwyg-color-red\">01010100 <span class=\"wysiwyg-color-black\">(4 bytes)</span></span></b></p><p class=\"wysiwyg-text-align-left\">However, since we know in advance that our alphabet only contains 4 possible letters, assuming perfect encoding, each letter can theoretically take log\u2082(4) = 2 bits of memory to represent (as opposed to the 8 bits we are currently using per letter). If we simply map <b><span class=\"wysiwyg-color-green\">A \u2192 00</span></b>, <b><span class=\"wysiwyg-color-blue\">C \u2192 01</span></b>, <b><span class=\"wysiwyg-color-purple\">G  \u2192 10</span></b>, and <b><span class=\"wysiwyg-color-red\">T \u2192 11</span></b>, we can now encode our DNA string as follows:</p><p class=\"wysiwyg-text-align-center\"><span class=\"wysiwyg-color-green\"><b>A</b></span><span class=\"wysiwyg-color-blue\"><b>C</b></span><span class=\"wysiwyg-color-purple\"><b>G</b></span><span class=\"wysiwyg-color-red\"><b>T</b></span><b>\u00a0\u2192 '<span class=\"wysiwyg-color-green\">A</span>' '<span class=\"wysiwyg-color-blue\">C</span>' '<span class=\"wysiwyg-color-purple\">G</span>' '<span class=\"wysiwyg-color-red\">T</span>' \u2192</b><b></b><b>\u00a0<span class=\"wysiwyg-color-green\">00</span><span class=\"wysiwyg-color-blue\">01</span><span class=\"wysiwyg-color-purple\">10</span><span class=\"wysiwyg-color-red\">11</span>\u00a0(1 byte)</b><b></b></p><p class=\"wysiwyg-text-align-left\"><b></b>This simple encoding method allowed us to achieve a guaranteed 4-fold compression, regardless of the actual sequence. However, note that we only partially analyzed the entropy of our message: we took into account that, out of all 256 possible bytes, we only use 4 to encode our message (<b><span class=\"wysiwyg-color-green\">A</span></b>, <b><span class=\"wysiwyg-color-blue\">C</span></b>, <b><span class=\"wysiwyg-color-purple\">G</span></b>, and <b><span class=\"wysiwyg-color-red\">T</span></b>), but what about the disorder among the letters we actually saw in the message? In this toy example, we saw all four letters in equal frequency (so there was <i>high disorder</i>). What if, however, instead of <b></b>ACGT<b></b>, our message was AAAAACGT? Can we do better than 2 bytes?</p>\n\n", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "96257", "time": "2018-03-04T14:42:26.386602"}