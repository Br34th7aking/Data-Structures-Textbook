{"block": {"name": "text", "text": "<p>As we have hinted at, our end-goal is to create two classes, <span class=\"wysiwyg-font-tt\"><b>BitOutputStream</b></span> and <span class=\"wysiwyg-font-tt\"><b>BitInputStream</b></span>, that will handle bitwise output and input for us. Specifically, our <span class=\"wysiwyg-font-tt\"><b>BitOutputStream</b></span> class should have a <span class=\"wysiwyg-font-tt\"><b>writeBit()</b></span> function (write a single bit to the bitwise buffer) and a <span class=\"wysiwyg-font-tt\"><b>flush()</b></span> function (write the bitwise buffer to the output stream, and clear the bitwise buffer), and our <span class=\"wysiwyg-font-tt\"><b>BitInputStream</b></span> class should have a <span class=\"wysiwyg-font-tt\"><b>readBit()</b></span> function (read a single bit from the bitwise buffer) and a <span class=\"wysiwyg-font-tt\"><b>fill()</b></span> function (read one byte from the input stream to fill the bitwise buffer).</p><p>Below is an example of a potential <span class=\"wysiwyg-font-tt\"><b>BitOutputStream</b></span> class. Some of the details have been omitted for you to try to figure out.</p><p></p><pre><code class=\"cpp\">class BitOutputStream {\n    private:\n        unsigned char buf; // bitwise buffer (one byte)\n        int nbits;         // number of bits that have been written to the bitwise buffer\n        ostream &amp; out;     // reference to the bytewise output stream (a C++ ostream)\n\n    public:\n        // constructor: assign 'out' to 'os', 'buf' to 0, and 'nbits' to 0\n        BitOutputStream(ostream &amp; os) : out(os), buf(0), nbits(0) {}\n\n        // send the bitwise buffer to the output stream, and clear the bitwise buffer\n        void flush() {\n            out.put(buf);  // write the bitwise buffer to the ostream\n            out.flush();   // flush the ostream (optional, slower to do it here)\n            buf = 0;       // clear the bitwise buffer\n            nbits = 0;     // bitwise buffer is cleared, so there are 0 bits in it\n        }\n\n        // write bit to the bitwise buffer\n        void writeBit(unsigned int bit) {\n            // flush the bitwise buffer if it is full\n            if(nbits == 8) {\n                flush();\n            }\n\n            // set the next open bit of the bitwise buffer to 'bit' (how?)\n\n            // increment the number of bits in our bitwise buffer\n            nbits++;\n        }\n};</code></pre><p></p><p>Below is an example of a potential <span class=\"wysiwyg-font-tt\"><b>BitInputStream</b></span> class. Some of the details have been omitted for you to try to figure out.</p><p></p><pre><code class=\"cpp\">class BitInputStream {\n    private:\n        unsigned char buf;  // bitwise buffer (one byte)\n\u00a0 \u00a0 \u00a0 \u00a0 int nbits;  \u00a0 \u00a0 \u00a0   // number of bits that have been read from bitwise buffer\n\u00a0 \u00a0 \u00a0 \u00a0 istream &amp; in;   \u00a0   // reference to the bytewise input stream (a C++ istream)\n\n    public:\n\u00a0 \u00a0 \u00a0 \u00a0 // constructor: assign 'in' to 'is', 'buf' to 0, and 'nbits' to 8\n        BitInputStream(istream &amp; is) : in(is), buf(0), nbits(8) {}\n\n        // fill the bitwise buffer by reading one byte from the input stream\n        void fill() {\n            buf = in.get(); // read one byte from istream to bitwise buffer\n            nbits = 0;      // no bits have been read from bitwise buffer\n        }\n\n        // read bit from the bitwise buffer\n        unsigned int readBit() {\n            // fill bitwise buffer if there are no more unread bits\n            if(nbits == 8) {\n                fill();\n            }\n\n            // get the next unread bit from the bitwise buffer (how?)\n            unsigned int nextBit = ??;\n\n            // increment the number of bits we have read from the bitwise buffer\n            nbits++;\n\n            // return the bit we just read\n            return nextBit;\n        }\n};</code></pre><p></p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b> In our <span class=\"wysiwyg-font-tt\">BitOutputStream</span> class, we flush the C++ <span class=\"wysiwyg-font-tt\">ostream</span> in our <span class=\"wysiwyg-font-tt\">flush()</span> function, but we mention that it is optional, and that it slows things down. Why would flushing the <span class=\"wysiwyg-font-tt\">ostream</span> here slow things down? Where might we want to flush the <span class=\"wysiwyg-font-tt\">ostream</span> instead to keep things as fast as possible?</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "122884", "time": "2018-03-04T14:42:41.060667"}