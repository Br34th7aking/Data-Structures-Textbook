{"block": {"name": "text", "text": "<p>It turns out that we actually are able to \"bubble up\" a given node without destroying the\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> properties of the tree via an operation called an\u00a0<b>AVL Rotation</b>. This operation was originally designed for the \"AVL Tree\" data structure, which we will cover extensively in a later section of the text, but we will borrow the operation for use with our <b><span class=\"wysiwyg-color-purple\">Treaps</span></b>.</p><p><b>AVL Rotations</b> can be done in two directions:\u00a0<b>right</b> or\u00a0<b>left</b>. Below is a diagram generalizing both right and left <b>AVL Rotations</b>. In the diagram, the triangles represent arbitrary subtrees of any shape: they can be empty, small, large, etc. The circles are the \"important\" nodes upon which we are performing the rotation.<br></p><p><span class=\"image-wrapper\"><img src=\"https://ucarecdn.com/b914f856-4d54-4cc1-91f6-4a603a18802f/\" title=\"Image: https://ucarecdn.com/b914f856-4d54-4cc1-91f6-4a603a18802f/\" alt=\"\"></span></p><p>Formally, we can describe\u00a0<b>AVL Rotations</b> with the following pseudocode:</p><p></p><pre><code class=\"no-highlight\"><b>AVLRight(<i>b</i>): // Perform a right AVL rotation on node <i>b</i></b>\n    <i>a</i> = left child of <i>b</i>\n    <i>y</i> = right child of <i>a</i> (or NULL if <i>a</i> does not have a right child)\n    <i>p</i> = parent of <i>b</i> (or NULL if <i>b</i> does not have a parent)\n    if <i>p</i> is not NULL and <i>b</i> is the right child of <i>p</i>:\n        make <i>a</i> the right child of <i>p</i>\n    otherwise, if <i>p</i> is not NULL and <i>b</i> is the left child of <i>p</i>:\n        make <i>a</i> the left child of <i>p</i>\n    make <i>y</i> the left child of <i>b</i>\n    make <i>b</i> the right child of <i>a</i>\n\n<b>AVLLeft(<i>a</i>): // Perform a left AVL rotation on node <i>a</i></b>\n    <i>b</i> = right child of <i>a</i>\n    <i>y</i> = left child of <i>b</i> (or NULL if <i>b</i> does not have a left child)\n    <i>p</i> = parent of <i>a</i> (or NULL if <i>a</i> does not have a parent)\n    if <i>p</i> is not NULL and <i>a</i> is the right child of <i>p</i>:\n        make <i>b</i> the right child of <i>p</i>\n    otherwise, if <i>p</i> is not NULL and <i>a</i> is the left child of <i>p</i>:\n        make <i>b</i> the left child of <i>p</i>\n    make <i>y</i> the right child of <i>a</i>\n    make <i>a</i> the left child of <i>\ufeffb</i></code></pre><p></p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "120135", "time": "2017-11-07T22:20:20.597630"}