{"id": "115256", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>The\u00a0<b><span class=\"wysiwyg-color-blue\">Randomized Search Tree (RST)</span></b> is a special type of\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> called a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> (\"Tree\" + \"Heap\"). Formally, a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> is a binary tree in which nodes contain two items, a <i>key</i>\u00a0and a\u00a0<i>priority</i>, and which\u00a0must obey the following two restrictions:</p><p></p><ol><li>The tree must follow the\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>\u00a0properties with respect to its\u00a0<i></i><b>keys</b><i></i></li><li>The tree must follow the\u00a0<b><span class=\"wysiwyg-color-red\"><i>Heap Property</i></span></b> with respect to its\u00a0<b>priorities</b></li></ol><p>Below is an example of a valid <b><span class=\"wysiwyg-color-purple\">Treap</span></b> where <b><span class=\"wysiwyg-color-green\">keys</span></b> are <b><span class=\"wysiwyg-color-green\">letters</span></b>, with alphabetic ordering, and <b><span class=\"wysiwyg-color-red\">priorities</span></b> are <b><span class=\"wysiwyg-color-red\">integers</span></b>, with numeric ordering (i.e., for the purpose of this lesson, the higher integer value will always have higher priority):</p><p><img alt=\"\" title=\"Image: https://ucarecdn.com/a8f77e39-13ff-4dcb-ab5d-d6a7e1b5c309/\" src=\"https://ucarecdn.com/a8f77e39-13ff-4dcb-ab5d-d6a7e1b5c309/\"></p><p>Given a set of (<i>key</i>,\u00a0<i>priority</i>) pairs, where all keys are unique, we can easily construct a valid\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> containing the given pairs:</p><p></p><ul><li>Start with an empty <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b></li><li>Insert the (<i>key</i>,\u00a0<i>priority</i>) pairs in decreasing order of\u00a0<i>priority</i>, using the regular <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> insertion algorithm with respect to the\u00a0<i>keys</i></li><li>The resulting\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> is a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b>: the <b><span class=\"wysiwyg-color-green\">BST</span></b> ordering of the <i>keys</i> is enforced by the <b><span class=\"wysiwyg-color-green\">BST</span></b> insertion algorithm, and the\u00a0<b><span class=\"wysiwyg-color-red\"><i>Heap Property</i></span></b> of the <i>priorities</i> is enforced by inserting pairs in descending order of priorities</li></ul><p>However, this trivial algorithm to construct a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> relies heavily on knowing in advance\u00a0<i>all</i> of the elements so that we can sort them and insert them all at once. Instead of making this unrealistic assumption, let's explore algorithms that allow for more realistic dynamic use of the structure.<br></p><p></p><p></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-06-08T22:34:10.284865"}