{"block": {"name": "text", "text": "<p>A\u00a0<b><span class=\"wysiwyg-color-blue\">Randomized Search Tree</span></b> is a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b>\u00a0where, instead of us supplying both a\u00a0<i>key</i> and a\u00a0<i>priority</i> for insertion, we only supply a\u00a0<i>key</i>, and the\u00a0<i>priority</i> for the new (<i>key</i>, <i>priority</i>) pair is randomly generated for us.</p>\n\n<p>Given that a <b><span class=\"wysiwyg-color-blue\">Randomized Search Tree</span></b> is just a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b>, the pseudocode for its find, insert, and remove operations should seem very trivial:</p><p></p><pre><code class=\"cpp\"><b>find(key):</b>\n    perform BST find based on key</code></pre><p></p><p></p><pre><code class=\"cpp\"><b>insert(key):\n</b>    priority = randomly generated integer\n    perform Treap insert based on (key, priority)</code></pre><p></p><p></p><pre><code class=\"cpp\"><b>remove(key):\n</b>    perform Treap remove based on key</code></pre><p></p><p>Recall that we began this exploration of\u00a0<b><span class=\"wysiwyg-color-purple\">Treaps</span></b> and\u00a0<b><span class=\"wysiwyg-color-blue\">Randomized Search Trees</span></b> because we wanted to obtain the O(log\u00a0<i>n</i>) average-case <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>\u00a0time complexity we formally proved in the previous section of this text without having to make the two unrealistic assumptions we were forced to make in the proof. It turns out that, via a formal proof that is beyond the scope of this text, by simply randomly generating a <i>priority</i> for each\u00a0<i>key</i> upon its insertion into our tree, we are able to in-practice (i.e., with real data) simulate the exact same random distribution of tree structures that we needed, meaning we have actually succeeded in achieving an average-case time complexity of\u00a0<b>O(log\u00a0<i>n</i>)</b>!</p><p>You might be thinking \"Wait... That's it?\", and you're absolutely right: that's it. To reiterate in the event that it didn't quite register, we have simulated the random tree topologies needed to achieve the O(log\u00a0<i>n</i>) average-case time complexity of a\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> by simply creating an\u00a0<b><span class=\"wysiwyg-color-blue\">RST</span></b>, which is a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> in which the <i>keys</i> are the same as we would be inserting into a\u00a0<b><span class=\"wysiwyg-color-green\">\ufeffBST</span></b><span class=\"wysiwyg-color-green\"></span>, but the\u00a0<i>priorities</i> are randomly generated.</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "120160", "time": "2018-03-04T14:38:10.838019"}