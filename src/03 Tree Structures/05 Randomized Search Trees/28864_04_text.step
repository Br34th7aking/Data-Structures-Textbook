{"block": {"name": "text", "text": "<p>Because a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> is just a type of\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>, the algorithm to find a <i>key</i>\u00a0in a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> is completely identical to the \"find\" algorithm of a typical\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b>:\u00a0start at the root node, and then traverse left or right down the tree until you either find the desired element (or fall off the tree if the desired element doesn't exist). The\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> \"find\" algorithm is extensively described in the\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> section of this chapter, so if you're having trouble remembering it, be sure to reread that section.</p><p>Inserting a new (<i>key</i>,\u00a0<i>priority</i>) element\u00a0into a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b> is a bit trickier. The first step is to insert the (<i>key</i>,\u00a0<i>priority</i>) pair using the typical\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> insertion algorithm (using the <i>key</i> of the pair). After the\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> insertion, the resulting tree will be valid with respect to\u00a0<i>key</i> ordering, but because we ignored the\u00a0<i>priority</i> of the pair, there is a strong chance that the resulting tree will violate the\u00a0<b><span class=\"wysiwyg-color-red\"><i>Heap Property</i></span></b>. To clarify this realization, below is an example of a\u00a0<b><span class=\"wysiwyg-color-purple\">Treap</span></b>\u00a0just after the\u00a0<b><span class=\"wysiwyg-color-green\">BST</span></b> insertion algorithm, where the element inserted is <b>(<span class=\"wysiwyg-color-green\">U</span>, <span class=\"wysiwyg-color-red\">15</span>)</b>:<i></i></p><p><span class=\"image-wrapper\"><img title=\"Image: https://ucarecdn.com/9688373b-3090-4080-939f-b7ce70ca49cf/\" src=\"https://ucarecdn.com/9688373b-3090-4080-939f-b7ce70ca49cf/\" alt=\"\"></span></p><p>Notice how the\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> properties are maintained with respect to the\u00a0<i>keys</i>, but we have now violated the\u00a0<b><i><span class=\"wysiwyg-color-red\">Heap Property</span></i></b> with respect to the\u00a0<i>priorities</i> (15 is larger than 11). Recall from the\u00a0<b><span class=\"wysiwyg-color-red\">Heap</span></b> section of the text that we typically fix the\u00a0<b><i><span class=\"wysiwyg-color-red\">Heap Property</span></i></b> by\u00a0<i></i>bubbling up the newly-inserted element. Is there some way for us to bubble up the new element to fix the\u00a0<b><i><span class=\"wysiwyg-color-red\">Heap Property</span></i></b><i></i>, but without breaking the\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> properties?</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "119884", "time": "2018-03-04T14:38:06.534257"}