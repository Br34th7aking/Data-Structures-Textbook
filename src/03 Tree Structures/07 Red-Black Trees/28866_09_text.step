{"id": "121261", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Before even going into the steps of the insertion algorithm, recall that the root of a\u00a0<b><span class=\"wysiwyg-color-red\">Red-Black Tree</span></b>\u00a0<i>must</i> be colored\u00a0<b>black</b>. As such, if we ever have a\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b> root after an insertion, assuming it has no\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b> children (which it shouldn't, assuming we did the insertion algorithm correctly), we can simply recolor the root\u00a0<b>black</b>. Keep this in the back of your mind as you read the following paragraphs.</p><p>Also, our default color for newly-inserted nodes is always\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b>. The motivation behind this is that, if we were to automatically color a newly-inserted node\u00a0<b>black</b>, we would probably break the \"same number of\u00a0<b>black</b> nodes along paths to null references\" restriction (Property 4) of the\u00a0<b><span class=\"wysiwyg-color-red\">Red-Black Tree</span></b>, and we would need to do potentially complicated restructuring operations to fix this property. By making newly-inserted nodes\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b>, the number of <b>black</b> nodes in the tree is unchanged, thus maintaining the \"<b>black</b> nodes along paths to null references\" restriction (Property 4). Also keep this in the back of your mind as you read the following paragraphs.</p><p>The first step to inserting an element from a\u00a0<b><span class=\"wysiwyg-color-red\">Red-Black Tree</span></b> is to simply perform the regular\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> insertion algorithm, with the newly-inserted node being colored\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b>. If this new node is the first one in the tree (i.e., it is the root), simply recolor it <b>black</b>. Otherwise,\u00a0during your traversal down the tree in the\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> insertion algorithm, if you ever run into a\u00a0<b>black</b> node with two\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b> children, recolor all three nodes (i.e., make the\u00a0<b>black</b> node\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b>, and make its two\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b> children\u00a0<b>black</b>). Below is a simple example of this process, where we insert the number 80 into the following tree:</p><p><img src=\"https://ucarecdn.com/50a4e08f-c978-4e37-83dc-5414d14b4c54/\" alt=\"\"></p><p>In the example above, the newly-inserted node (80) happened to be the child of a\u00a0<b>black</b> node, meaning we didn't violate the \"<b><span class=\"wysiwyg-color-red\">red</span></b> nodes cannot have\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b> children\" property by chance. However, what if we weren't so lucky, and the newly-inserted\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b> node became the child of a\u00a0<b><span class=\"wysiwyg-color-red\">red</span></b> node? It turns out that we can fairly simply fix this problem using AVL rotations and recoloring. Below is an example of this process, where we insert the number 42 into the following tree:</p><p><img src=\"https://ucarecdn.com/25d46740-23fa-497e-89df-a2df34b11b0d/\" alt=\"\"></p><p>That was pretty easy, right? We're hoping you're a bit skeptical because of what you remember seeing in the previous\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> section. Specifically, this single AVL rotation was the solution because our nodes of interest were in a\u00a0<i>straight line</i>\u00a0(i.e., the\u00a0<b>black-<span class=\"wysiwyg-color-red\">red</span>-<span class=\"wysiwyg-color-red\">red</span></b> path was a straight line), but what about if they were in a\u00a0<i>kink</i> shape (i.e., the\u00a0<b>black-<span class=\"wysiwyg-color-red\">red</span>-<span class=\"wysiwyg-color-red\">red</span></b> path had a kink)? Just like in the\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> section, our simple solution is to just perform a first AVL rotation to\u00a0<i>transform</i> our kink shape\u00a0<i>into</i> a straight line, which we're comfortable with dealing with, and then just dealing with the straight line using a second AVL rotation. In other words, in the case of a kink, we need to perform a\u00a0<b>double rotation</b>. Below is an example of this process, where we insert the number 15 into the same tree as before:</p><p><img alt=\"\" src=\"https://ucarecdn.com/6b4ed040-5612-471a-8c36-f5a4f86f9741/\" title=\"Image: https://ucarecdn.com/6b4ed040-5612-471a-8c36-f5a4f86f9741/\"></p><p>And that's it! That is the entirety of\u00a0<b><span class=\"wysiwyg-color-red\">Red-Black Tree</span></b> insertion. It would be a good idea to look at the \"before\" and \"after\" trees for each of the possible cases described above and verify in your own mind that the\u00a0<b><span class=\"wysiwyg-color-red\">Red-Black Tree</span></b> properties we mentioned at the beginning of this section remain unviolated after the new insertion.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-01-05T20:10:03.697190"}