{"block": {"name": "text", "text": "<p>Now that we have determined how to find a given node's successor efficiently, we can perform two important <b><span class=\"wysiwyg-color-green\">BST</span></b> functions.</p><p>The first function we will describe is the <b>remove</b> function. To\u00a0<b></b>remove<b></b> a node <i>u</i>\u00a0from a <b><span class=\"wysiwyg-color-green\">BST</span></b>, we must consider three cases. First, if\u00a0<i>u</i> has no children, we can simply delete\u00a0<i>u</i> (i.e., have\u00a0<i>u</i>'s parent no longer point to\u00a0<i>u</i>). Second, if\u00a0<i>u</i> has a single child, have\u00a0<i>u</i>'s parent point to\u00a0<i>u</i>'s child instead of to\u00a0<i>u</i> (Why does this work?). Third, if\u00a0<i>u</i> has two children, replace\u00a0<i>u</i> with\u00a0<i>u</i>'s successor and remove\u00a0<i>u</i>'s successor from the tree (Why does this work?).</p><p></p><pre><code class=\"cpp\"><b>remove(element): <span class=\"wysiwyg-color-red\">// removes element if it exists in BST (returns True), or returns False otherwise</span></b>\n    current = root                 <span class=\"wysiwyg-color-red\">// start at the root</span>\n    while current != element:\n        if element &lt; current:      <span class=\"wysiwyg-color-red\">// if element &lt; current, traverse left</span>\n            current = current.leftChild\n        else if element &gt; current: <span class=\"wysiwyg-color-red\">// if element &gt; current, traverse right</span>\n            current = current.rightChild\n        if current == NULL:        <span class=\"wysiwyg-color-red\">// if we traversed and there was no such child, failure</span>\n            return False\n<span class=\"wysiwyg-color-red\">    // we only reach here if current == element, which means we found element</span>\n    if current.leftChild == NULL and current.rightChild == NULL:     <span class=\"wysiwyg-color-red\">// Case 1 (no children)</span>\n        remove the edge from current.parent to current\n    else if current.leftChild == NULL or current.rightChild == NULL: <span class=\"wysiwyg-color-red\">// Case 2 (one child)\n<span class=\"wysiwyg-color-black\">        have current.parent point to current\u2019s child instead of to current\n    else:                                                            </span></span><span class=\"wysiwyg-color-red\">// Case 3 (two children)</span>\n        s = current\u2019s successor\n        replace current with s\n        remove the edge from s.parent to s</code></pre><p></p><p>The second function we will describe is the <b>in-order traversal\u00a0</b>function. An in-order traversal of a <b><span class=\"wysiwyg-color-green\">BST</span></b> starts at the root and, for any given node, traverses left, then \"visits\" the current node, and then traverses right. However, what if we want to iterate through the elements of a <b><span class=\"wysiwyg-color-green\">BST</span></b> in sorted order with the freedom of starting at any node that we want? Doing a full-fledged in-order traversal starting at the root would be inefficient. Instead, we can simply start at whichever node we want and repeatedly call the successor function until we reach a point where no more successors exist.</p><p></p><pre><code class=\"cpp\"><b>inOrder(): <span class=\"wysiwyg-color-red\">// perform an in-order traversal over the elements of BST using successor()</span></b>\n    current = the left-most element of BST\n    while current != NULL:\n        output current\n        current = successor(current)</code></pre><p></p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "110107", "time": "2017-11-07T22:19:58.085665"}