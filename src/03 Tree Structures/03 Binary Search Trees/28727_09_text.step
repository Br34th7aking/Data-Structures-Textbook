{"block": {"name": "text", "text": "<p>To be able to analyze the performance of a <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>, we must first define some terms to describe the tree's shape.</p><p>A tree's <b>height</b> is the longest distance from the root of the tree to a leaf, where we define \"distance\" in this case as the number of edges (not nodes) in a path. A tree with just a root has a height of 0, a tree with a root and one child has a height of 1, etc. For the sake of consistency, we say that an empty tree has a height of -1.</p><p>\n\nNotice that the worst-case time complexity of inserting, finding, and removing elements of a <b><span class=\"wysiwyg-color-green\">BST</span></b> is proportional to the its <i>height</i>: in the tree-traversal step of any of the three aforementioned operations (i.e., traversing left or right to either find an element or to find the insertion site for a new element), we perform a constant-time comparison operation to see if we have to continue left or right, or to see if we are finished. Recall that we perform this constant-time comparison operation once for each level of the <b><span class=\"wysiwyg-color-green\">BST</span></b>, so as the number of levels in a <b><span class=\"wysiwyg-color-green\">BST</span></b> grows (i.e., the <i>height</i> of the <b><span class=\"wysiwyg-color-green\">BST</span></b> grows), the number of comparison operations we must perform grows proportionally.</p><p>A <b>balanced</b> binary tree is one where most leaves are equidistant from the root and most internal nodes have two children. A <i>perfectly balanced</i> binary tree is one where <i>all</i> leaves are equidistant from the root, and <i>all</i>\ufeff internal nodes have two children. The term \"balanced\" can be generalized to any <i>k</i>-ary tree (e.g. binary, ternary, 4-ary, etc.): a balanced <i>k</i>-ary tree is one where many (or most) internal nodes have exactly <i>k</i> children and all leaves are roughly equidistant from the root. Below is an example of a balanced <b><span class=\"wysiwyg-color-green\">BST</span></b>:</p><p><img alt=\"\" src=\"https://ucarecdn.com/e0ba575d-7ebd-4d01-ad58-d2e50ef74d8b/\" title=\"Image: https://ucarecdn.com/e0ba575d-7ebd-4d01-ad58-d2e50ef74d8b/\"></p><p>An <b>unbalanced</b> binary tree is one where many internal nodes have exactly one child and/or leaves are not equidistant from the root. A <i>perfectly unbalanced</i> binary tree is one where <i>all</i> internal nodes have exactly one child. The term \"unbalanced\" can be generalized to any <i>k</i>-ary tree: an unbalanced <i>k</i>-ary tree is one where many internal nodes have less than <i>n</i> children (the more extreme deviation from <i>n</i> children, the more unbalanced the tree). Below is an example of an unbalanced <b><span class=\"wysiwyg-color-green\">BST</span></b>:</p><p><img alt=\"\" src=\"https://ucarecdn.com/9ebabdcd-7e16-4f11-b71c-d570cdc4ea91/\" title=\"Image: https://ucarecdn.com/9ebabdcd-7e16-4f11-b71c-d570cdc4ea91/\"></p><p>It should be clear that, with regard to balance, the two extreme shapes a tree can have are <i>perfectly balanced</i> and <i>perfectly unbalanced</i>.</p><p>If a tree is <i>perfectly unbalanced</i>, each internal node has exactly one child, so the tree would have a height of <i><b>n</b></i><b>-1</b> (we would have <i>n</i> nodes down one path, and that path will have <i>n</i>-1 edges: one edge between each pair of nodes along the path).</p><p>If a binary tree is <i>perfectly balanced</i>, each internal node has exactly two children (or <i>k</i> children, if we generalize to <i>k</i>-ary trees) and all leaves are exactly equidistant from the root, so a <i>perfectly balanced</i> binary tree with <i>n</i> elements has a height of <b>log\u2082(</b><b><i>n</i>+1<i></i>)-1</b>. This equation looks complicated, but the log\u2082(n) portion, which is the important part, has some simple intuition behind it: every time you add another level to the bottom of a <i>perfectly balanced</i> binary tree, you are roughly doubling the number of elements in the tree. If a tree has one node, adding another row adds 2 nodes. If a tree has 3 nodes, adding another row adds 4 nodes. If a tree has 7 nodes, adding another row adds 8 nodes. Since the height of a <i>perfectly balanced</i> binary tree effectively tells you \"how many doublings\" occurred with respect to a one-node <i>perfectly balanced</i> binary tree, the number of nodes in the tree would be roughly <i>n</i> = 2<i>\u02b0</i> (where <i>h</i> is the height of the tree), so the height of the tree would be roughly <i>h</i> = log\u2082(n).</p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b> What previously-discussed data structure does a binary tree transform into when it becomes <i>perfectly unbalanced</i>?<br></p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "117998", "time": "2018-03-04T14:37:50.801628"}