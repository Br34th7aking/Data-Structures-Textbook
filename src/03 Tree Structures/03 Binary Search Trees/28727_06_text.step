{"time": "2016-09-20T20:54:17.844856", "block": {"name": "text", "subtitles": {}, "source": null, "subtitle_files": [], "feedback_wrong": "", "video": null, "animation": null, "feedback_correct": "", "tests_archive": null, "text": "<p>The\u00a0<b>successor</b> function of a <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> (or of a node, really) finds the \"successor\"\u2014the\u00a0next largest node\u2014of a given node in the <b><span class=\"wysiwyg-color-green\">BST</span></b>. We can break this function down into two cases:</p><p><b>Case 1:</b> If node\u00a0<i>u</i> has a right child, we can somewhat trivially find\u00a0<i>u</i>'s successor. Recall that, by definition, a node is smaller than all of the nodes in its right subtree. Therefore, if\u00a0<i>u</i> has a right child,\u00a0<i>u</i>'s successor must be in its right subtree. Note that\u00a0<i>u</i>'s successor is not necessarily its right child! Specifically, if\u00a0<i>u</i> has a right child,\u00a0<i>u</i>'s successor must be the smallest node in its right subtree. Thus, to find\u00a0<i>u</i>'s successor, we can traverse to\u00a0<i>u</i>'s right child and then traverse as far left as possible (What does this repeated left traversal do?). In the example below, we will find D's successor:</p><p><img src=\"https://ucarecdn.com/79a4ae39-13ed-4f7b-bb78-778da07a893a/\" alt=\"\"></p><p><b>Case 2:</b> If node\u00a0<i>u</i> does not have a right child, we have to be a bit more clever. Starting at\u00a0<i>u</i>, we can traverse up the tree. The moment we encounter a node that is the left child of its parent, the parent must be\u00a0<i>u</i>'s successor. If no such node exists, then\u00a0<i>u</i> has no successor. In the example below (slightly different than the above example), we will find D's successor:</p><img src=\"https://ucarecdn.com/98a59181-a844-4db1-914a-b65725fb666b/\" alt=\"\"><div><br><div><pre><code class=\"cpp\"><b>successor(u): <span class=\"wysiwyg-color-red\">// returns u's successor, or NULL if u does not have a successor</span></b>\n    if u.rightChild != NULL:             <span class=\"wysiwyg-color-red\">// Case 1: u has a right child</span>\n        current = u.rightChild\n        while current.leftChild != NULL: <span class=\"wysiwyg-color-red\">// find the smallest node in u's right subtree</span>\n            current = current.leftChild\n        return current\n    else:                                <span class=\"wysiwyg-color-red\">// Case 2: u does not have a right child</span>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003current = u\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003while current.parent != NULL:    <span class=\"wysiwyg-color-red\">// traverse up until current node is its parent's left child</span>\n            if current == current.parent.leftChild:\n                return current.parent\n            else:\n                current = current.parent\n        return NULL <span class=\"wysiwyg-color-red\">// we have reached the root and didn't find a successor, so no successor exists</span></code></pre></div></div>", "options": {}}, "id": "110106"}