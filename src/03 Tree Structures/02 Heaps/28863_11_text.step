{"id": "117404", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Although we like visualizing a binary heap as a tree structure with nodes and edges, when it comes to implementation, by being a little clever, it turns out that we can store a binary heap as an array. Technically, any binary tree can be stored as an array, and by storing a binary tree as an array, we can avoid the overhead of wasted memory from parent and child pointers. Thus, given an index in the array, we can find the element's parent and children using basic arithmetic. An added bonus with binary heaps over unbalanced binary trees is that, since a binary heap is by definition a complete tree, there is no wasted space in the array: all elements will be stored perfectly contiguously.</p><p>Below is a diagram showing how we can represent an example binary max-heap as an array, where the tree representation is shown to the left and the array representation (with the edges maintained for the sake of clarity) is shown to the right:</p><p><img src=\"https://ucarecdn.com/16bc6f4e-322f-4a92-bcb7-03d07a69039f/\" alt=\"\" title=\"Image: https://ucarecdn.com/16bc6f4e-322f-4a92-bcb7-03d07a69039f/\"></p><p>Notice that, in the array representation, we can access the parent, left child, or right child of any given element in constant time using simple arithmetic. For an element at index\u00a0<i>i</i> of the array, using 0-based indexing,</p><p></p><ul><li>its\u00a0<b>parent</b> is at index\u00a0$\\lfloor{\\frac{i-1}{2}}\\rfloor$\u00a0</li><li>its\u00a0<b>left child</b> is at index\u00a0$ 2i+1 $\u00a0</li><li>its\u00a0<b>right child</b> is at index\u00a0$ 2i+2 $\u00a0</li></ul><p></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-02-14T23:15:02.901616"}