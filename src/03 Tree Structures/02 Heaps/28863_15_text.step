{"time": "2016-09-20T20:54:10.423153", "block": {"name": "text", "subtitles": {}, "source": null, "subtitle_files": [], "feedback_wrong": "", "video": null, "animation": null, "feedback_correct": "", "tests_archive": null, "text": "<p>We have now very efficiently solved our initial problem of implementing a queue-like data type that can take into account a sense of ordering (based on \"priority\") of the elements it contains. We first described the\u00a0<b>Priority Queue</b> ADT, which defined the functions we needed in such a data type.</p><p>Then, we dove into implementation specifics by discussing the\u00a0<b>Heap</b> data structure, which is almost always used to implement a\u00a0<b>Priority Queue</b>.\u00a0Because of the constraints of the\u00a0<b>Heap</b> data structure, we are able to guarantee a <b>worst-case</b> time complexity of <b>O(log\u00a0</b><i><b>n</b></i><b>)</b> for both <b>inserting</b> and <b>popping </b>elements, as well as a\u00a0<b>O(1)</b> worst-case time complexity for\u00a0<b>peeking</b> at the highest-priority element.</p><p>In the next sections of this chapter, we will continue to explore other types of binary trees, and it will hopefully become clear why we would want to have so many different data structures and ADTs in our arsenal of tools.</p>", "options": {}}, "id": "117410"}