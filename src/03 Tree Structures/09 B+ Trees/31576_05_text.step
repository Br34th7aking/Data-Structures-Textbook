{"block": {"name": "text", "text": "<p>How does the insert operation of a  <b><span class=\"wysiwyg-color-purple\">B+ Tree</span></b>\u00a0work? It is actually\u00a0algorithmically  quite similar to the\u00a0<b><span class=\"wysiwyg-color-green\">B-Tree</span></b> insert operation (unsurprisingly). Just a reminder: within the  <b><span class=\"wysiwyg-color-green\">B-Tree</span></b> insert operation, we always inserted keys into the leaves. Once a leaf node would overflow, we would cut the overflowing node and grow the tree <i>upward</i>. The same idea applies to a  <b><span class=\"wysiwyg-color-purple\">B+ Tree</span></b><span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">. <br></span></span></p><p><span class=\"wysiwyg-color-purple\"><span class=\"wysiwyg-color-black\">Let's look at an example of a  <b><span class=\"wysiwyg-color-purple\">B+ Tree</span></b> in which <i>M</i> = 3 and <i>L</i> = 3 (i.e., the leaves can have a maximum of 3 data records and the internal nodes can have a maximum of 2 keys and 3 child pointers):</span></span></p><p><img height=\"212\" alt=\"\" width=\"427\" src=\"https://ucarecdn.com/27d6753c-a321-4bf2-bf57-31b6809fdd70/\"><img height=\"273\" alt=\"\" width=\"431\" src=\"https://ucarecdn.com/14f3a575-2531-4a64-8dfb-c361daf29039/\"></p><p>Note the two main differences between the   <b><span class=\"wysiwyg-color-purple\">B+ Tree</span></b> insertion that happened above and the  <b><span class=\"wysiwyg-color-green\">B-Tree </span></b><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">insertion we studied previously:<br></span></span></p><ol><li>\u00a0The node was cut around the data record 7: the <i>smallest</i> data record of the <i>second </i>half of the node. This differs from what happened in the  <b><span class=\"wysiwyg-color-green\">B-Tree </span></b><span class=\"wysiwyg-color-green\"><span class=\"wysiwyg-color-black\">insertion,\u00a0</span></span>in which we cut around the data record 4: the <i>largest</i> data record of the <i>first</i> half of the node. <br></li><li>We initially inserted elements into data record nodes (the <b><span class=\"wysiwyg-color-purple\">purple</span></b> nodes). Consequently, when we grew the tree, none of our data records moved up a level. Instead, we created a <i>key</i> node (the <b>black</b> node) containing the key 7 and used it to grow the tree upward. As a result, we see two instances of the integer 7 (one is the <i>key</i> and the other is the actual <i>data record</i>).</li></ol><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span> </b>Why did we choose to cut around the the <i>smallest</i> data record of the <i>second </i>half of the node? <b><span class=\"wysiwyg-color-red\">Hint:</span></b> Look back at properties of a    <b><span class=\"wysiwyg-color-purple\">B+ Tree</span></b> on the previous step.</p><p><b><span class=\"wysiwyg-color-red\">Fun Fact</span></b><span class=\"wysiwyg-color-red\">: </span>A     <b><span class=\"wysiwyg-color-purple\">B+ Tree</span></b> with\u00a0<i><i>M</i> = 3 and <i>L</i> = 3 </i>is commonly referred to as a \"<b><span class=\"wysiwyg-color-blue\">2-3 Tree</span></b>.\" This is because, as mentioned above, the internal nodes can have a maximum of <b>2</b> keys and  the leaves can have a maximum of <b>3</b> data records.\u00a0</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "124401", "time": "2017-11-07T22:21:21.715505"}