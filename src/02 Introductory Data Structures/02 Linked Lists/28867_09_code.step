{"block": {"name": "code", "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b> <b>Inserting an Element into a Linked List</b></p><p>We have defined the following \n\n<b>Singly Linked List Node</b> C++ class for you:</p><p></p><pre><code class=\"cpp\">class Node {\n    public:\n        int value;\n        Node* next = NULL;\n};</code></pre><p></p><p>Write a function <span class=\"wysiwyg-font-tt\">insert(Node* head, Node* newnode, int index)</span> that inserts <span class=\"wysiwyg-font-tt\">newnode</span> into index <span class=\"wysiwyg-font-tt\">index</span> of the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>. We guarantee that we will not have you insert at the very beginning nor the very end of the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b> (so you won't need to worry about updating the <i>head</i> or <i>tail</i> pointers of the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>).</p><p>If you wish to solve the problem in Python, below is the equivalent <b>Singly Linked List Node</b>\ufeff Python class defined for you:</p><p></p><pre><code class=\"python\">class Node:\n    value = None\n    next = None</code></pre><p></p>", "video": null, "animation": null, "options": {"code_templates": {"python3": "def insert(head, newnode, index):\n    # YOUR CODE HERE", "c++11": "void insert(Node* head, Node* newnode, int index) {\n    /* YOUR CODE HERE */\n}"}, "execution_time_limit": 5, "execution_memory_limit": 256, "samples": [["6 2\n0 -> 1 -> 2 -> 3 -> 4 -> 5", "0 -> 1 -> 6 -> 2 -> 3 -> 4 -> 5"]], "limits": {"python3": {"time": 15, "memory": 256}, "c++11": {"time": 5, "memory": 256}}}, "subtitle_files": [], "source": {"execution_time_limit": 5, "is_memory_limit_scaled": true, "test_archive": [], "manual_memory_limits": [], "manual_time_limits": [], "code": "#This is sample code challenge\nimport random\n\ndef generate():\n    tests = [\n             \"6 2\\n0 -> 1 -> 2 -> 3 -> 4 -> 5\",\n             \"200\" + ' ' + str(random.randrange(2,50)) + '\\n' + ' -> '.join([str(i) for i in range(random.randrange(51,100))])\n             ]\n    return tests\n\n\ndef solve(dataset):\n    top,dataset = dataset.splitlines()\n    dataset = dataset.split(' -> ')\n    element,index = top.split()\n    index = int(index)\n    return ' -> '.join(dataset[:index] + [element] + dataset[index:])\n\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()", "execution_memory_limit": 256, "is_time_limit_scaled": true, "templates_data": "::python3\n::header\nclass Node:\n    value = None\n    next = None\n::code\ndef insert(head, newnode, index):\n    # YOUR CODE HERE\n::footer\nfrom sys import stdin\nlines = stdin.read().strip().splitlines()\nnums = [int(i) for i in lines[1].split(' -> ')]\nhead = Node()\nhead.value = nums[0]\ncurr = head\nfor i in nums[1:]:\n    curr.next = Node()\n    curr = curr.next\n    curr.value = i\nnewnode = Node()\nnewnode.value,pos = [int(i) for i in lines[0].split()]\ninsert(head,newnode,pos)\nnodes = []\nwhile head is not None:\n    nodes.append(str(head.value))\n    head = head.next\nprint(' -> '.join(nodes))\n\n::c++11\n::header\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <unordered_map>\n#include <unordered_set>\n#include <string>\nusing namespace std;\n\nclass Node {\n    public:\n        int value;\n        Node* next = NULL;\n        Node(int v);\n};\nNode::Node(int v) {\n    value = v;\n}\n\n::code\nvoid insert(Node* head, Node* newnode, int index) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    int e;\n    cin >> e;\n    int pos;\n    cin >> pos;\n    int temp;\n    string dummy;\n    Node* root = NULL;\n    Node* curr = NULL;\n    while(cin >> temp) {\n        Node* tempNode = new Node(temp);\n        if(root == NULL) {\n            root = tempNode;\n            curr = root;\n        }\n        else {\n            curr->next = tempNode;\n            curr = curr->next;\n        }\n        cin >> dummy;\n    }\n    insert(root, new Node(e), pos);\n    cout << root->value;\n    curr = root->next;\n    while(curr != NULL) {\n        cout << \" -> \" << curr->value;\n        curr = curr->next;\n    }\n    return 0;\n}", "samples_count": 1}, "subtitles": {}, "tests_archive": "/api/step-sources/114938/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "114938", "time": "2018-03-04T14:36:15.924705"}