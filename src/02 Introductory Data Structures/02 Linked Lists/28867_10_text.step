{"block": {"name": "text", "text": "<p>The \"remove\" algorithm is also almost identical to the \"find\" algorithm: you first execute the \"find\" algorithm just like before, but once you find the insertion site, you rearrange pointers to remove the node of interest. \u00a0Below is pseudocode for the \"remove\" operation of a\u00a0<b><span class=\"wysiwyg-color-blue\">\ufeffLinked List</span></b><span class=\"wysiwyg-color-blue\"></span>\u00a0(with added corner cases for the first and last indices):</p><p></p><pre><pre><code class=\"cpp\"><b>remove(index): // removes the element at position \"index\" of Linked List\n</b>    if index == 0:                 // special case for removing from beginning of list\n        head = head.next\n        head.prev = NULL\n\n    else if index == n:            // special case for removing from end of list\n        tail = tail.prev\n        tail.next = NULL\n\n    else:                          // general case for removing from middle of list\n        curr = head\n        repeat index-1 times:      // move curr to directly before removal site\n            curr = curr.next\n        curr.next = curr.next.next // update the pointers\n        curr.next.prev = curr\n\n    n = n - 1                      // decrement n</code></pre></pre>\n\n<p>\n</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "114932", "time": "2018-03-04T14:36:16.633148"}