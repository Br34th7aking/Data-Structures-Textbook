{"id": "110910", "block": {"feedback_correct": "", "name": "code", "feedback_wrong": "", "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b>\u00a0<b>Finding an Element in a Linked List</b></p><p>We have defined the following <b>Singly Linked List Node</b> C++ class for you:</p><p></p><pre><code class=\"cpp\">class Node {\n    public:\n        int value;\n        Node* next = NULL;\n};</code></pre><p></p><p>Write a function <span class=\"wysiwyg-font-tt\">find(Node* node, int element)</span> that starts at the given node and either returns true if the element exists somewhere in the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, otherwise false if the element does not exist in the <b><span class=\"wysiwyg-color-blue\">Linked List</span></b>. You may choose to implement it either iteratively or recursively: we will pass in the <i>head</i>\u00a0node when we call your <span class=\"wysiwyg-font-tt\">find</span> function, so both approaches have equally valid solutions.</p>", "subtitle_files": [], "source": {"execution_time_limit": 5, "code": "#This is sample code challenge\nimport random\n\ndef generate():\n    tests = [\n             \"2\\n0 -> 1 -> 2 -> 3 -> 4 -> 5\",\n             \"6\\n0 -> 1 -> 2 -> 3 -> 4 -> 5\",\n             str(random.randrange(100)) + '\\n' + ' -> '.join([str(i) for i in range(random.randrange(100))])\n             ]\n    return tests\n\n\ndef solve(dataset):\n    e,dataset = dataset.splitlines()\n    return str(e in dataset.split(' -> ')).lower()\n\n\ndef check(reply, clue):\n    return reply.lower() == clue.lower()", "samples_count": 1, "execution_memory_limit": 256, "manual_memory_limits": [], "templates_data": "::c++11\n::header\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <unordered_map>\n#include <unordered_set>\n#include <string>\nusing namespace std;\n\nclass Node {\n    public:\n        int value;\n        Node* next = NULL;\n        Node(int v);\n};\nNode::Node(int v) {\n    value = v;\n}\n\n::code\nbool find(Node* node, int element) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    int e;\n    cin >> e;\n    int temp;\n    string dummy;\n    Node* root = NULL;\n    Node* curr = NULL;\n    while(cin >> temp) {\n        Node* tempNode = new Node(temp);\n        if(root == NULL) {\n            root = tempNode;\n            curr = root;\n        }\n        else {\n            curr->next = tempNode;\n            curr = curr->next;\n        }\n        cin >> dummy;\n    }\n    if(find(root,e)) {\n        cout << \"true\";\n    }\n    else {\n        cout << \"false\";\n    }\n    return 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "manual_time_limits": [], "test_archive": []}, "animation": null, "video": null, "tests_archive": "/api/step-sources/110910/tests", "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "limits": {"c++11": {"memory": 256, "time": 5}}, "samples": [["2\n0 -> 1 -> 2 -> 3 -> 4 -> 5", "true"]], "code_templates": {"c++11": "bool find(Node* node, int element) {\n    /* YOUR CODE HERE */\n}"}}, "subtitles": {}}, "time": "2017-02-14T23:13:00.754741"}