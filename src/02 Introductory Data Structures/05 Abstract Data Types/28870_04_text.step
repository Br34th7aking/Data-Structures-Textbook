{"block": {"name": "text", "text": "<p>In short, an <span class=\"wysiwyg-color-green\"><b>Abstract Data Type</b></span> simply\u00a0<i>describes</i> a set of features, and based on the features we wish to have, we need to choose an appropriate <b><span class=\"wysiwyg-color-blue\">Data Structure</span></b>\u00a0to use as the backbone to implement the ADT.</p><p>For example, what if a user wanted an <b><span class=\"wysiwyg-color-green\">ADT</span></b> to store a list of songs? When we listen to music, do we always necessarily want to iterate through the songs in the order in which they appear? Typically, we like having the ability to choose a specific song, which could appear somewhere in the middle of the list of songs. As a result, it might make sense for us, the programmers, to use an array-based structure to implement this <b><span class=\"wysiwyg-color-green\">ADT</span></b> because having random access could prove useful. However, we very well could use a Linked List to implement this <b><span class=\"wysiwyg-color-green\">ADT</span></b>  instead! The functionality would still be correct, but it might not be as fast as using an array-based structure.</p><p>In the next sections, we will discuss some fundamental <b><span class=\"wysiwyg-color-green\">Abstract Data Types</span></b> and will discuss different approaches we can use to implement them (as well as the trade-offs of each approach).</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "111094", "time": "2017-09-11T11:45:32.934267"}