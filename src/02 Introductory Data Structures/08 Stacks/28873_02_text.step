{"block": {"name": "text", "text": "<p>Just like with the <b>Queue</b>,\u00a0we can use a <b>Deque</b> to implement a <b>Stack</b>: if we implement a <b>Stack\u00a0</b>with a <b>Deque</b> as our backing structure (where the <b>Deque</b> would have its own backing structure of either a <b><span class=\"wysiwyg-color-blue\">Doubly Linked List</span></b> or a <b><span class=\"wysiwyg-color-purple\">Circular Array</span></b>, because as you should recall, a <b>Deque</b> is an <b><span class=\"wysiwyg-color-green\">ADT</span></b>), we can again simply re-use the functions of a <b>Deque</b> to implement our <b>Stack</b>. For example, say we had the following <b>Stack</b> class in C++:</p><p></p><pre><code class=\"cpp\">class Stack {\n    private:\n        Deque deque;\n    public:\n        bool push(Data element);\n        Data top();\n        void pop();\n        int size();\n};</code></pre><p></p><p>We could very trivially implement the <b>Stack</b> functions as follows:</p><p></p><pre><code class=\"cpp\">bool Stack::push(Data element) {\n    return deque.addBack(element);\n}</code></pre><p></p><p></p><pre><code class=\"cpp\">Data Stack::top() {\n    return deque.peekBack();\n}</code></pre><p></p><p></p><pre><code class=\"cpp\">void Stack::pop() {\n    deque.removeBack();\n}</code></pre><p></p><p></p><pre><code class=\"cpp\">int Stack::size() {\n    return deque.size();\n}</code></pre><p></p><p>Of course, as we mentioned, the <b>Deque</b> itself would have some backing data structure as well, but if we use our <b>Deque</b> implementation to back our <b>Stack</b>, the <b>Stack</b> becomes extremely easy to implement.</p><p><b><span class=\"wysiwyg-color-red\">Watch Out!</span></b> Notice that, in our implementation of a\u00a0<b>Stack</b>, the <span class=\"wysiwyg-font-tt\">pop()</span> function has a <span class=\"wysiwyg-font-tt\">void</span> return type, meaning it\u00a0<i>removes</i> the element on the top of the\u00a0<b>Stack</b>, but it does not\u00a0<i>return</i> its value to us. This is purely an implementation-level detail, and in some languages (e.g. Java), the <span class=\"wysiwyg-font-tt\">pop()</span> function removes\u00a0<i>and</i> returns the top element, but in other languages (e.g. C++), the <span class=\"wysiwyg-font-tt\">pop()</span> function\u00a0<i>only removes</i> the top element without returning it, just like in our implementation.<br></p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b> In our implementation of a <b>Stack</b>, we chose to use the\u00a0<span class=\"wysiwyg-font-tt\">addBack()</span>, <span class=\"wysiwyg-font-tt\">peekBack()</span>, and <span class=\"wysiwyg-font-tt\">removeBack()</span>\u00a0functions of the backing <b>Deque</b>. Could we have chosen <span class=\"wysiwyg-font-tt\">addFront()</span>, <span class=\"wysiwyg-font-tt\">peekFront()</span>, and <span class=\"wysiwyg-font-tt\">removeFront()</span> instead? Why or why not?<br></p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "115186", "time": "2017-09-11T11:45:50.423215"}