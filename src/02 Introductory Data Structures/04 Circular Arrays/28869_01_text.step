{"id": "110666", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Imagine we have a set of elements we want to store in some data structure. The elements don't necessarily have a particular order (they might, but we don't know in advance). In the previous sections of the text, we learned about two data structures we could theoretically use to store our elements: <b><span class=\"wysiwyg-color-green\">Array Lists</span></b> and <b><span class=\"wysiwyg-color-blue\">Linked Lists</span></b>.</p><p>We learned that <b><span class=\"wysiwyg-color-green\">Array Lists</span></b> are great if we want to be able to randomly access elements\u00a0<i>anywhere</i> in my dataset. In terms of inserting elements, however, they do fine if we're always adding to the end of the list. If we want to insert elements at the beginning of the list however, we have to waste time moving other elements to make room for the insertion.</p><p><b><span class=\"wysiwyg-color-blue\">Linked Lists</span></b>, on the other hand, are great at inserting elements to the beginning or end of the list. If we want to access elements in the middle however, we have to waste time iterating through the elements until we reach the desired element.</p><p>Is there any way we can create a new data structure that allows us to enjoy some of the perks of both data structures? In this section, we will discuss the <b><span class=\"wysiwyg-color-purple\">Circular Array</span></b>, our attempt at reaping the benefits of both <b><span class=\"wysiwyg-color-green\">Array Lists</span></b> and <b><span class=\"wysiwyg-color-blue\">Linked Lists</span></b>.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-06-08T22:32:07.347569"}