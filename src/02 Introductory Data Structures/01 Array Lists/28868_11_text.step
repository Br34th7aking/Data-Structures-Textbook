{"id": "114933", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Just like with insertion, removal at the end of our list of elements is very fast: we simply remove the element at the\u00a0<i>n</i>-th index of our backing array, which is a constant-time operation. Below is an example of removing the last element from an <b><span class=\"wysiwyg-color-green\">Array List</span></b>:</p><p><img src=\"https://ucarecdn.com/4f1409bb-3e3e-4275-8043-f2bf3b6fcb60/\" alt=\"\"></p><p>However, also just like with insertion, removal at the beginning of our list of elements is very slow: we remove the element at index 0 of our backing array, which is a constant-time operation, but we then need to move all of the elements left one slot, which is an O(<i>n</i>) operation overall. In the example below, instead of removing from the very beginning of the array, we remove the second element, and we see that we still have a worst-case O(<i>n</i>) operation when we have to move all of the elements left. Note that this \"leftward move\" requirement comes from our restriction that all elements in our array must be contiguous (which is necessary for us to have random access to any of the elements).</p><p><img title=\"Image: https://ucarecdn.com/01fee06e-33d1-4b48-bbcd-484c6a88d808/\" src=\"https://ucarecdn.com/01fee06e-33d1-4b48-bbcd-484c6a88d808/\" alt=\"\"></p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b> When we remove from the very beginning of the backing array of an <b><span class=\"wysiwyg-color-green\">Array List</span></b>, even before we move the remaining elements to the left, the remaining elements are all still contiguous, so our restriction is satisfied. Can we do something clever with our implementation to avoid having to perform this move operation when we remove from the very beginning of our list?<br></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-06-08T22:31:36.070332"}