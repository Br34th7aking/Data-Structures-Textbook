{"id": "122238", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>Below is an example of implementing an iterator for a\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>. Note that we have omitted the actual <b><span class=\"wysiwyg-color-blue\">Linked List</span></b> functions (e.g. <span class=\"wysiwyg-font-tt\">find</span>, <span class=\"wysiwyg-font-tt\">insert</span>, <span class=\"wysiwyg-font-tt\">remove</span>, etc.) for the sake of keeping the example clean and focused on iterators.<br></p><p></p><pre><code class=\"cpp\">// Helper Node class\nclass Node {\n    public:\n        int value;\n        Node* next;\n};\n\n// Linked List class\nclass LinkedList {\n    public:\n        Node* root; // root node\n\n        // Iterator class\n        class iterator : public std::iterator&lt;std::forward_iterator_tag, int&gt; {\n            public:\n                friend class LinkedList; // declare Linked List class as a friend class\n                Node* curr;              // the Node this iterator is pointing to\n\n                // the following typedefs are needed for the iterator to play nicely with C++ STL\n                typedef int value_type;<br>\u00a0 \u00a0             typedef int&amp; reference;<br>\u00a0             \u00a0 typedef int* pointer;<br>\u00a0             \u00a0 typedef int difference_type;<br>\u00a0             \u00a0 typedef std::forward_iterator_tag iterator_category;\n\n                // iterator constructor\n                iterator(Node* x=0):curr(x){}\n                \n                // overload the == operator of the iterator class\n                bool operator==(const iterator&amp; x) const {\n                    return curr == x.curr; // compare curr pointers for equality\n                }\n\n                // overload the != operator of the iterator class\n                bool operator!=(const iterator&amp; x) const {\n                    return curr != x.curr; // compare curr pointers for inequality\n                }\n\n                // overload the * operator of the iterator class\n                reference operator*() const {\n                    return curr-&gt;value;    // return curr's value\n                }\n\n                // overload the ++ (pre-increment) operator of the iterator class\n                iterator&amp; operator++() {\n                    curr = curr-&gt;next;     // move to next element\n                    return *this;          // return after the move\n                }\n\n                // overload the ++ (post-increment) operator of the iterator class\n                iterator operator++(int) {\n                    iterator tmp(curr);    // create a temporary iterator to current element\n                    curr = curr-&gt;next;     // move to next element\n                    return tmp;            // return iterator to previous element\n                }\n        };\n\n        // return iterator to first element\n        iterator begin() {\n            return iterator(root);\n        }\n\n        // return iterator to JUST AFTER the last element\n        iterator end() {\n            return iterator(NULL);\n        }\n};</code></pre><p></p><p>Thus, if we were to want to iterate over the elements of this\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, we could easily do the following:</p><p></p><pre><code class=\"cpp\">for(auto it = l.begin(); it != l.end(); it++) {<br>    cout &lt;&lt; *it &lt;&lt; endl;<br>}<br></code></pre><p></p><p>In this example, because we were creating an iterator for a\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>, which is a structure built around pointers to nodes when implemented in C++, the iterator objects had <span class=\"wysiwyg-font-tt\">Node</span> pointers (i.e., <span class=\"wysiwyg-font-tt\">Node*</span>) to keep track of the element to which they pointed. In the next example, we will explore how to implement an iterator for an\u00a0<b><span class=\"wysiwyg-color-green\">Array List</span></b>.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-06-08T22:33:13.478623"}