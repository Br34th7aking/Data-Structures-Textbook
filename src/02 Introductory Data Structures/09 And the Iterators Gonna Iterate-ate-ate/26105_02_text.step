{"block": {"name": "text", "text": "<p>You may recall that Java has many standard data structures (e.g. lists, sets, maps, etc.) already implemented and ready to use in the Collections API in the <span class=\"wysiwyg-font-tt\">java.util</span>\u00a0package. The Java Collections API defines an <span class=\"wysiwyg-font-tt\">Iterator</span> interface that can be used to traverse collections (each collection is responsible for defining its own iterator class), which only has three methods: <span class=\"wysiwyg-font-tt\">next</span>, <span class=\"wysiwyg-font-tt\">hasNext</span>, and <span class=\"wysiwyg-font-tt\">remove</span>.</p><p>\n\nC++ has a package with similar functionality to Java's Collections API: the C++ <b>Standard Template Library (STL)</b>. With regard to iterators, which are what we are focusing on in this section, the specifics of C++ iterators are slightly different in comparison to Java iterators. The syntax is messy to describe verbally, so the best way to teach how to use iterators is to provide you with a step-by-step example:</p><p></p><pre><code class=\"cpp\">vector&lt;string&gt; c;\n/* populate the set with data */\n\nvector&lt;string&gt;::iterator itr = c.begin(); // get an iterator <b>pointing to</b> c's <b>first element</b>\nvector&lt;string&gt;::iterator end = c.end();   // get an iterator <b>pointing past</b> c's <b>last element</b>\nwhile(itr != end) {                       // loop over the elements (<b>overloaded !=</b>)\n    cout &lt;&lt; *itr &lt;&lt; endl;                 // <b>dereference</b> the iterator <b>to get element</b>\n    ++itr;                                // point to next element (<b>overloaded ++ pre-increment</b>)\n}</code></pre><p></p><p></p><ul><li><span class=\"wysiwyg-font-tt\">*itr</span> returns a reference to the container object that <span class=\"wysiwyg-font-tt\">itr</span> is pointing to</li><li><span class=\"wysiwyg-font-tt\">itr1 == itr2</span> returns <span class=\"wysiwyg-font-tt\">true</span> if <span class=\"wysiwyg-font-tt\">itr1</span> and <span class=\"wysiwyg-font-tt\">itr2</span> refer to the same position in the same container (<span class=\"wysiwyg-font-tt\">false</span> otherwise)</li><li><span class=\"wysiwyg-font-tt\">itr1 != itr2</span> is equivalent to <span class=\"wysiwyg-font-tt\">!(itr1 == itr2)</span></li><li><span class=\"wysiwyg-font-tt\">c.begin()</span> returns an iterator positioned at the first item in container <span class=\"wysiwyg-font-tt\">c</span></li><li><span class=\"wysiwyg-font-tt\">c.end()</span> returns an iterator positioned\u00a0<i>after</i> the last item in container <span class=\"wysiwyg-font-tt\">c</span> (typically <span class=\"wysiwyg-font-tt\">NULL</span> or some equivalent)</li></ul><p></p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "96151", "time": "2017-11-07T22:19:12.331331"}