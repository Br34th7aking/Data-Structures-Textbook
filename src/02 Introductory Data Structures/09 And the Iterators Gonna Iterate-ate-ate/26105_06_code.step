{"id": "96153", "block": {"feedback_correct": "", "name": "code", "feedback_wrong": "", "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span> Using a C++ Iterator</b></p><p>In this challenge, you will be given a <span class=\"wysiwyg-font-tt\">set</span> consisting of randomly-generated <span class=\"wysiwyg-font-tt\">string</span> objects. Your task will be to use an <span class=\"wysiwyg-font-tt\">iterator</span> to output the elements of the <span class=\"wysiwyg-font-tt\">set</span> in ascending alphabetical order. Print out the elements to <span class=\"wysiwyg-font-tt\">cout</span>, one element per line.</p><p><b><span class=\"wysiwyg-color-red\">Hint:\u00a0 <span class=\"wysiwyg-color-black\"></span></span></b><span class=\"wysiwyg-color-red\"><span class=\"wysiwyg-color-black\">Feel free to revisit step 2 to remind yourself of the syntax of the iterator class.\u00a0</span></span> <br></p><p><span class=\"wysiwyg-color-red\"><b>Hint:</b> </span>Notice that you are given a C++ <span class=\"wysiwyg-font-tt\">set</span> object. When an iterator iterates over the elements of a C++ <span class=\"wysiwyg-font-tt\">set</span>, in what order are the elements visited?</p><p></p>", "subtitle_files": [], "source": {"execution_time_limit": 5, "code": "import random\n\ndef generate_DNA(N):\n    return ''.join(random.choice(\"ACGT\") for _ in range(N))\n\ndef generate():\n    tests = [\n             'CCC\\nTTT\\nAAA\\nGGG',\n             \n             '\\n'.join([generate_DNA(100) for _ in range(100)])\n            ]\n    return tests\n\n\ndef solve(dataset):\n    return '\\n'.join(sorted(dataset.splitlines()))\n\n\ndef check(reply, clue):\n    if len(reply) == 0:\n        return 0, \"You didn't output anything. Are you sure you're outputting to cout?\"\n    reply = reply.splitlines()\n    clue = clue.splitlines()\n    if len(reply) == 1:\n        return 0, \"You only had one line of output. Are you sure you're printing one string per line?\" \n    if reply == clue:\n        return 1\n    else:\n        return 0, \"Your code's output does not match the expected output\"", "samples_count": 1, "execution_memory_limit": 256, "manual_memory_limits": [], "templates_data": "::c++11\n::header\n#include <iostream>\n#include <set>\n#include <string>\nusing namespace std;\n\n::code\nvoid printStrings(set<string> & myset) {\n    // YOUR CODE HERE\n}\n\n::footer\nint main() {\n    // read input (from cin) and create set from input\n    set<string> myset;\n    for (string line; getline(cin, line);) {\n        myset.insert(line);\n    }\n    \n    // use an iterator to iterate through the set and print the elements to cout (one per line)\n    printStrings(myset);\n    \n    return 0;\n}", "is_time_limit_scaled": true, "is_memory_limit_scaled": true, "manual_time_limits": [], "test_archive": []}, "animation": null, "video": null, "tests_archive": "/api/step-sources/96153/tests", "options": {"execution_time_limit": 5, "execution_memory_limit": 256, "code_templates": {"c++11": "void printStrings(set<string> & myset) {\n    // YOUR CODE HERE\n}"}, "limits": {"c++11": {"memory": 256, "time": 5}}, "samples": [["CCC\nTTT\nAAA\nGGG", "AAA\nCCC\nGGG\nTTT"]]}, "subtitles": {}}, "time": "2017-06-08T22:33:11.918935"}