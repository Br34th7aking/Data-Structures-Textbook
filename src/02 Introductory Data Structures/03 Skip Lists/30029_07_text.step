{"block": {"name": "text", "text": "<p>Hopefully the previous questions made you think about how the distribution of\u00a0<i>heights</i> in a\u00a0<b><span class=\"wysiwyg-color-red\">Skip List</span></b> affects the\u00a0<i>performance</i> of the\u00a0<b><span class=\"wysiwyg-color-red\">Skip List</span></b>. To emphasize this thought, look at the following\u00a0<b><span class=\"wysiwyg-color-red\">Skip List</span></b>, and notice how using it is no faster than using an ordinary\u00a0<b><span class=\"wysiwyg-color-blue\">Linked List</span></b>\u00a0because we have to potentially iterate over all\u00a0<i>n</i> elements in the worst case:</p><p><img title=\"Image: https://ucarecdn.com/db5e6407-7dfd-4cbf-9820-456a1c913c30/\" alt=\"\" src=\"https://ucarecdn.com/db5e6407-7dfd-4cbf-9820-456a1c913c30/\"></p><p></p><p></p><p>For example, finding node 5 would require following 5 pointers (i.e., 5 node traversals) and finding node 3 would require following 3 pointers (i.e., 3 node traversals). <br></p><p>However, this next example of a <b><span class=\"wysiwyg-color-red\">Skip List</span></b> has a better distribution of heights, meaning we check less elements to find the one we want:</p><p></p><p><img title=\"Image: https://ucarecdn.com/28eab8f8-c850-477c-a8e1-4fa7ee7cddee/\" alt=\"\" src=\"https://ucarecdn.com/28eab8f8-c850-477c-a8e1-4fa7ee7cddee/\"></p><p></p><p>For example, finding node 5 would require following 2 pointers (i.e., 2 node traversals) and finding node 3 would require following 3 pointers (i.e., 2 node traversals). Remember, the amount of pointers we end up following is not always equivalent to the amount of nodes we end up traversing. This is because we sometimes need to \"follow\" a pointer to check to see if we should even traverse to that node in the first place.</p><p>Clearly, the distribution of heights has a significant impact on the performance of a\u00a0<b><span class=\"wysiwyg-color-red\">Skip List</span></b>. With the best distribution of heights, the\u00a0<b><span class=\"wysiwyg-color-red\">Skip List</span></b> \"find\" algorithm effectively performs binary search, resulting in a O(log\u00a0<i>n</i>) time complexity. Thus, we must ask ourselves the following question: How can we design our\u00a0<b><span class=\"wysiwyg-color-red\">Skip List</span></b> such that heights are automatically \"well-distributed\"?</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "121923", "time": "2017-11-07T22:18:08.732054"}