{"block": {"name": "code", "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b> <b>Implementing a Multiway Trie</b></p><p>In this challenge, you will be implementing a <b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b> with \u03a3 = {A, ..., Z}. We will define a <span class=\"wysiwyg-font-tt\">Node</span> class for you, and you will use it in your implementation of a <b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>.</p><p>Below is the C++ <span class=\"wysiwyg-font-tt\">Node</span> class we have defined for you:</p><p></p><pre><code class=\"cpp\">class Node {\n    public:\n        bool word = false;  // Node's \"word\" label\n        Node* children[26]; // children[0] corresponds to 'A', children[1] to 'B', etc.\n        Node();             // Node constructor\n};\n\nNode::Node(void) {<br>\u00a0 \u00a0 for(int i = 0; i &lt; 26; ++i) {<br>\u00a0 \u00a0 \u00a0 \u00a0 children[i] = NULL;<br>\u00a0 \u00a0 }<br>}\n</code></pre><p></p><p>Below is the C++ <span class=\"wysiwyg-font-tt\">Lexicon</span> class we have declared for you:</p><p></p><pre><code class=\"cpp\">class MultiwayTrie {\n    public:\n        Node* root = new Node();  // root node of Multiway Trie\n        bool find(string word);   // \"find\" function of MultiwayTrie class\n        void insert(string word); // \"insert\" function of MultiwayTrie class\n\u00a0 \u00a0 \u00a0 \u00a0 void remove(string word); // \"remove\" function of MultiwayTrie class\n};</code></pre><p></p><p>The equivalent Python classes are the following:</p><p></p><pre><code class=\"python\">class Node:\n    word = False         # Node's \"word\" label\n    children = [None]*26 # children[0] corresponds to 'A', children[1] to 'B', etc.\n    Node()               # Node constructor\n\nclass MultiwayTrie:\n    root = Node() # root node of Multiway Trie\n    find(word)    # \"find\" function of MultiwayTrie class\n    insert(word)  # \"insert\" function of MultiwayTrie class\n    remove(word)  # \"remove\" function of MultiwayTrie class</code></pre><p></p>", "video": null, "animation": null, "options": {"limits": {"c++11": {"memory": 256, "time": 5}, "python3": {"memory": 256, "time": 15}}, "execution_memory_limit": 256, "code_templates": {"c++11": "/* Return true if MultiwayTrie contains word, otherwise return false */\nbool MultiwayTrie::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into MultiwayTrie (return nothing) */\nvoid MultiwayTrie::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from MultiwayTrie (return nothing) */\nvoid MultiwayTrie::remove(string word) {\n    /* YOUR CODE HERE */\n}", "python3": "class Node:\n    def __init__(self):\n        self.word = False\n        self.children = [None]*26\n\nclass MultiwayTrie:\n    def __init__(self):\n        self.root = Node()\n\n    # Return True if Lexicon contains word, otherwise return False\n    def find(self, word):\n        # YOUR CODE HERE\n\n    # Insert word into Lexicon (return nothing)\n    def insert(self, word):\n        # YOUR CODE HERE\n\n    # Remove word from Lexicon (return nothing)\n    def remove(self, word):\n        # YOUR CODE HERE"}, "execution_time_limit": 5, "samples": [["N/A", "N/A"]]}, "subtitle_files": [], "source": {"execution_memory_limit": 256, "samples_count": 1, "templates_data": "::python3\n::header\n::code\nclass Node:\n    def __init__(self):\n        self.word = False\n        self.children = [None]*26\n\nclass MultiwayTrie:\n    def __init__(self):\n        self.root = Node()\n\n    # Return True if Lexicon contains word, otherwise return False\n    def find(self, word):\n        # YOUR CODE HERE\n\n    # Insert word into Lexicon (return nothing)\n    def insert(self, word):\n        # YOUR CODE HERE\n\n    # Remove word from Lexicon (return nothing)\n    def remove(self, word):\n        # YOUR CODE HERE\n::footer\n# Initialize MultiwayTrie object\nd = MultiwayTrie()\n    \n# Test \"insert\" and \"find\" functions\nd.insert(\"NIEMA\")\nif d.find(\"ALEXANDERNIEMAMOSHIRI\") or not d.find(\"NIEMA\"):\n    print(\"INSERTFIND\"); exit()\n    \n# Test \"remove\" function\nd.remove(\"NIEMA\")\nif d.find(\"NIEMA\"):\n    print(\"REMOVE\"); exit()\n    \n# All tests passed\nprint(\"PASS\")\n\n::c++11\n::header\n#include <string>\n#include <iostream>\nusing namespace std;\n\nclass Node {\n    public:\n        bool word = false;\n        Node* children[26]; // children[0] corresponds to 'a', children[1] to 'b', etc.\n        Node();\n};\n\nNode::Node(void) {\n    for(int i = 0; i < 26; ++i) {\n        children[i] = NULL;\n    }\n}\n\nclass MultiwayTrie {\n    public:\n        Node* root = new Node();  // root node of MultiwayTrie\n        bool find(string word);   // \"find\" function of MultiwayTrie class\n        void insert(string word); // \"insert\" function of MultiwayTrie class\n        void remove(string word); // \"remove\" function of MultiwayTrie class\n};\n\n::code\n/* Return true if MultiwayTrie contains word, otherwise return false */\nbool MultiwayTrie::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into MultiwayTrie (return nothing) */\nvoid MultiwayTrie::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from MultiwayTrie (return nothing) */\nvoid MultiwayTrie::remove(string word) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    // Initialize MultiwayTrie object\n    MultiwayTrie d;\n    \n    // Test \"insert\" and \"find\" functions\n    d.insert(\"NIEMA\");\n    if(d.find(\"ALEXANDERNIEMAMOSHIRI\") || !d.find(\"NIEMA\")) {\n        cout << \"INSERTFIND\"; exit(0);\n    }\n    \n    // Test \"remove\" function\n    d.remove(\"NIEMA\");\n    if(d.find(\"NIEMA\")) {\n        cout << \"REMOVE\"; exit(0);\n    }\n    \n    // All tests passed\n    cout << \"PASS\";\n}", "manual_memory_limits": [], "manual_time_limits": [], "is_memory_limit_scaled": true, "code": "def generate():\n    tests = [\"N/A\"]\n    return tests\n\n\ndef solve(dataset):\n    return \"N/A\"\n\n\ndef check(reply, clue):\n    reply = reply.strip()\n    if reply == \"N/A\" or reply == \"PASS\":\n        return 1\n    elif reply == \"INSERTFIND\":\n        return 0,\"Either your 'insert' or your 'find' function is incorrect.\\n\"\n    elif reply == \"REMOVE\":\n        return 0,\"Your 'remove' function is incorrect.\\n\"\n    else:\n        return 0", "test_archive": [], "is_time_limit_scaled": true, "execution_time_limit": 5}, "subtitles": {}, "tests_archive": "/api/step-sources/121828/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "121828", "time": "2017-11-07T22:25:38.336638"}