{"id": "122679", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>The <b>remove</b>\u00a0algorithm is extremely trivial once you understand the find algorithm. To remove a word\u00a0<i>key</i> from a\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>, simply perform the find algorithm. If you successfully find\u00a0<i>key</i>, simply remove the \"word node\" label from the node at which you end up.</p><p>Below is formal pseudocode for the remove algorithm of the <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>:</p><p></p><pre><code class=\"cpp\"><b>remove(key): // remove key if it exists in this TST\n</b>    node = root node of the TST\n    letter = first letter of key\n    loop infinitely:\n        // left child\n        if letter &lt; node.label:\n            if node has a left child:\n                node = node.leftChild\n            else:\n                return                            // key cannot exist in this TST\n\n        // right child\n        else if letter &gt; node.label:\n            if node has a right child:\n                node = node.rightChild\n            else:\n                return                            // key cannot exist in this TST\n\n        // middle child\n        else:\n            if letter is the last letter of key and node is a word-node:\n                remove the word-node label from node // found key, so remove it from the TST\n                return\n            else:\n                if node has a middle child:\n                    node = node.middleChild\n                    letter = next letter of key\n                else:\n                    return                        // key cannot exist in this TST</code></pre><p></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-01-05T20:14:04.339150"}