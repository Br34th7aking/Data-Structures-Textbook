{"id": "122675", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>The <b>Trie</b>\u00a0is a tree structure in which the elements that are being stored are <i>not</i>\u00a0represented by the value of a single node. Instead, elements stored in a <b>Trie</b>\u00a0are denoted by the concatenation of the labels on the path from the root to the node representing the corresponding element. The\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree (TST)</span></b> is a type of trie in which\u00a0nodes are arranged in a manner similar to a <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>,\u00a0but with up to three children rather than the binary tree's limit of two.</p><p>Each node of a <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b> stores a single character from our alphabet\u00a0\u03a3 and can have three children: a\u00a0<i>middle child</i>,\u00a0<i>left child</i>, and\u00a0<i>right child</i>. Furthermore, just like in a\u00a0<b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>, nodes that represent keys are labeled as \"word nodes\" in some way (for our purposes, we will color them <b><span class=\"wysiwyg-color-blue\">blue</span></b>). Just like in a\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>, for every node\u00a0<i>u</i>, the\u00a0<i>left child</i> of\u00a0<i>u</i> must have a value\u00a0<i>less than u</i>, and the\u00a0<i>right child</i> of\u00a0<i>u</i> must have a value\u00a0<i>greater than u</i>. The\u00a0<i>middle child</i> of\u00a0<i>u</i> represents the next character in the current word.<br></p><p>Below is an example of a\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b> that contains the words \"call,\" \"me,\" \"mind,\" and \"mid\":</p><p><span class=\"image-wrapper\"><img title=\"Image: https://ucarecdn.com/1349d75d-a32c-4ccb-b4ba-dffe57cb3067/\" src=\"https://ucarecdn.com/1349d75d-a32c-4ccb-b4ba-dffe57cb3067/\"></span></p><p>If it is unclear to you\u00a0<i>how</i> this example stores the words we listed above, as well as how to go about finding an arbitrary query word, that is perfectly fine. It will hopefully become more clear as we work through more examples together.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-02-14T23:21:02.331093"}