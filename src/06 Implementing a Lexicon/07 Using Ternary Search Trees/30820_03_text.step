{"id": "122676", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>In a  <b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>,  a word was defined as the concatenation of edge labels along the path from the root to a \"word node.\" In a <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>, the definition of a word is a bit more complicated:</p><p>For a given \"word node,\" define the path from the root to the \"word node\" as <i>path</i>, and define <i>S</i> as the set of all nodes in <i>path</i> that have a middle child also in <i>path</i>. The word represented by the \"word node\" is defined as the concatenation of the labels of each node in<i> S</i>, along with the label of the \"word node\" itself. <br></p><p>To\u00a0<b>find</b> a word\u00a0<i>key</i>, we start our tree traversal at the root of the the <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>. Let's denote the current node as <i>node</i> and the current letter of\u00a0<i>key</i> as\u00a0<i>letter</i>:</p><p></p><ul><li>If\u00a0<i>letter</i> is less than\u00a0<i>node</i>'s label: If <i>node</i> has a left child,\u00a0traverse down to\u00a0<i>node</i>'s left child. Otherwise, we have failed (<i>key</i> does not exist in this\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>)</li><li>If\u00a0<i>letter</i> is greater than\u00a0<i>node</i>'s label: If <i>node</i> has a\u00a0right child,\u00a0traverse down to\u00a0<i>node</i>'s right child. Otherwise, we have failed (<i>key</i> does not exist in this <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>)</li><li>If\u00a0<i>letter</i> is equal to\u00a0<i>node</i>'s label: If\u00a0<i>letter</i> is the last letter of\u00a0<i>key</i> and if <i>node</i> is labeled as a \"word node,\" we have successfully found\u00a0<i>key</i>\u00a0in our <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>; if not, we have failed. Otherwise, if <i>node</i> has a middle child,\u00a0traverse down to\u00a0<i>node</i>'s middle child and set\u00a0<i>letter</i> to the next character of\u00a0<i>key</i>; if not, we have failed (<i>key</i> does not exist in this\u00a0<b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>)</li></ul><p></p><p>Below is formal pseudocode for the find\u00a0algorithm of the <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>:</p><p></p><pre><code class=\"cpp\"><b>find(key): // return True if key exists in this TST, otherwise return False\n</b>    node = root node of the TST\n    letter = first letter of key\n    loop infinitely:\n        // left child\n        if letter &lt; node.label:\n            if node has a left child:\n                node = node.leftChild\n            else:\n                return False     // key cannot exist in this TST\n\n        // right child\n        else if letter &gt; node.label:\n            if node has a right child:\n                node = node.rightChild\n            else:\n                return False     // key cannot exist in this TST\n\n        // middle child\n        else:\n            if letter is the last letter of key and node is a word-node:\n                return True      // we found key in this TST!\n            else:\n                if node has a middle child:\n                    node = node.middleChild\n                    letter = next letter of key\n                else:\n                    return False // key cannot exist in this TST</code></pre><p></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-02-14T23:21:03.177433"}