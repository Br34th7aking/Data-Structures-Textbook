{"id": "122684", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p></p><p>Saying that the structure of a <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b> is \"clean\" is a bit of a stretch, especially in comparison to the structure of a <b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>, but the structure is ordered nonetheless because of the <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b> property that a <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b> maintains. As a result, just like in a <b><span class=\"wysiwyg-color-red\">Multiway Trie</span></b>, we can iterate through the elements of a <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b> in sorted order by performing a <b><span class=\"wysiwyg-color-green\">in-order traversal</span></b>\u00a0on the trie. Below is the pseudocode to recursively output all words in a <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>\u00a0in ascending or descending alphabetical order (we would call either function on the root):</p><p></p><pre><code class=\"cpp\"><b></b><b>ascendingInOrder(node): // Recursively iterate over the words in ascending order\n</b>\u2003\u2003\u2003\u2003for left child of node (in ascending order):\n        ascendingInOrder(child)<b>\n</b>    if node is a word-node:\n        output the word labeled by path from root to node\n\u2003\u2003\u2003\u2003for middle child of node (in ascending order):\n        ascendingInOrder(child)\n    for right child of node (in ascending order):\n        ascendingInOrder(child)\n</code></pre><p></p><p></p><pre><code class=\"cpp\"><b></b><b>descendingInOrder(node): // Recursively iterate over the words in descending order\n</b>    for right child of node (in descending order):\n        descendingInOrder(child)\n\u2003\u2003\u2003\u2003if node is a word-node:\n        output the word labeled by path from root to node\n    for middle child of node (in descending order):\n        descendingInOrder(child)\n    for left child of node (in descending order):\n        descendingInOrder(child)<br></code></pre><p></p><p>We can use this recursive <b><span class=\"wysiwyg-color-green\">in-order traversal</span></b>\u00a0technique to provide another useful function to our <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>: auto-complete. If we were given a prefix and we wanted to output <i>all </i>words in our <b><span class=\"wysiwyg-color-blue\">Ternary Search Tree</span></b>\u00a0that start with this prefix, we can traverse down the trie along the path labeled by the prefix, and we can then call the recursive <b><span class=\"wysiwyg-color-green\">in-order traversal</span></b>\u00a0function on the node we reached.</p><br><p></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-02-14T23:21:11.120175"}