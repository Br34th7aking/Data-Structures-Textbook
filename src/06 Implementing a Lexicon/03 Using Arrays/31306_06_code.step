{"block": {"name": "code", "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b> <b>Implementing a Lexicon Using an Array</b></p><p>In C++, the <span class=\"wysiwyg-font-tt\">vector</span> container is implemented as a <b>Dynamic <span class=\"wysiwyg-color-green\">Array</span></b>. In this code challenge, your task is to implement the three functions of the lexicon ADT described previously in C++ using the <span class=\"wysiwyg-font-tt\">vector</span> container. Note that insertions <i>must</i> keep the elements in increasing order. Also, you should use C++'s <span class=\"wysiwyg-font-tt\"><a href=\"http://www.cplusplus.com/reference/algorithm/binary_search/\" rel=\"nofollow\">binary_search</a></span> function in your find function. Below is the C++ <span class=\"wysiwyg-font-tt\">Lexicon</span> class we have declared for you:</p><p></p><pre><code class=\"cpp\">class Lexicon {\n    public:\n        vector&lt;string&gt; array;     // instance variable array object\n        bool find(string word);   // \"find\" function of Lexicon class\n        void insert(string word); // \"insert\" function of Lexicon class\n\u00a0 \u00a0 \u00a0 \u00a0 void remove(string word); // \"remove\" function of Lexicon class\n};</code></pre><p></p><p>If you need help using the C++ <span class=\"wysiwyg-font-tt\">vector</span>, be sure to look at the <a href=\"http://www.cplusplus.com/reference/vector/vector/\" rel=\"nofollow\">C++ Reference</a>.</p><p>In Python, the <span class=\"wysiwyg-font-tt\">list</span> collection is implemented as a <b>Dynamic <span class=\"wysiwyg-color-green\">Array</span></b>. The equivalent Python class is the following:<br></p><p></p><pre><code class=\"python\">class Lexicon:\n    array = list() # instance variable array object\n    find(word)     # \"find\" function of Lexicon class\n    insert(word)   # \"insert\" function of Lexicon class\n    remove(word)   # \"remove\" function of Lexicon class</code></pre><p></p><p>If you need help using the Python <span class=\"wysiwyg-font-tt\">list</span>, be sure to look at the <a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\" rel=\"nofollow\">Python 3 Reference</a>.</p>", "video": null, "animation": null, "options": {"limits": {"c++11": {"memory": 256, "time": 5}, "python3": {"memory": 256, "time": 15}}, "execution_memory_limit": 256, "code_templates": {"c++11": "/* Return true if Lexicon contains word, otherwise return false */\nbool Lexicon::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into Lexicon (return nothing) */\nvoid Lexicon::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Lexicon (return nothing) */\nvoid Lexicon::remove(string word) {\n    /* YOUR CODE HERE */\n}", "python3": "class Lexicon:\n    def __init__(self):\n        self.array = list()\n\n    # Return True if Lexicon contains word, otherwise return False\n    def find(self, word):\n        # YOUR CODE HERE\n\n    # Insert word into Lexicon (return nothing)\n    def insert(self, word):\n        # YOUR CODE HERE\n\n    # Remove word from Lexicon (return nothing)\n    def remove(self, word):\n        # YOUR CODE HERE"}, "execution_time_limit": 5, "samples": [["N/A", "N/A"]]}, "subtitle_files": [], "source": {"execution_memory_limit": 256, "samples_count": 1, "templates_data": "::python3\n::header\n::code\nclass Lexicon:\n    def __init__(self):\n        self.array = list()\n\n    # Return True if Lexicon contains word, otherwise return False\n    def find(self, word):\n        # YOUR CODE HERE\n\n    # Insert word into Lexicon (return nothing)\n    def insert(self, word):\n        # YOUR CODE HERE\n\n    # Remove word from Lexicon (return nothing)\n    def remove(self, word):\n        # YOUR CODE HERE\n::footer\n# Initialize Lexicon object\nd = Lexicon()\nd.array.append(\"ALEXANDERNIEMAMOSHIRI\");\n    \n# Test \"find\" function\nif (not d.find(\"ALEXANDERNIEMAMOSHIRI\")) or d.find(\"NIEMA\"):\n    print(\"FIND\"); exit()\n    \n# Test \"insert\" function\nd.insert(\"NIEMA\")\nif not d.find(\"NIEMA\"):\n    print(\"INSERT\"); exit()\n    \n# Test \"remove\" function\nd.remove(\"NIEMA\")\nif d.find(\"NIEMA\"):\n    print(\"REMOVE\"); exit()\n    \n# All tests passed\nprint(\"PASS\")\n\n::c++11\n::header\n#include <vector>\n#include <string>\n#include <stdlib.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nclass Lexicon {\n    public:\n        vector<string> array;     // instance variable array object\n        bool find(string word);   // \"find\" function of Lexicon class\n        void insert(string word); // \"insert\" function of Lexicon class\n        void remove(string word); // \"remove\" function of Lexicon class\n};\n\n::code\n/* Return true if Lexicon contains word, otherwise return false */\nbool Lexicon::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into Lexicon (return nothing) */\nvoid Lexicon::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Lexicon (return nothing) */\nvoid Lexicon::remove(string word) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    // Initialize Lexicon object\n    Lexicon d;\n    d.array.push_back(\"ALEXANDERNIEMAMOSHIRI\");\n    \n    // Test \"find\" function\n    if(!d.find(\"ALEXANDERNIEMAMOSHIRI\") || d.find(\"NIEMA\")) {\n        cout << \"FIND\"; exit(0);\n    }\n    \n    // Test \"insert\" function\n    d.array.push_back(\"NIEMA\");\n    d.insert(\"MOSHIRI\");\n    for(int i = 0; i < d.array.size()-1; ++i) {\n        if(d.array[i] > d.array[i+1]) {\n            cout << \"INSERT\"; exit(0);\n        }\n    }\n    if(!d.find(\"MOSHIRI\")) {\n        cout << \"INSERT\"; exit(0);\n    }\n    \n    // Test \"remove\" function\n    d.remove(\"NIEMA\");\n    if(d.find(\"NIEMA\")) {\n        cout << \"REMOVE\"; exit(0);\n    }\n    \n    // All tests passed\n    cout << \"PASS\";\n}", "manual_memory_limits": [], "manual_time_limits": [], "is_memory_limit_scaled": true, "code": "def generate():\n    tests = [\"N/A\"]\n    return tests\n\n\ndef solve(dataset):\n    return \"N/A\"\n\n\ndef check(reply, clue):\n    reply = reply.strip()\n    if reply == \"N/A\" or reply == \"PASS\":\n        return 1\n    elif reply == \"FIND\":\n        return 0,\"Your 'find' function is incorrect.\\n\"\n    elif reply == \"INSERT\":\n        return 0,\"Your 'insert' function is incorrect.\\n\"\n    elif reply == \"REMOVE\":\n        return 0,\"Your 'remove' function is incorrect.\\n\"\n    else:\n        return 0", "test_archive": [], "is_time_limit_scaled": true, "execution_time_limit": 5}, "subtitles": {}, "tests_archive": "/api/step-sources/121526/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "121526", "time": "2017-11-07T22:24:56.064181"}