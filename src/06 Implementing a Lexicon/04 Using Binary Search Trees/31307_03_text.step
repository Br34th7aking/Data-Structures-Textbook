{"block": {"name": "text", "text": "<p>Below is pseudocode to implement the three operations of a lexicon using a\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>. Again, we would choose to use an\u00a0<b><span class=\"wysiwyg-color-purple\">AVL Tree</span></b> because of their self-balancing properties.\u00a0In all three functions below, the backing <b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>\u00a0is denoted as <span class=\"wysiwyg-font-tt\">tree</span>.</p><p></p><pre><code class=\"cpp\"><b>find(word):   // Lexicon's \"find\" function\n</b>    return tree.find(word) // call the backing BST's \"find\" function</code></pre><p></p><p></p><pre><code class=\"cpp\"><b>insert(word): // Lexicon's \"insert\" function\n</b>    tree.insert(word)      // call the backing BST's \"insert\" function</code></pre><p></p><p></p><pre><code class=\"cpp\"><b>remove(word): // Lexicon's \"remove\" function\n</b>    tree.remove(word)      // call the backing BST's \"remove\" function</code></pre><p></p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b>\u00a0By storing our words in a\u00a0<b><span class=\"wysiwyg-color-green\">Binary Search Tree</span></b>, is there some efficient way for us to iterate through the words in alphabetical order?<br></p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "121603", "time": "2018-03-04T14:41:36.162809"}