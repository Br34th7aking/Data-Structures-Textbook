{"block": {"name": "code", "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b> <b>Implementing a Lexicon Using a Hash Table</b></p><p>In C++, the <span class=\"wysiwyg-font-tt\">unordered_set</span> container is implemented as a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. Below is the C++ <span class=\"wysiwyg-font-tt\">Lexicon</span> class we have declared for you:</p><p></p><pre><code class=\"cpp\">class Lexicon {\n    public:\n        unordered_set&lt;string&gt; hashTable; // instance variable Hash Table object\n        bool find(string word);          // \"find\" function of Lexicon class\n        void insert(string word);        // \"insert\" function of Lexicon class\n\u00a0 \u00a0 \u00a0 \u00a0 void remove(string word);        // \"remove\" function of Lexicon class\n};</code></pre><p></p><p>If you need help using the C++ <span class=\"wysiwyg-font-tt\">unordered_set</span>, be sure to look at the <a title=\"Link: http://www.cplusplus.com/reference/unordered_set/unordered_set/\" href=\"http://www.cplusplus.com/reference/unordered_set/unordered_set/\" rel=\"nofollow\">C++ Reference</a>.</p><p>In Python, the <span class=\"wysiwyg-font-tt\">set</span> collection is implemented as a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. The equivalent Python class is the following:<br></p><p></p><pre><code class=\"python\">class Lexicon:\n    hashTable = set() # instance variable Hash Table object\n    find(word)        # \"find\" function of Lexicon class\n    insert(word)      # \"insert\" function of Lexicon class\n    remove(word)      # \"remove\" function of Lexicon class</code></pre><p></p><p>If you need help using the Python <span class=\"wysiwyg-font-tt\">set</span>, be sure to look at the <a href=\"https://docs.python.org/3/tutorial/datastructures.html#sets\" rel=\"nofollow\">Python 3 Reference</a>.</p>", "video": null, "animation": null, "options": {"code_templates": {"python3": "class Lexicon:\n    def __init__(self):\n        self.hashTable = set()\n\n    # Return True if Lexicon contains word, otherwise return False\n    def find(self, word):\n        # YOUR CODE HERE\n\n    # Insert word into Lexicon (return nothing)\n    def insert(self, word):\n        # YOUR CODE HERE\n\n    # Remove word from Lexicon (return nothing)\n    def remove(self, word):\n        # YOUR CODE HERE", "c++11": "/* Return true if Lexicon contains word, otherwise return false */\nbool Lexicon::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into Lexicon (return nothing) */\nvoid Lexicon::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Lexicon (return nothing) */\nvoid Lexicon::remove(string word) {\n    /* YOUR CODE HERE */\n}"}, "execution_time_limit": 5, "execution_memory_limit": 256, "samples": [["N/A", "N/A"]], "limits": {"python3": {"time": 15, "memory": 256}, "c++11": {"time": 5, "memory": 256}}}, "subtitle_files": [], "source": {"templates_data": "::python3\n::header\nfrom collections import deque\n::code\nclass Lexicon:\n    def __init__(self):\n        self.hashTable = set()\n\n    # Return True if Lexicon contains word, otherwise return False\n    def find(self, word):\n        # YOUR CODE HERE\n\n    # Insert word into Lexicon (return nothing)\n    def insert(self, word):\n        # YOUR CODE HERE\n\n    # Remove word from Lexicon (return nothing)\n    def remove(self, word):\n        # YOUR CODE HERE\n::footer\n# Initialize Lexicon object\nd = Lexicon()\nd.hashTable.add(\"ALEXANDERNIEMAMOSHIRI\");\n    \n# Test \"find\" function\nif (not d.find(\"ALEXANDERNIEMAMOSHIRI\")) or d.find(\"NIEMA\"):\n    print(\"FIND\"); exit()\n    \n# Test \"insert\" function\nd.insert(\"NIEMA\")\nif not d.find(\"NIEMA\"):\n    print(\"INSERT\"); exit()\n    \n# Test \"remove\" function\nd.remove(\"NIEMA\")\nif d.find(\"NIEMA\"):\n    print(\"REMOVE\"); exit()\n    \n# All tests passed\nprint(\"PASS\")\n\n::c++11\n::header\n#include <unordered_set>\n#include <string>\n#include <iostream>\nusing namespace std;\n\nclass Lexicon {\n    public:\n        unordered_set<string> hashTable; // instance variable Hash Table object\n        bool find(string word);     // \"find\" function of Lexicon class\n        void insert(string word);   // \"insert\" function of Lexicon class\n        void remove(string word);   // \"remove\" function of Lexicon class\n};\n\n::code\n/* Return true if Lexicon contains word, otherwise return false */\nbool Lexicon::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert word into Lexicon (return nothing) */\nvoid Lexicon::insert(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Lexicon (return nothing) */\nvoid Lexicon::remove(string word) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    // Initialize Lexicon object\n    Lexicon d;\n    d.hashTable.insert(\"ALEXANDERNIEMAMOSHIRI\");\n    \n    // Test \"find\" function\n    if(!d.find(\"ALEXANDERNIEMAMOSHIRI\") || d.find(\"NIEMA\")) {\n        cout << \"Your 'find' function is incorrect.\\n\"; exit(0);\n    }\n    \n    // Test \"insert\" function\n    d.insert(\"NIEMA\");\n    if(!d.find(\"NIEMA\")) {\n        cout << \"Your 'insert' function is incorrect.\\n\"; exit(0);\n    }\n    \n    // Test \"remove\" function\n    d.remove(\"NIEMA\");\n    if(d.find(\"NIEMA\")) {\n        cout << \"Your 'remove' function is incorrect.\\n\"; exit(0);\n    }\n    \n    // All tests passed\n    cout << \"PASS\";\n}", "execution_time_limit": 5, "is_memory_limit_scaled": true, "test_archive": [], "manual_memory_limits": [], "code": "def generate():\n    tests = [\"N/A\"]\n    return tests\n\n\ndef solve(dataset):\n    return \"N/A\"\n\n\ndef check(reply, clue):\n    reply = reply.strip()\n    if reply == \"N/A\" or reply == \"PASS\":\n        return 1\n    elif reply == \"Your 'find' function is incorrect.\\n\":\n        return 0,\"Your 'find' function is incorrect.\\n\"\n    elif reply == \"Your 'insert' function is incorrect.\\n\":\n        return 0,\"Your 'insert' function is incorrect.\\n\"\n    elif reply == \"Your 'remove' function is incorrect.\\n\":\n        return 0,\"Your 'remove' function is incorrect.\\n\"\n    else:\n        return 0", "manual_time_limits": [], "execution_memory_limit": 256, "is_time_limit_scaled": true, "samples_count": 1}, "subtitles": {}, "tests_archive": "/api/step-sources/121620/tests", "feedback_correct": "", "feedback_wrong": ""}, "id": "121620", "time": "2018-03-04T14:41:48.615574"}