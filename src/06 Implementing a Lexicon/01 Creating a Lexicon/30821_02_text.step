{"id": "121420", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>As computer scientists, we can think of the <b>lexicon</b>\u00a0as an <b>Abstract Data Type</b>\u00a0defined by the following functions:</p><p></p><ul><li><b><span class=\"wysiwyg-font-tt\">find(word)</span>:</b>\u00a0Find <span class=\"wysiwyg-font-tt\">word</span>\u00a0in the lexicon<br></li><li><b><span class=\"wysiwyg-font-tt\">insert(word)</span>:</b>\u00a0Insert <span class=\"wysiwyg-font-tt\">word</span>\u00a0into the lexicon<br></li><li><b><span class=\"wysiwyg-font-tt\">remove(word)</span>:</b>\u00a0Remove <span class=\"wysiwyg-font-tt\">word</span>\u00a0from the lexicon <br></li></ul><p>These three functions should hopefully sound annoyingly familiar by now, assuming you read the other chapters of the text! We have defined an <b>Abstract Data Type</b>, and we are now tasked with choosing a <b>Data Structure</b>\u00a0to use to implement it. In this chapter, we will discuss various possible implementation approaches, focusing on their respective pros and cons.</p><p>Throughout this chapter, because languages remain largely unchanging, we will assume that \"find\" operations are significantly more frequent than both \"insert\" and \"remove\" operations. Also, for the same reason, we will assume that we know the size of the lexicon (i.e., the number of words we will be putting into it) before its initial construction, which is quite unlike the applications we've dealt with in the past.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-02-14T23:20:05.832422"}