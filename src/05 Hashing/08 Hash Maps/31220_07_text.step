{"id": "122548", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>In practice, however, we realize that you will more often than not be using the built-in implementation of a <b><span class=\"wysiwyg-color-blue\">Hash Map</span></b> as opposed to implementing it from scratch, so how do we use C++'s <b><span class=\"wysiwyg-color-blue\">Hash Map</span></b> implementation?</p><p>In C++, the implementation of a <b><span class=\"wysiwyg-color-blue\">Hash Map</span></b> is the <a href=\"http://www.cplusplus.com/reference/unordered_map/unordered_map/\" rel=\"nofollow\">unordered_<i>map</i></a>, and it is implemented using the <b><span class=\"wysiwyg-color-red\">Separate Chaining</span></b> collision resolution strategy. Just to remind you, in C++, the implementation of a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> is the <a href=\"http://www.cplusplus.com/reference/unordered_set/unordered_set/\" rel=\"nofollow\">unordered<i>_set</i></a>.</p><p>Going all the way back to the initial goal of implementing a grade book system, the C++ code to use a <b><span class=\"wysiwyg-color-blue\">Hash Map</span></b> would be the following:</p><pre><code class=\"cpp\">unordered_map&lt;string, string&gt; gradeBook = {\n                { \"Kammy\", \"A\"},\n                { \"Alicia\", \"C\"},\n                { \"Anjali\", \"D\"},\n                { \"Nadah\", \"A\"}\n\u2003};</code></pre><p></p><p>If we wanted to add a new student to our grade book, we would do the following:</p><pre><code class=\"cpp\">gradeBook.insert({\"Bob\", \"B\"});\n\n/* Our new hash map would look something like this:\n             {  { \"Kammy\", \"A\"},\n                { \"Bob\" , \"B\"},\n                { \"Alicia\", \"C\"},\n                { \"Anjali\", \"D\"},\n                { \"Nadah\", \"A\"}  };\n  \n   Note how there is no ordering property, as expected */\n</code></pre><p></p><p>If we wanted to check Nadah's grade in our grade book, we would do the following:</p><pre><code>cout &lt;&lt; gradeBook[\"Nadah\"] &lt;&lt; endl; // [] operator returns the value stored at the key\n\n/* Output:\n   A\n*/</code></pre><p></p><p>Although we have mentioned many times that there is no particular ordering property when it comes to a <b><span class=\"wysiwyg-color-purple\">Hash Map</span></b> (as well as a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>), we can still <i>iterate</i> through the inserted objects using a for-each loop like so:</p><pre><code class=\"cpp\">for (auto student : gradeBook) {\n\n   std::cout &lt;&lt; student.first &lt;&lt; \": \" &lt;&lt; student.second &lt;&lt; std::endl; // .first returns the key\n                                                                      // .second returns the value\n}\n\n/* <b>Output:</b>\n   Bob: B\n   Kammy: A\n   Anjali: D\n   Alicia: C\n   Nadah: A\n*/</code></pre><br><b><span class=\"wysiwyg-color-red\">Note</span></b><span class=\"wysiwyg-color-red\">:</span> C++ deviates slightly from the traditional <b><span class=\"wysiwyg-color-green\">Map</span></b> <b>ADT</b>\n with respect to insertion. When inserting a duplicate element in the \nC++ unordered_map, the original value is not replaced. On the other \nhand, Python's implementation of the  <b><span class=\"wysiwyg-color-green\">Map</span></b> <b>ADT</b> does in fact replace the original value in a duplicate insertion. <br>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-01-05T20:13:01.669294"}