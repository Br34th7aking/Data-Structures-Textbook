{"id": "122113", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>How do we go about actually implementing this seemingly complex collision resolution strategy? Here is pseudocode to implement <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> when inserting a key <i>k</i>, with two tables <span class=\"wysiwyg-font-tt\">t1</span> and <span class=\"wysiwyg-font-tt\">t2</span>, both of capacity <span class=\"wysiwyg-font-tt\">M</span>, with backing arrays <span class=\"wysiwyg-font-tt\">arr1</span> and <span class=\"wysiwyg-font-tt\">arr2</span>, respectively, using a <b><span class=\"wysiwyg-color-green\">hash function</span></b> <span class=\"wysiwyg-font-tt\">H1(k)</span> and <span class=\"wysiwyg-font-tt\">H2(k)</span>, respectively:</p><p></p><pre><code class=\"cpp\"><b>insert_CuckooHash(k): // return true upon successful insertion\n</b>\n    index1 = H1(k)\n    index2 = H2(k) \n\n    // check for duplicate insertions (not allowed)\n    if arr1[index1] == k or arr2[index2] == k:\n        return false\n\n    current = k\n\n    // loop for a limited amount of time (we will discuss details in the next step) \n    while looping less than MAX times: // MAX is commonly set to 10\n\n        // insert until the slot inserted in is empty\n        oldValue = arr1[H1(current)]   // save the value currently in the slot\n        arr1[H1(current)] = current    // insert the new key\n\n        if oldValue == NULL:           // if slot was empty, we are done inserting\n            return true\n\n        current = oldValue             // time to re-insert what was kicked out\n\n        oldValue = arr2[H2(current)]   // save the value currently in the slot\n        arr2[H2(current)] = current    // insert the new key\n\n        if oldValue == NULL:           // if slot was empty, we are done inserting\n            return true\n\n        // repeat loop, but with the key displaced from arr2\n        current = oldValue\n\n     // loop ended, so insertion failed (need to rehash the table)\n     // rehash is commonly done by introducing two new hash functions\n     return false\n\n</code></pre><p></p><p><b><span class=\"wysiwyg-color-red\">STOP and Think:</span></b> Is <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> considered to be an <b>Open Addressing</b> collision resolution strategy?</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-06-08T22:37:42.876099"}