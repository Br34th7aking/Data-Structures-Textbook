{"block": {"name": "text", "text": "<p>Specifically, the reason why we were in an infinite cycle in the previous visualization is that there were no empty\u00a0slots in either $ T_1 $ or $ T_2 $ in which a key could potentially land, like so:</p><p><img height=\"457\" src=\"https://ucarecdn.com/9c4a42e7-d3d3-4d9d-b680-e489138eb84f/\" width=\"535\" alt=\"\"></p><p>Consequently, unless <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> has a limit as to how many times it attempts to move a key, the algorithm will never stop. As seen in the pseudocode in the previous step, when a key causes an infinite loop and the insertion fails, we must then resort to rehashing. Rehashing is generally done by introducing two new <b><span class=\"wysiwyg-color-green\">hash functions</span></b> and reinserting all the elements.</p><p><b><span class=\"wysiwyg-color-red\">Note:</span></b> It is important to make sure that the second <b><span class=\"wysiwyg-color-green\">hash function</span></b> used returns <i>different</i> indices for keys that originally hashed to the same index. This is because, if a key collides with another key in the first <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, we want to make sure that it will not collide with the same key again in the second <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. Otherwise, we risk hitting a cycle the moment we insert two keys that hash to the same first index.</p><p><b><span class=\"wysiwyg-color-red\">STOP and Think</span></b>: Let <i>k</i> be a key and <i>M</i> be the capacity of the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. Why would the pair of <b><span class=\"wysiwyg-color-green\">hash functions</span></b> $ H_1(k)=k\\ \\%\\ M $and\u00a0$  H_2(k)=(k+3)\\ \\%\\ M $ not be considered good?</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "122160", "time": "2017-11-07T22:24:13.962048"}