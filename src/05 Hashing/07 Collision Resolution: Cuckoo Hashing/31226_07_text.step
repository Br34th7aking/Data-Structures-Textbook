{"id": "121818", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>In the previous step, we saw that the bulk of the algorithm ran inside a while-loop that was bounded by a MAX limit. Why do we even have a limit in the first place?</p><p>You may have noticed that, in the second visualization, we provided that inserting\u00a0a key started to take longer because different keys started bouncing back and forth between places. For example, inserting the integer key 17 took 4 iterations of hashing. As both tables begin to fill up, the probability of collisions increases. <i>However</i>, unlike the other collision resolution strategies we discussed in which a\u00a0key <i>k</i> could end up trying every single\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table\u00a0</span></b>slot until the entire\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> was full (e.g.\u00a0<b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>, <b><span class=\"wysiwyg-color-blue\"> Double Hashing</span></b>, <b><span class=\"wysiwyg-color-blue\">Random Hashing</span></b>)\u00a0a key\u00a0<i>k</i> in <b><span class=\"wysiwyg-color-blue\">Cuckoo Hashing</span></b> only has\u00a0<b>two</b> different locations that it can map to (index1 =\u00a0$ H_1(k) $ and index2 =\u00a0$ H_2(k)  $).</p><p>Consequently, if both <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> locations for <i>all</i> keys are full, then the algorithm faces an infinite cycle, as seen in the visualization below (this visualization leaves off from where the previous one ended). Use the arrows in the bottom left to walk through the slides.</p><p><iframe src=\"https://docs.google.com/presentation/d/1uNYS51BNM66GJmM0vDIWnac-Y9VUQxOpYikpJoKXJyo/embed?start=false&amp;loop=false&amp;delayms=60000\" width=100% height=\"550\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-06-08T22:37:45.436376"}