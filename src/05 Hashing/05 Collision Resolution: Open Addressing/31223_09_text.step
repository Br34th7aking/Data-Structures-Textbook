{"block": {"name": "text", "text": "<p>As you hopefully agree, <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> is a fairly simple and straightforward solution to collision resolution. What's the catch?</p><p>We had originally introduced <b><span class=\"wysiwyg-color-purple\">Hash Tables</span></b> because we wanted to achieve extremely fast find, insert, and remove operations. Unfortunately, <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> slows us down extensively. As you might have noticed while doing the previous exercises, <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> can resort to having to <i>linearly scan</i> the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> to find an open slot to insert a key. As a result, our <b>worst-case</b> time complexity for an insert operation becomes <b>O(<i>N</i>)</b>. The same goes for attempting to <i>find</i> a key in the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>: in the worst-case scenario, we must linearly scan the entire <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> to see if the key exists. However, with a table that is not very full, we can in fact  achieve an <i><b>average</b></i><b>-case O(1)</b> time complexity for our operations.</p><p>Another negative quality about <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b> that you may have noticed is that it results in clusters, or \"clumps,\" of keys in the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>. It turns out that clumps are not just \"bad luck\": probabilistically, they are actually <i>more likely</i> to appear than not! To demonstrate this, we will use the following empty <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>:</p><p><img alt=\"\" src=\"https://ucarecdn.com/e0a1db6a-4d7b-4a21-ae7d-d81373117459/\"></p><p>If we were to insert a new key, it would have a $ \\frac{1}{5} $\u00a0chance of landing in any of the 5 slots. Let's say that, by chance, it landed in slot 0:</p><p><img alt=\"\" src=\"https://ucarecdn.com/b4eb73bc-8f73-43d0-9eed-de5610f6bcbb/\"></p><p>Now, if we were to insert a new key again, how likely is it to land in any of the four remaining slots? Intuitively, you might say that it would have a $ \\frac{1}{4} $\u00a0chance of landing in any of the 4 remaining slots, but unfortunately, this is not correct. Remember: even though it can't be inserted in slot 0, it can still\u00a0<i>index</i> to slot 0! For slots 2, 3, and 4, each has a $ \\frac{1}{5} $ chance of being filled by our new key (if the key indexes to 2, 3, or 4, respectively). What about slot 1? If the new key indexes to slot 1, it will be inserted into slot 1. However, remember, if the element indexes to slot 0, because of <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>, we would shift over and insert it into the next open slot, which is slot 1. As a result, there are two ways for the new key to land in slot 1, making the probability of it landing in slot 1 become\u00a0$ \\frac{2}{5} $, which is <b>twice as likely</b> as any of the other three open slots! Because this probability is twice as large as the others, let's say we ended up inserting into slot 1:</p><p><img alt=\"\" src=\"https://ucarecdn.com/9485d40e-8539-4349-8006-e4c04631f94f/\"></p><p>Now, what if we were to insert another key? Just as before, slots 3 and 4 each have a $ \\frac{1}{5} $\u00a0chance of being filled (if we were to index to 3 or 4, respectively). To fill slot 2, we could index to 2 with $ \\frac{1}{5} $\u00a0chance, but what would happen if we were to index to 1? Again, because of\u00a0<b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>, if we index to 1, we would see the slot is filled, and we would shift over to slot 2 to perform the insertion. Likewise, if we index to 0, we would see the slot is filled and shift over to slot 1, see the slot is filled and shift over to slot 2, and\u00a0<i>only then</i> perform the insertion. In other words, the probability of landing in slot 2 is\u00a0$ \\frac{3}{5} $, which is\u00a0<b>three times as likely</b> as any of the other slots!</p><p>We explained earlier\u00a0<i>why</i> clumps are bad (because we potentially have to do a linear scan across the clump, which is slow), but now we've actually shown that clumps are\u00a0<i>more likely to appear and grow</i> than not! What can we do to combat this issue?</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "121395", "time": "2017-11-07T22:23:49.684967"}