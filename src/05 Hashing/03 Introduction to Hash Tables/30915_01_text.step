{"block": {"name": "text", "text": "<p>We started this discussion about <b><span class=\"wysiwyg-color-blue\">hashing</span></b> with the motivation of achieving O(1) find, insert, and remove operations on average. We then discussed <b><span class=\"wysiwyg-color-green\">hash functions</span></b>, which allow us to take any object of some arbitrary type and effectively \"convert\" it into an integer, which we can then use to index into an array. This hand-wavy description of the ability to index into an array is the basic idea of the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> data structure, which we will now formally discuss.</p><p><b><span class=\"wysiwyg-color-red\">DISCLAIMER:</span></b> Whenever we say \"O(1)\" or \"constant time\" with regard to the average-case time complexity of a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, this is <b>ignoring the time complexity of the <span class=\"wysiwyg-color-green\">hash function</span></b>. For primitive data types, <b><span class=\"wysiwyg-color-green\">hash functions</span></b> are constant time, but for types that are collections of other types (e.g. lists, strings, etc.), good <b><span class=\"wysiwyg-color-green\">hash functions</span></b> iterate over <i>all</i> the elements in the collection. For example, a good <b><span class=\"wysiwyg-color-green\">hash function</span></b> for strings of length <i>k</i> would iterate over all <i>k</i> characters in the string, making it O(<i>k</i>). Thus, mapping a string of length <i>k</i> to an index in an array is in reality O(<i>k</i>) overall: we first perform a O(<i>k</i>) operation to compute a hash value for the string, and we then perform a O(1) operation to map this hash value to an index in the array.</p><p>Nevertheless, people say that <b><span class=\"wysiwyg-color-purple\">Hash Tables</span></b> in general have an <b>average-case</b> time complexity of <b>O(1)</b> because, unlike any of the other generic data structures (i.e., data structures that can store <i>any</i> datatype) we have seen thus far, <b>the average-case performance of a <span class=\"wysiwyg-color-purple\">Hash Table</span> is <i>independent</i> of the number of elements it stores</b>. For this reason, from here on out, we will omit the time complexity of computing a hash value when describing the time complexity of a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, which is the norm in the realm of Computer Science. Nevertheless, please keep this disclaimer in mind whenever thinking about <b><span class=\"wysiwyg-color-purple\">Hash Tables</span></b>.<br></p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "121900", "time": "2017-11-07T22:23:18.182544"}