{"id": "118623", "block": {"feedback_correct": "", "name": "text", "feedback_wrong": "", "text": "<p>A <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> can be thought as a collection of items that, on average, can be retrieved really fast. A <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> is implemented by an array, and more formally, we define\u00a0a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> to be an array of size <i>M</i>\u00a0(which we call the <b><span class=\"wysiwyg-color-purple\">Hash Table's</span></b>\u00a0<i>capacity</i>)\u00a0that stores keys <i>k</i> by using a\u00a0<b><span class=\"wysiwyg-color-green\">hash function</span></b> to compute an\u00a0<i>index</i> in the array at which to store\u00a0<i>k</i>.</p><p>For example, suppose we have a <b><span class=\"wysiwyg-color-purple\">Hash Table </span></b>with a capacity of\u00a0<i>M</i> =\u00a05 that stores letters as keys. We would choose a  <b><span class=\"wysiwyg-color-green\">hash function</span></b>\n that takes in the ASCII values of letters and maps them to indices (e.g. 'A' \u2192\u00a0index 0, 'B' \u00a0\u2192 index 1, etc.). Since <i>M</i> = 5, we need to make sure that any characters we insert into the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> will always map to a valid index (a number between 0 and 4, inclusive). As a result, we choose the   <b><span class=\"wysiwyg-color-green\">hash function</span></b>\n to be <i>H</i>(<i>k</i>) = <i>k</i> % <i>M</i>.</p><p>Inserting the letter 'A' into our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> would go through this process:</p><p><img alt=\"\" src=\"https://ucarecdn.com/21dc92e4-1186-4cb7-90ea-c4f3743866d5/\"></p><p>The rest of our insertions would look like this:</p><p><img alt=\"\" src=\"https://ucarecdn.com/bef8b50c-2623-4c36-96df-88472fa443bc/\"></p><p><b><span class=\"wysiwyg-color-red\">Note:</span> </b>Some of you may have noticed that there is redundancy in our mapping. For example, if we were to attempt to insert the letter 'A' and then the letter 'F', 'F' would have mapped to the slot already occupied by 'A'. More formally, we call this a <i>collision</i>. We will discuss how to handle collisions in-depth later on, but for now, just know that they are the cause of any slowness in a\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, so we want to design our\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> in such a way that minimizes them.</p>", "subtitle_files": [], "source": null, "animation": null, "video": null, "tests_archive": null, "options": {}, "subtitles": {}}, "time": "2017-01-05T20:12:04.489219"}