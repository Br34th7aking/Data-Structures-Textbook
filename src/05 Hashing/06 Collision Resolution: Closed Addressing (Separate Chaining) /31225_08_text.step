{"block": {"name": "text", "text": "<p>How would we go about implementing the remove and find functions for a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> that uses <b><span class=\"wysiwyg-color-red\">Separate Chaining</span></b>? The algorithm is actually quite simple: hash to the correct index of the <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b>, and then search for the item in the respective Linked List.  Note that this remove algorithm is <i>much</i> easier than the remove algorithm we had to use in <b><span class=\"wysiwyg-color-blue\">Linear Probing</span></b>.</p><p>It is also important to note that <b><span class=\"wysiwyg-color-red\">Separate Chaining</span></b> does not necessarily <i>have</i> to use Linked Lists! A <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> can have slots that point to AVL Trees, Red-Black Trees, etc., in which case the worst-case time complexity to find an item would definitely be faster. However, the reason why we use Linked Lists is that we do not expect the worst-case time complexity of finding an item in a <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> slot to make a huge difference. Why? Because if it did, that would mean that the rest of our <b><span class=\"wysiwyg-color-purple\">Hash Table</span></b> is performing poorly and that would imply that we should probably investigate why that might be the case and fix it (perhaps the hash function isn't good or the load factor has become too high).</p>", "video": null, "animation": null, "options": {}, "subtitle_files": [], "source": null, "subtitles": {}, "tests_archive": null, "feedback_correct": "", "feedback_wrong": ""}, "id": "121546", "time": "2018-03-04T14:40:54.377043"}