{"id": "121816", "block": {"feedback_wrong": "", "tests_archive": "/api/step-sources/121816/tests", "text": "<p><b><span class=\"wysiwyg-color-green\">CODE CHALLENGE:</span></b>\u00a0<b>Implementing a Dictionary Using a Hash Table</b></p><p>Recall that the only difference between a <i>lexicon</i> and a\u00a0<i>dictionary</i> is that a <i>lexicon</i> is just a list of words, whereas a <i>dictionary</i>\u00a0is a list of words <i>with their definitions</i>.\u00a0In C++, the <span class=\"wysiwyg-font-tt\">unordered_map</span> container is implemented as a\u00a0<b><span class=\"wysiwyg-color-green\">Hash Map</span></b>.\u00a0Below is the C++ <span class=\"wysiwyg-font-tt\">Dictionary</span> class we have declared for you, where <i>keys</i> are words and\u00a0<i>values</i> are definitions:</p><p></p><pre><code class=\"cpp\">class Dictionary {\n    public:\n        unordered_map&lt;string,string&gt; hashMap; // instance variable Hash Map object\n        string find(string word);             // \"find\" function of Dictionary class\n        void insert(string word, string def); // \"insert\" function of Dictionary class\n\u00a0 \u00a0 \u00a0 \u00a0 void remove(string word);             // \"remove\" function of Dictionary class\n};</code></pre><p></p><p>If you need help using the C++ <span class=\"wysiwyg-font-tt\">unordered_map</span>, be sure to look at the <a rel=\"nofollow\" href=\"http://www.cplusplus.com/reference/unordered_map/unordered_map/\">C++ Reference</a>.</p>", "subtitle_files": [], "options": {"code_templates": {"c++11": "/* Return the definition of word if Dictionary contains word, otherwise return empty string (\"\") */\nstring Dictionary::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert a (word, definition) pair into Dictionary (return nothing) */\nvoid Dictionary::insert(string word, string def) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Dictionary (return nothing) */\nvoid Dictionary::remove(string word) {\n    /* YOUR CODE HERE */\n}"}, "samples": [["N/A", "N/A"]], "execution_memory_limit": 256, "limits": {"c++11": {"memory": 256, "time": 5}}, "execution_time_limit": 5}, "name": "code", "subtitles": {}, "animation": null, "feedback_correct": "", "source": {"samples_count": 1, "manual_time_limits": [], "test_archive": [], "execution_memory_limit": 256, "is_memory_limit_scaled": true, "code": "def generate():\n    tests = [\"N/A\"]\n    return tests\n\n\ndef solve(dataset):\n    return \"N/A\"\n\n\ndef check(reply, clue):\n    reply = reply.strip()\n    if reply == \"N/A\" or reply == \"PASS\":\n        return 1\n    elif reply == \"FIND\":\n        return 0,\"Your 'find' function is incorrect.\\n\"\n    elif reply == \"INSERT\":\n        return 0,\"Your 'insert' function is incorrect.\\n\"\n    elif reply == \"REMOVE\":\n        return 0,\"Your 'remove' function is incorrect.\\n\"\n    else:\n        return 0", "manual_memory_limits": [], "is_time_limit_scaled": true, "execution_time_limit": 5, "templates_data": "::c++11\n::header\n#include <unordered_map>\n#include <string>\n#include <iostream>\nusing namespace std;\n\nclass Dictionary {\n    public:\n        unordered_map<string,string> hashMap; // instance variable Hash Map object\n        string find(string word);             // \"find\" function of Dictionary class\n        void insert(string word, string def); // \"insert\" function of Dictionary class\n        void remove(string word);             // \"remove\" function of Dictionary class\n};\n\n::code\n/* Return the definition of word if Dictionary contains word, otherwise return empty string (\"\") */\nstring Dictionary::find(string word) {\n    /* YOUR CODE HERE */\n}\n\n/* Insert a (word, definition) pair into Dictionary (return nothing) */\nvoid Dictionary::insert(string word, string def) {\n    /* YOUR CODE HERE */\n}\n\n/* Remove word from Dictionary (return nothing) */\nvoid Dictionary::remove(string word) {\n    /* YOUR CODE HERE */\n}\n\n::footer\nint main() {\n    // Initialize Lexicon object\n    Dictionary d;\n    pair<string,string> example (\"ALEXANDERNIEMAMOSHIRI\", \"AUTHOR\");\n    d.hashMap.insert(example);\n    \n    // Test \"find\" function\n    if(d.find(\"ALEXANDERNIEMAMOSHIRI\") != \"AUTHOR\" || d.find(\"NIEMA\") != \"\") {\n        cout << \"FIND\"; exit(0);\n    }\n    \n    // Test \"insert\" function\n    d.insert(\"NIEMA\",\"MOSHIRI\");\n    if(d.find(\"NIEMA\") != \"MOSHIRI\") {\n        cout << \"INSERT\"; exit(0);\n    }\n    \n    // Test \"remove\" function\n    d.remove(\"NIEMA\");\n    if(d.find(\"NIEMA\") != \"\") {\n        cout << \"REMOVE\"; exit(0);\n    }\n    \n    // All tests passed\n    cout << \"PASS\";\n}"}, "video": null}, "time": "2016-09-04T00:51:20.115133"}