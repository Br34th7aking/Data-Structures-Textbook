{"id": "116966", "block": {"feedback_wrong": "", "tests_archive": null, "text": "<p>Next, we will discuss the\u00a0<b><span class=\"wysiwyg-color-blue\">NP</span></b>\u00a0(<i><b><span class=\"wysiwyg-color-blue\">N</span></b></i>ondeterministic <i><b><span class=\"wysiwyg-color-blue\">P</span></b></i>olynomial time) class of computational problems. Any computational problem where, given a proposed answer to the problem, one can <i>verify</i> the answer for correctness in polynomial time is considered a member of <b><span class=\"wysiwyg-color-blue\">NP</span></b>. Note, however, that although we need to be able to\u00a0<i>verify</i> an answer in polynomial time, we do not necessarily need to be able to\u00a0<i>compute</i> a correct answer in polynomial time (i.e., it is not necessary for there to exist a polynomial-time algorithm that solves the problem optimally).</p><p>We mentioned in the previous step that\u00a0<b><span class=\"wysiwyg-color-green\">P</span></b> is the class of computational problems that can be <i>solved</i> in polynomial time. If\u00a0<b><span class=\"wysiwyg-color-blue\">NP</span></b> is the class of computational problems that can be\u00a0<i>verified</i> in polynomial time (whether or not you can solve them in polynomial time), it should be clear that\u00a0<b></b><span class=\"wysiwyg-color-green\"><b>P</b></span><b> is a subset of\u00a0</b><span class=\"wysiwyg-color-blue\"><b>NP</b></span><b></b>: if I can\u00a0<i>solve</i> a problem in polynomial time, then I can certainly\u00a0<i>verify</i> a proposed answer to the problem in polynomial time (I can just solve it in polynomial time and then compare the proposed answer to my answer).</p><p>Let's discuss a problem that is a member of\u00a0<b><span class=\"wysiwyg-color-blue\">NP</span></b>\u00a0(i.e., a proposed answer can be <i>verified</i> in polynomial time)\u00a0but is\u00a0<i>not</i> a member of\u00a0<b><span class=\"wysiwyg-color-green\">P</span></b> (i.e., no polynomial-time solution exists at the moment). The \"Subset Sum Problem\" is defined as follows:</p><p></p><ul><li><b>Input:</b> A set of integers<i>\u00a0</i><i>set</i><br></li><li><b>Output:</b> A non-empty subset of\u00a0<i>set</i> whose sum is 0<br></li></ul><p>You can try to think of a polynomial-time algorithm that solves the \"Subset Sum Problem\", but I can assure that your efforts will likely be futile (because if you\u00a0<i>did</i> find such an algorithm, you would have solved one of the <a href=\"https://en.wikipedia.org/wiki/Millennium_Prize_Problems\" rel=\"nofollow\">Millenium Prize Problems</a> and would receive a $1,000,000 prize). However, if I were to give you a set of integers\u00a0<i>set</i> and a proposed answer\u00a0<i>subset</i>, you would be able to check the correctness of\u00a0<i>subset</i> in polynomial time:<br></p><p></p><pre><code class=\"cpp\"><b>CheckSubset(set, subset):\n</b>    // verify that subset is actually a valid non-empty subset of set\n    if subset is empty:\n        return False\n    for each element of subset:\n        if element does not appear in set:\n            return False\n\n    // verify that the elements of subset add up to 0\n    sum = 0\n    for each element of subset:\n        sum = sum + subset\n    if sum == 0:\n        return True\n    else:\n        return False</code></pre><p></p><p></p>", "subtitle_files": [], "options": {}, "name": "text", "subtitles": {}, "animation": null, "feedback_correct": "", "source": null, "video": null}, "time": "2016-09-04T00:43:31.761096"}