{"id": "118620", "block": {"feedback_wrong": "", "tests_archive": null, "text": "<p>As you hopefully noticed in the previous step, even if a given data type's\u00a0<b><span class=\"wysiwyg-color-green\">hash function</span></b>\u00a0is good, or even\u00a0<i>perfect</i> as\u00a0<i>h</i>(<i>k</i>) was on the previous step, if we choose a poor size for our array or, given an array, if we choose a poor indexing\u00a0<b><span class=\"wysiwyg-color-green\">hash function</span></b>, like\u00a0<i>H</i>(<i>k</i>) in the previous step, we will still run into the problem of numerous collisions. Also, you should have noticed that, if a given object <i>key</i>\u00a0has\u00a0<i>k</i> elements (e.g. a string with\u00a0<i>k</i> characters, or a list with\u00a0<i>k</i> numbers), a good\u00a0<b><span class=\"wysiwyg-color-green\">hash function</span></b>\u00a0for\u00a0<i>key</i> will incorporate each of\u00a0<i>key</i>'s\u00a0<i>k</i> elements into the hash value, meaning a good\u00a0<b><span class=\"wysiwyg-color-green\">hash function</span></b> would be\u00a0<b>O(<i>k</i>)</b>.<b></b></p><p>Thus far, we have discussed\u00a0<b><span class=\"wysiwyg-color-blue\">hashing</span></b> and the motivation for\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Tables</span></b>, and we have defined what a\u00a0<b><span class=\"wysiwyg-color-green\">hash function</span></b> is as well as what makes one good or bad, but we still have yet to actually formally discuss\u00a0<b><span class=\"wysiwyg-color-purple\">Hash Tables</span></b> themselves. In the next section, we will finally shed light on this seemingly mystical data structure that achieves O(1) average-case finds, insertions, and removals.</p>", "subtitle_files": [], "options": {}, "name": "text", "subtitles": {}, "animation": null, "feedback_correct": "", "source": null, "video": null}, "time": "2016-09-04T00:49:34.092305"}